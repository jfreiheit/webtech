{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-Technologien \u00b6 Herzlich willkommen zur WebTech-Veranstaltung! Grober Inhalt \u00b6 In dieser Veranstaltung lernen Sie, was das World Wide Web ist und wie man eigene Webseiten und -anwendungen realisiert. Sie lernen die Protokolle und Sprachen http , HTML , CSS und JavaScript kennen und machen sich mit Angular , Node.js und REST vertraut. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 05.-09.10.2020 Einf\u00fchrung und Organisatorisches \u00dcbung 0 - - 2. 12.-16.10.2020 HTML \u00dcbung 1 Idee 25.10.2020 3. 19.-23.10.2020 CSS (Eigenschaften und Selektoren) \u00dcbung 2 - 01.11.2020 4. 26.-30.10.2020 RWD (Responsive Webdesign) \u00dcbung 3 Konzept 08.11.2020 5. 02.-06.11.2020 JavaScript (DOM, Events, DOM-Funktionen) \u00dcbung 4 - 15.11.2020 6. 09.-13.11.2020 JavaScript (JSON, AJAX) \u00dcbung 5 Datenmodell 22.11.2020 7. 16.-20.11.2020 Angular (Einf\u00fchrung und Komponenten) \u00dcbung 6 Schnittstelle 29.11.2020 8. 23.-27.11.2020 Angular (Direktiven, data-, property-, event-binding) \u00dcbung 7 Frontend (c+r) 06.12.2020 9. 30.-04.12.2020 Angular (Lifecycle-Hooks, Services, Routing) \u00dcbung 8 Frontend (u+d) 13.12.2020 10. 07.-11.12.2020 Angular (HTTP-Client, Formulare), MySQL, REST \u00dcbung 9 Frontend fertig 20.12.2020 11. 14.-18.12.2020 Node.js (Einf\u00fchrung, Webserver) \u00dcbung 10 Backend ( c ) 10.01.2020 12. 21.-25.12.2020 Node.js (Express, Request, Response, URL) - Backend ( r ) - 13. 04.-08.01.2021 Node.js (Model View Controller) - Backend (u) - 14. 11.-15.01.2021 Node.js (Datenbankanbindung, REST-Server) - Backend (d + fertig) - 15. 18.-22.01.2021 Wiederholung - fertig stellen - 16. 25.-29.01.2021 - Fragen Abgabe 1.PZ 13.02.2021 - Abgabe 2.PZ 01.04.2021 - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Inhalte \u00b6 Woche 1 - Einf\u00fchrung und Organisatorisches siehe \u00dcbungsaufgabe 0 die Notizen dazu finden Sie hier die Notizen dazu finden Sie hier Woche 2 - Hypertext Markup Language (HTML) siehe HTML siehe \u00dcbungsaufgabe 1 (HTML) hier die Bilder htw.jpg und fiw.jpg index.html aus HTML-Vorlesung <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > < title > HTML-Einf\u00fchrung </ title > </ head > < body > < h1 > gro\u00dfe \u00dcberschrift </ h1 > neuer Text < p > ein erster Absatz </ p > < h3 > kleinere \u00dcberschrift </ h3 > < p > noch ein Absatz </ p > Vorteile von HTML: < ul > < li > Syntax und Semantic frei definierbar </ li > < li > von Menschen lesbar </ li > < li > in Programmiersprachen einbettbar </ li > < li > offen f\u00fcr zuk\u00fcnftige Entwicklungen </ li > </ ul > <!-- das ist ein Kommentar --> < p > das ist ein l\u00e4ngerer Absatz < br /> das ist Text auf der n\u00e4chsten Zeile </ p > < img src = \"./images/fiw.jpg\" alt = \"FIW-Logo\" style = \"width: 200px;\" title = \"Mouseover-Effekt Informatione, die erscheinen, wenn wir mit der Maus dr\u00fcber fahren\" /> < h3 > Input-Elemente </ h3 > < input type = \"text\" /> < input type = \"radio\" /> < input type = \"checkbox\" checked = \"checked\" /> < input type = \"datetime-local\" /> < h3 > Hyperlinks </ h3 > das ist Text < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > < img src = \"./images/htw.jpg\" alt = \"HTW Logo\" /> </ a > das ist weiterer Text < p > < a href = \"./Unter/dok1.html\" > Dok 1 </ a > </ p > < h3 > Container </ h3 > < section > < header > ein Absatz </ header > < article > noch ein Absatz </ article > < footer > noch ein Absatz </ footer > </ section > < div > < p > ein Absatz </ p > < p > noch ein Absatz </ p > < p > noch ein Absatz </ p > </ div > < h3 > Formulare </ h3 > < form method = \"post\" > < input type = \"text\" name = \"user\" placeholder = \"user\" /> < input type = \"password\" name = \"pwd\" /> < button type = \"submit\" > Login </ button > </ form > < ul > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#http-anfragemethoden\" target = \"_blank\" > HTTP-Anfragemethoden </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#http-statusmeldungen\" target = \"_blank\" > HTTP-Statusmeldungen </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#urls\" target = \"_blank\" > URLs </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#domain-name-service-dns\" target = \"_blank\" > Domain Name Service (DNS) </ a > </ li > </ ul > </ body > </ html > Woche 3 - Cascading Style Sheets (CSS) siehe CSS siehe \u00dcbungsaufgabe 2 (CSS) css.html aus CSS-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > CSS </ title > <!-- 1. externe CSS-Datei --> < link rel = \"stylesheet\" href = \"./styles/mystyles.css\" > <!-- 2. style-Element --> < style > h1 { font-weight : normal ; color : red ; } div > ul { color : grey ; } li { display : inline ; padding : 10 px ; margin : 5 px ; } span { display : block ; color : red ; } </ style > </ head > < body > < h1 > Cascading Style Sheets (CSS) </ h1 > < div > living standard - weiterentwickelt von W3C. < span > Seit 2000 CSS3. </ span > Wichtig: Trennung zwischen Inhalten (HTML) und Aussehen (CSS). </ div > < div > Wof\u00fcr CSS? < section > < ul class = \"orangeBackground blackColor\" > < li > ansprechender Stil (Font, Farben, Schriftgr\u00f6\u00dfe, Rahmen, ...) < a href = \"index.html\" > Link 2 </ a > </ li > < li > Layout (2-spaltig, 3-spaltig, Kopf- und Fu\u00dfzeilen, ...) < a href = \"index.html\" > Link 3 </ a > </ li > < li > responsives Webdesign (unterschiedlich f\u00fcr Mobile, Tablets, Desktop, ...) < a href = \"index.html\" > Link 4 </ a > </ li > </ ul > </ section > </ div > < ul class = \"orangeBackground\" > Inhalte heute: < li > Orte f\u00fcr CSS-Definitionen < a href = \"Unter/dok1.html\" > Link 5 </ a > </ li > < li > Selektoren < a href = \"Unter/dok1.html\" > Link 6 </ a > </ li > < li > Box Model < a href = \"Unter/dok1.html\" > Link 7 </ a > </ li > < li > Layout (Prinzip, float) < a href = \"Unter/dok1.html\" > Link 8 </ a > </ li > < li > Gewichtung der Selektoren < a href = \"Unter/dok1.html\" > Link 9 </ a > </ li > </ ul > </ body > </ html > styles/mystyles.css aus CSS-Vorlesung /* Kommentar in CSS selektor { eigenschaft1: wert; eigenschaft2: wert; } */ body { font-family : Verdana ; color : blue ; } a { text-decoration : none ; color : sandybrown ; } layout.html aus CSS-Vorlesung < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Layout mit float </ title > < style > # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } </ style > </ head > < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > </ html > gewichtung.html aus CSS-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Gewichtung der Selektoren </ title > < style > a : link { /* B=0 C=1 D=1 */ color : blue ; } li a { /* B=0 C=0 D=2 */ color : magenta ; } # navigation a . link { /* B=1 C=1 D=1 */ color : red ; } # navigation li a { /* B=1 C=0 D=2 */ color : black ; } </ style > </ head > < body > < ul id = \"navigation\" > < li >< a href = \"startseite.html\" class = \"link\" > Startseite </ a ></ li > < li >< a href = \"unterseite.html\" class = \"link\" > Unterseite </ a ></ li > < li > Kategorie A: style-Attribut im html-Element (Beispiel 0) </ li > < li > Kategorie B: f\u00fcr id </ li > < li > Kategorie C: Anzahl Klassen und Pseudoklassen </ li > < li > Kategorie D: Anzahl der Elemente und Pseudoelemente </ li > </ ul > </ body > </ html > Woche 4 - Responsive Webdesign (RWD) siehe Responsive Webdesign siehe \u00dcbungsaufgabe 3 (RWD + Bootstrap) Woche 5 - JavaScript (DOM) siehe JavaScript siehe \u00dcbungsaufgabe 4 (JavaScript, DOM) javascript.html aus JavaScript (DOM)-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > HTML \u00e4ndern </ title > </ head > < body class = \"container-fluid\" > < input id = \"input1\" type = \"text\" class = \"form-control\" placeholder = \"neues Item\" onchange = \"doSomething()\" /> < ul id = \"ul1\" class = \"list-group\" > < li class = \"list-group-item active\" > erster </ li > < li class = \"list-group-item\" > zweiter </ li > < li class = \"list-group-item\" > dritter </ li > </ ul > < button type = \"button\" class = \"btn btn-primary\" onclick = \"createHeadline()\" > Klick mich </ button > < script > var idnr = 1 ; function doSomething () { let input1 = document . getElementById ( 'input1' ); let input1_value = input1 . value ; let ul1 = document . getElementById ( 'ul1' ); let new_item = document . createElement ( 'li' ); new_item . classList . add ( \"list-group-item\" ); new_item . id = \"li\" + idnr ++ ; /* let new_text = document.createTextNode(input1_value); new_item.appendChild(new_text); // li --> value */ new_item . innerHTML = input1_value + \"<span style='color: red;'> test </span>\" ; let listitems = document . getElementsByTagName ( 'li' ); console . log ( \"--------- drei ---------\" + listitems . length ); for ( let i = 0 ; i < listitems . length ; i ++ ) { console . log ( listitems [ i ]); } ul1 . insertBefore ( new_item , listitems [ 0 ]); let new_item2 = document . createElement ( 'li' ); new_item2 . classList . add ( \"list-group-item\" ); new_item2 . id = \"li\" + idnr ++ ; new_item2 . innerHTML = \"fuenftes\" ; ul1 . appendChild ( new_item2 ); console . log ( \"--------- nach 2 neuen ---------\" + listitems . length ); for ( let i = 0 ; i < listitems . length ; i ++ ) { console . log ( listitems [ i ]); } listitems [ 1 ]. classList . remove ( \"active\" ); listitems [ 3 ]. classList . add ( \"active\" ); } function createHeadline () { let body = document . body ; let input = document . getElementById ( 'input1' ); let h1 = document . createElement ( 'h1' ); h1 . innerHTML = \"HTML \u00e4ndern\" ; h1 . addEventListener ( 'mouseover' , doSomethingElse ); h1 . addEventListener ( 'mouseout' , doSomethingElse ); body . insertBefore ( h1 , input ); } function doSomethingElse ( event ) { let h1 = event . target ; if ( h1 . style . color === \"red\" ) { h1 . style . color = \"green\" ; h1 . style . fontSize = \"xx-large\" ; h1 . innerHTML = \"... und weg\" ; } else { h1 . style . color = \"red\" ; h1 . style . fontSize = \"400%\" ; h1 . innerHTML = \"... und wieder da\" ; } } </ script > </ body > </ html > Woche 6 - JavaScript (JSON, Ajax) siehe JSON und Ajax siehe \u00dcbungsaufgabe 5 (JSON, Ajax) json+ajax.html aus JavaScript (JSON, Ajax)-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > JSON+AJAX </ title > </ head > < body onload = \"loadJSON()\" > < h3 > Objekte </ h3 > < div id = \"div1\" ></ div > < button type = \"button\" onclick = \"showObjects()\" > Show Objects </ button > < script > let person_obj ; function showObjects () { /* let person = { vorname: \"Maria\", nachname: \"Musterfrau\", kinder: { max: { vorname: \"Max\", alter: 7 }, moritz: { vorname: \"Moritz\", alter: 3 } }, auskunft: function() { return \"F: \" + this.vorname + \" \" + this.nachname; } } console.log(person.auskunft()); person.wohnort = \"Musterdorf\"; */ let person = person_obj ; console . log ( person ); console . log ( person . vorname + \" \" + person . nachname ); document . getElementById ( 'div1' ). innerHTML += person . vorname + \" \" + person . nachname + \"<br/>\" ; console . log ( person . wohnort ); /* let kinder = person.kinder; for(let i=0; i<kinder.length; i++) { console.log(kinder[i].vorname); } */ console . log ( person . kinder . max . vorname ); console . log ( person . kinder . moritz . vorname ); for ( let eigenschaften in person ) { console . log ( eigenschaften ); console . log ( person [ eigenschaften ]); } for ( let eigenschaften in person . kinder ) { console . log ( person . kinder [ eigenschaften ]. vorname ); for ( let kidseig in person . kinder [ eigenschaften ]) { console . log ( person . kinder [ eigenschaften ][ kidseig ]); } } let json_obj = JSON . stringify ( person ); document . getElementById ( 'div1' ). innerHTML += json_obj ; } function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { person_obj = JSON . parse ( this . responseText ); showObjects (); } }; xhttp . open ( \"GET\" , \"http://localhost/Webtech20/person.json\" , true ); xhttp . send (); } </ script > </ body > </ html > person.json aus JavaScript (JSON, Ajax)-Vorlesung { \"vorname\" : \"Maria\" , \"nachname\" : \"Musterfrau\" , \"kinder\" : { \"max\" : { \"vorname\" : \"Max\" , \"alter\" : 7 }, \"moritz\" : { \"vorname\" : \"Moritz\" , \"alter\" : 3 } }, \"wohnort\" : \"Musterdorf\" } \u00dcbungen \u00b6 \u00dcbungsaufgabe 0 w\u00e4hlen Sie eine IDE aus und installieren Sie diese richten Sie sich ein Git-Repository ein (z.B. WebTech20 ) und pushen Sie es auf einen zentralen Dienst ( siehe ) laden Sie mich zu Ihrem Git-Dienst ein ( siehe ) erstellen Sie in Ihrem Repostory eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> richten Sie Ihren Webserver so ein, dass WebTech20 Ihr DocumentRoot ist ( siehe ) commiten und pushen Sie Ihr Repository \u00dcbungsaufgabe 1 (HTML) Erstellen Sie in einem Uebung1 -Ordner eine Datei uebung1.html . Das body -Element soll ein header -Element, ein nav -Element, ein section -Element und ein footer -Element enthalten. Unter dieser \u00dcbungsaufgabe (siehe mockupdata ) ist der HTML-Code einer Tabelle mit allen Teilnehmerinnen einer Veranstaltung. Kopieren Sie den Inhalt der Datei so in Ihren HTML-Code, dass folgende Seite erscheint: Es sollen 4 Unterseiten erstellt werden. Bei Klick auf diese Seiten soll die Tabelle jeweils nur die Teilnehmerinnen enthalten, deren Nachname mit dem entsprechenden Anfangsbuchstaben beginnt (also in ag.html nur alle Nachnamen, die mit A bis G beginnen). Die Seiten ag.html , hl.html , mr.html und sz.html sollen im Ordner NN abgelegt werden, der Unterordner von Uebung1 ist. Achten Sie darauf, dass man von jeder Unterseite auf jede andere Unterseite und auch auf die Hauptseite ( uebung1.html ) wechseln k\u00f6nnen muss. Das einzubindende Logo des Studiengangs liegt hier . Es soll in einen images -Ordner gespeichert werden, der in der Ordner-Hierarchie neben dem Uebung1 -Ordner liegt. Um die Gr\u00f6\u00dfe des Bildes festzulegen, k\u00f6nnen Sie mit Hilfe des style -Attributes die H\u00f6he und die Breite bestimmen: style=\"width:53px; height=48px;\" N\u00e4chste Woche wird Uebung1 um CSS erweitert. mockupdata < table > < thead > < tr > < th > Vorname </ th > < th > Nachname </ th > < th > E-Mail-Adresse </ th > < th > IP-Adresse </ th > </ tr > </ thead > < tbody > < tr > < td > Adam </ td > < td > Anderson </ td > < td > aanderson8@google.fr </ td > < td > 118.93.83.157 </ td > </ tr > < tr > < td > Susan </ td > < td > Andrews </ td > < td > sandrewsn@google.co.jp </ td > < td > 228.214.9.251 </ td > </ tr > < tr > < td > Catherine </ td > < td > Andrews </ td > < td > candrewsp@noaa.gov </ td > < td > 112.111.87.178 </ td > </ tr > < tr > < td > Alan </ td > < td > Bradley </ td > < td > abradley1c@globo.com </ td > < td > 229.152.117.127 </ td > </ tr > < tr > < td > Anne </ td > < td > Brooks </ td > < td > abrooks16@bravesites.com </ td > < td > 243.159.39.234 </ td > </ tr > < tr > < td > Russell </ td > < td > Brown </ td > < td > rbrownq@nifty.com </ td > < td > 215.38.120.242 </ td > </ tr > < tr > < td > Ryan </ td > < td > Burton </ td > < td > rburton18@foxnews.com </ td > < td > 159.60.107.14 </ td > </ tr > < tr > < td > Roy </ td > < td > Campbell </ td > < td > rcampbell1@geocities.com </ td > < td > 237.232.34.20 </ td > </ tr > < tr > < td > Russell </ td > < td > Campbell </ td > < td > rcampbell17@eventbrite.com </ td > < td > 251.2.92.63 </ td > </ tr > < tr > < td > Bonnie </ td > < td > Coleman </ td > < td > bcoleman11@fc2.com </ td > < td > 109.150.122.102 </ td > </ tr > < tr > < td > Ernest </ td > < td > Coleman </ td > < td > ecoleman15@businessweek.com </ td > < td > 213.173.4.7 </ td > </ tr > < tr > < td > Richard </ td > < td > Cruz </ td > < td > rcruz7@unc.edu </ td > < td > 235.124.23.221 </ td > </ tr > < tr > < td > Sean </ td > < td > Cruz </ td > < td > scruz10@answers.com </ td > < td > 92.255.49.227 </ td > </ tr > < tr > < td > Rebecca </ td > < td > Cunningham </ td > < td > rcunninghamd@mac.com </ td > < td > 65.79.191.52 </ td > </ tr > < tr > < td > Margaret </ td > < td > Evans </ td > < td > mevansh@pcworld.com </ td > < td > 162.10.86.196 </ td > </ tr > < tr > < td > Jeffrey </ td > < td > Ford </ td > < td > jford14@cnet.com </ td > < td > 210.216.54.14 </ td > </ tr > < tr > < td > Andrea </ td > < td > Gardner </ td > < td > agardnerv@woothemes.com </ td > < td > 179.91.0.30 </ td > </ tr > < tr > < td > Deborah </ td > < td > George </ td > < td > dgeorge6@furl.net </ td > < td > 201.76.47.162 </ td > </ tr > < tr > < td > Sean </ td > < td > Gibson </ td > < td > sgibsony@alexa.com </ td > < td > 48.114.103.55 </ td > </ tr > < tr > < td > Virginia </ td > < td > Graham </ td > < td > vgrahamk@aol.com </ td > < td > 165.219.171.1 </ td > </ tr > < tr > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > < tr > < td > Virginia </ td > < td > Hawkins </ td > < td > vhawkinsf@ehow.com </ td > < td > 93.120.46.203 </ td > </ tr > < tr > < td > Edward </ td > < td > Hicks </ td > < td > ehicksc@pcworld.com </ td > < td > 199.153.27.1 </ td > </ tr > < tr > < td > Mark </ td > < td > Johnson </ td > < td > mjohnsonj@hostgator.com </ td > < td > 73.87.135.206 </ td > </ tr > < tr > < td > Ruth </ td > < td > Jordan </ td > < td > rjordan1a@smugmug.com </ td > < td > 193.140.80.64 </ td > </ tr > < tr > < td > Antonio </ td > < td > Kim </ td > < td > akim4@odnoklassniki.ru </ td > < td > 168.244.191.78 </ td > </ tr > < tr > < td > Jennifer </ td > < td > Marshall </ td > < td > jmarshallt@gnu.org </ td > < td > 104.191.49.94 </ td > </ tr > < tr > < td > Eric </ td > < td > Matthews </ td > < td > ematthews5@independent.co.uk </ td > < td > 138.194.30.1 </ td > </ tr > < tr > < td > Raymond </ td > < td > Mcdonald </ td > < td > rmcdonald2@ihg.com </ td > < td > 161.24.42.24 </ td > </ tr > < tr > < td > Eric </ td > < td > Miller </ td > < td > emillere@creativecommons.org </ td > < td > 122.159.17.218 </ td > </ tr > < tr > < td > Jonathan </ td > < td > Morales </ td > < td > jmoralesa@ovh.net </ td > < td > 97.65.110.105 </ td > </ tr > < tr > < td > Marie </ td > < td > Morgan </ td > < td > mmorganb@cloudflare.com </ td > < td > 226.79.152.112 </ td > </ tr > < tr > < td > Amanda </ td > < td > Nelson </ td > < td > anelson13@indiatimes.com </ td > < td > 161.185.121.245 </ td > </ tr > < tr > < td > Lisa </ td > < td > Olson </ td > < td > lolsonr@telegraph.co.uk </ td > < td > 77.245.172.100 </ td > </ tr > < tr > < td > Alice </ td > < td > Ortiz </ td > < td > aortizw@histats.com </ td > < td > 179.52.222.21 </ td > </ tr > < tr > < td > Peter </ td > < td > Phillips </ td > < td > pphillipss@1688.com </ td > < td > 11.158.255.76 </ td > </ tr > < tr > < td > Matthew </ td > < td > Porter </ td > < td > mporter9@europa.eu </ td > < td > 174.81.178.88 </ td > </ tr > < tr > < td > Tammy </ td > < td > Ray </ td > < td > trayx@weather.com </ td > < td > 192.243.38.190 </ td > </ tr > < tr > < td > Mark </ td > < td > Richardson </ td > < td > mrichardson1d@ihg.com </ td > < td > 209.217.14.154 </ td > </ tr > < tr > < td > Joan </ td > < td > Roberts </ td > < td > jroberts12@alibaba.com </ td > < td > 4.91.143.62 </ td > </ tr > < tr > < td > Kathleen </ td > < td > Rose </ td > < td > kroseg@pinterest.com </ td > < td > 222.172.140.56 </ td > </ tr > < tr > < td > Steve </ td > < td > Sanders </ td > < td > ssanders1b@wikispaces.com </ td > < td > 91.61.109.245 </ td > </ tr > < tr > < td > Shirley </ td > < td > Scott </ td > < td > sscottm@macromedia.com </ td > < td > 219.237.108.82 </ td > </ tr > < tr > < td > Lillian </ td > < td > Stephens </ td > < td > lstephens19@hugedomains.com </ td > < td > 89.85.137.204 </ td > </ tr > < tr > < td > Nicole </ td > < td > Thompson </ td > < td > nthompson3@admin.ch </ td > < td > 13.183.208.155 </ td > </ tr > < tr > < td > Marie </ td > < td > Thompson </ td > < td > mthompsonz@yelp.com </ td > < td > 162.164.5.231 </ td > </ tr > < tr > < td > Alan </ td > < td > Vasquez </ td > < td > avasquezo@miibeian.gov.cn </ td > < td > 178.109.86.172 </ td > </ tr > < tr > < td > Mildred </ td > < td > Watkins </ td > < td > mwatkins0@miibeian.gov.cn </ td > < td > 150.67.132.64 </ td > </ tr > < tr > < td > Eugene </ td > < td > Williams </ td > < td > ewilliamsi@deliciousdays.com </ td > < td > 67.208.26.182 </ td > </ tr > < tr > < td > Catherine </ td > < td > Williams </ td > < td > cwilliamsl@360.cn </ td > < td > 154.87.204.51 </ td > </ tr > </ tbody > </ table > \u00dcbungsaufgabe 2 (CSS) Erstellen Sie (falls noch nicht geschehen) eine index.html -Datei in Ihrem Repository-Ordner (also z.B. DocumentRoot/Webtech20 ) derart, dass diese direkte Links auf Ihre L\u00f6sungen der \u00dcbungen enthalten (z.B. in einer Tabelle oder einer Liste). Kopieren Sie den Ordner Uebung1 in den Ordner Uebung2 (also inkl. Ordner NN ). \u00c4ndern Sie darin die Datei uebung1.html zu uebung2.html (umbenennen). \u00c4ndern Sie entsprechend alle Links innerhalb der Datei, damit Sie z.B. auf den Ordner Uebung2/NN zugreifen und nicht mehr auf Uebung1/NN . Legen Sie sich im Uebung2 -Ordner einen Ordner styles an. Erstellen Sie in dem styles -Ordner eine Datei mystyles.css . F\u00fcgen Sie im <head> -Bereich der uebung2.html eine logische Verkn\u00fcpfung zur mystyles.css -Datei ein ( <link href=\"./styles/mystyles.css\" rel=\"stylesheet\"> ). In mystyles.css definieren Sie (versuchen Sie mind. 6 der genannten 8 Punkte umzusetzen): Verdana als Schriftart f\u00fcr das ganze Dokument der <header> soll das HTW-Grau als Hintergrundfarbe, HTW-Orange als Schriftfarbe und der Text zentriert sein (siehe HTW Corporate Design ). die Tabelle soll ungef\u00e4hr wie dargestellt aussehen: d.h. mit Rahmen, mit einem Schatten, die Spalten\u00fcberschriften in wei\u00df, mit HTW-gr\u00fcnem Hintergrund. Das <nav> -Feld hat einen Abstand nach oben und nach unten von jeweils 50px . <a> -Elemente in einem <nav> -Element haben einen grauen Rand, deren Ecken abgerundet sind. Die Hintergrundfarbe ist HTW-blau. Schriftart ist wei\u00df und bold. <a> -Elemente in einem <nav> -Element sind nicht unterstrichen! F\u00e4hrt man mit der Maus \u00fcber ein <a> -Element in einem <nav> -Element \u00e4ndert sich die Hintergrundfarbe in HTW-grau und die Schriftfarbe in HTW-orange. Die Tabelle hat eine Breite von 80% des <section> -Elements. Der <footer> ist in HTW-Orange, die Schrift ist schwarz, der Text ist mittig und die Schrift ist kleiner. Die H\u00f6he des footers entsteht dadurch, dass die Schrift einen Abstand nach oben und nach unten von jeweils 20px hat. Am Ende soll es ungef\u00e4hr so aussehen: \u00dcbungsaufgabe 3 (RWD + Bootstrap) Kopieren Sie uebung2.html aus \u00dcbung 2 in einen neuen Uebung3 -Ordner und benennen Sie die Datei in uebung3.html um (der NN -Ordner muss nicht mehr mitkopiert werden). Achten Sie aber darauf, dass das FIW-Logo noch angezeigt wird Binden Sie in Ihre uebung3.html Bootstrap ein (entweder per CDN oder als lokalen Zugriff \u2013 siehe Bootstrap ) Header : der <header> enth\u00e4lt das FIW-Logo und die \u00dcberschrift <h1>Teilnehmerinnen WebTech</h1> weisen Sie dem <header> die Bootstrap-Klasse jumbotron zu definieren Sie eine CSS-Eigenschaft so, dass eine h1 -\u00dcberschrift in einem header ein Inline-Element ist definieren Sie eine padding-left -Eigenschaft f\u00fcr eine solche \u00dcberschrift so, dass die \u00dcberschrift ungef\u00e4hr mittig ist (relative Gr\u00f6\u00dfenangabe) der header soll ungef\u00e4hr so aussehen (Navigation und Anfang des Hauptteils sind auch schon zu sehen): Navigation : interne Links (Links innerhalb der Seite) funktionieren wie folgt: Sie weisen einem Element eine id zu, z.B. der Tabellenzeile, die den ersten Nachnamen enth\u00e4lt, der mit \"H\" beginnt: < tr id = \"H\" > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > Jetzt k\u00f6nnen Sie in einem internen Link mithilfe des Doppelkreuzes ( # ) und des Bezeichners f\u00fcr die id ( H ) darauf verweisen, z.B. < a class = \"nav-link\" href = \"#H\" > H-L </ a > Vergeben Sie entsprechend IDs f\u00fcr die entsprechenden Tabellenzeilen (A, H, M, S) und passen Sie Ihre Hyperlinks im Navigationsmen\u00fc entsprechend an Weisen Sie Ihrem <nav> -Element einen lightgrey-Hintergrund zu Erstellen Sie f\u00fcr die einzelnen Links eine <ul> , deren <li> jeweils ein <a> -Element mit den Referenzen auf die oben beschriebenen IDs enthalten Informieren Sie sich unter Navs (oder wo Sie m\u00f6chten) \u00fcber \u201eNavs\u201c und erstellen Sie Ihr Navigationsmen\u00fc so, wie oben in der Abbildung (siehe Header ) gezeigt \u00c4ndern Sie aber die Farbe der Links so, dass sie im HTW-Orange ( #FF5F00 ) erscheinen und wenn man mit der Maus dar\u00fcber f\u00e4hrt im HTW-Blau ( #0082D1 ) (Definieren Sie sich gerne Custom Properties und wenden Sie diese an) Hauptteil : der Hauptteil (ein Container) soll aus drei Containern bestehen: einer, der nur das Wort (\u00dcberschrift) \"links\" enth\u00e4lt, einer, der die Tabelle enth\u00e4lt und ein dritter, der nur das Wort (\u00dcberschrift) \"rechts\" enth\u00e4lt Weisen Sie diesem Hauptteil die Klasse row zu und gestalten gestalten Sie die drei inneren Container (links, Tabelle, rechts) so, dass sie ab einer Viewportbreite >= 992px ( lg ) nebeneinander sind, wobei die Tabelle 4x so breit ist wie die jeweiligen Container an der Seite unterhalb der Viewportbreite von 992px sollen die drei Teile untereinander sein Abbildung f\u00fcr Breite unter 992px : Abbildung f\u00fcr Breite oberhalb 992px : Mithilfe eigener Media-Queries sollen Sie daf\u00fcr sorgen, dass die beiden Container links und rechts einen orangenen Hintergrund und eine H\u00f6he von 100px haben, wenn der Viewport kleiner als 992px ist und einen hellgrauen ( lightgrey ) Hintergrund und eine automatische H\u00f6he ( height: auto; ), wenn der Viewport gr\u00f6\u00dfer ist Tabelle: Erkundigen Sie sich unter Tables und gestalten Sie die Tabelle so, dass sie ungef\u00e4hr so aussieht: Sie m\u00fcssen mit einer eigenen CSS-Definition daf\u00fcr sorgen, dass die Zeile, in der Sie mit der Maus sind, nicht mehr dunkelgrau, sondern in HTW-Gr\u00fcn erscheint \u00dcbungsaufgabe 4 (JavaScript, DOM) Kopieren Sie den Uebung3 -Ordner in einen Uebung4 -Ordner und benennen Sie die uebung3.html in uebung4.html um F\u00fcgen Sie Ihrer Tabelle eine f\u00fcnfte Spalte hinzu mit leerer \u00dcberschrift, also einfach ein weiteres <th></th> . F\u00fcgen Sie im Table-Body <tbody> auch in allen Zeilen ein f\u00fcnftes <td></td> hinzu (nicht h\u00e4ndisch! - Find and Replace der IDE nutzen!) F\u00fcgen Sie Ihrer Tablle nun in HTML eine weitere Zeile hinzu, die wie folgt aussehen soll: Verwenden Sie f\u00fcr den Button das Attribut onclick und rufen Sie eine JavaScript-Funktion checkAndAdd() auf, die Sie selbst schreiben in der checkAndAdd() -Funktion soll folgendes geschehen: sie pr\u00fcfen, ob in jedem der vier <input> -Felder (Vorname, Nachname, E-Mail-Adresse, IP-Adresse) etwas eingegeben wurde wenn ja, dann werden diese Werte f\u00fcr eine neue Tabellenzeile (\u00fcber der Eingabezeile) verwendet (in der folgenden Abbildung wurde test1 , test2 , test3 , test4 eingegeben): wenn nicht, dann werden die Felder, in denen nichts eingegeben wurde, durch Bootstrap rot umrandet ( is-invalid - siehe Tipps): Tipps: am einfachsten ist es sicherlich, wenn Sie f\u00fcr den <tbody> , die vier neuen <input> -Elemente und auch die Tabellenzeile <tr> , in der die <input> -Elemente sind, eine id vergeben, damit Sie in Ihrer Funktion checkAndAdd() jeweils mit document.getElementById() direkt darauf zugreifen k\u00f6nnen (siehe lokalisieren ) benutzen Sie f\u00fcr Ihre <input> -Elemente die Bootstrap-Klasse form-control , also z.B. <input id=\"i1\" type=\"text\" class=\"form-control\" placeholder=\"Vorname\" /> (siehe Bootstrap Forms ) haben Sie ein input -Objekt lokalisiert, z.B. durch let i1 = document.getElementById('i1') , dann k\u00f6nnen Sie \u00fcber i1.value auf den eingegeben Wert zugreifen (siehe Beispiele in HTML-Ereignisse und create ) Angenommen, Sie haben den value von i1 in der Variablen value_i1 gespeichert, dann k\u00f6nnen Sie mithilfe von value_i1 === \"\" pr\u00fcfen, ob der eingegebene String leer ist, ob also nichts eingegeben wurde ( === steht f\u00fcr identisch, d.h. Inhalt und Typ sind gleich - == w\u00fcrde auch gehen, dann muss der Typ nicht unbedingt gleich sein, der Inhalt aber schon - siehe z.B. Vergleichsoperatoren ) einem solchen i1 -Objekt k\u00f6nnen Sie die CSS-Klasse is-invalid mit i1.classList.add('is-invalid') hinzuf\u00fcgen und mit i1.classList.remove('is-invalid') wieder entfernen (selbst, wenn dem Element die Klasse gar nicht zuegordnet ist, gibt es keinen Fehler - siehe z.B. hier ) f\u00fcr die neu entstehende Tabellenzeile m\u00fcssen Sie f\u00fcnf neue td -Obejkte kreieren und diese an ein neu kreiertes tr -Objekt anh\u00e4ngen. Die ersten vier td -Obejkte bekommen f\u00fcr ihr innerHTML den entsprechenden value des input -Objektes (siehe create ) f\u00fcgen Sie das neue tr -Objekt in den tbody vor der Tabellenzeile mit den input -Feldern ein (siehe create ) Zusatz: sehr beeindruckend w\u00e4re es, wenn Sie die neue Zeile nicht immer direkt vor die Eingabezeile einf\u00fcgen, sondern alphabetisch korrekt nach dem Wert des Nachnamens. Sollte das jemand von Ihnen schaffen, schicken Sie mir bitte einen Pull-Request . Das w\u00e4re sehr cool! \u00dcbungsaufgabe 5 (JSON, Ajax) Laden Sie sich hier die Datei Uebung5.zip herunter und entpacken Sie sie. Es entsteht der Ordner Uebung5 . Dieser enth\u00e4lt eine Datei uebung5.html (bereits ausf\u00fchrbar), eine Datei staedte.json , die ein JSON enth\u00e4lt, das ausgelesen werden soll einen Ordner images , der Bilder enth\u00e4lt; die Referenzen darauf stehen im JSON Die Datei staedte.json enth\u00e4lt in JSON beschriebene Objekte der Form { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" } Alle diese Objekte sind in einem Array. Die Aufgabe ist, die Datei uebung5.html so zu erweitern, dass eine Tabelle in der folgenden Form entsteht: \u00d6ffnen Sie die Datei uebung5.html in Ihrer IDE und starten Sie sie auch schonmal im Browser. Es sind bereits angelegt: ein input -Element und eine Tabelle mit \u00dcberschriften. Dies geschieht in der Funktion createTable() . Diese Funktion wird in der Ereignisbehandlung des load -Events aufgerufen (siehe <body> ). Sie sollen nun: eine Funktion schreiben, die die JSON-Datei mithilfe eines XMLHttpRequest -Objektes (oder mithilfe von fetch() ) vom Server l\u00e4dt \u2192 siehe XMLHttpRequest rufen Sie diese Funktion anstelle der createTable() als Ereignisbehandlung des load -Events auf speichern Sie in dieser Funktion das JSON in der globalen Variable staedte_obj (die Variable ist bereits deklariert, Sie k\u00f6nnen aber auch nochmal hier \u00fcber globale Variablen nachlesen) rufen Sie in dieser Funktion die createTable() -Funktion auf in der createTable() -Funktion sollten Sie sich zun\u00e4chst eine Variable staedte anlegen, die das Array referenziert ( staedte_obj referenziert das Objekt, welches das Array enth\u00e4lt) \u2192 siehe dazu z.B. hier und hier in der Funktion gibt es einen gro\u00dfen Blockkommentar. An dieser Stelle sollten Sie jedes einzelne Element (Objekt) des staedte -Arrays (numerisch indiziert) auslesen f\u00fcr jedes Element eine neue Tabellenzeile generieren jede einzelne Eigenschaft eines Elementes entsprechend verwenden, um das Jahr, die Stadt, einen Link (als Button) und ein Bild ( img ) als eigenes <td> -Element in der Zeile zu erstellen Filter : in das input -Feld kann eine Zahl oder der Name einer Stadt eingegeben werden. Nach jedem eingegeben Zeichen wird \u00fcberpr\u00fcft, ob es eine entsprechende Stadt (oder mehrere) gibt. Die Liste der passenden St\u00e4dte wird in der Tabelle angezeigt, z.B.: (alle St\u00e4dte, die mit Br anfangen): oder alle St\u00e4dte, deren Gr\u00fcndungsjahr mit 12 beginnt: Tipps: der im JSON gespeicherte Link f\u00fcr das Bild kann als Wert des src -Attributes eines <img> -Elementes verwendet werden; das Bild wird dann geladen definieren Sie f\u00fcr die Bilder ein style -Attribut f\u00fcr die H\u00f6he; w\u00e4hlen Sie height = '60px' f\u00fcr den Wert des alt -Attributes des Bildes w\u00e4hlen Sie erneut den Namen der Stadt der Link ist ein <a> -Element. Wenn Sie ihm die (Bootstrap-)CSS-Klassen btn , btn-sm und btn-success zuweisen, sieht er aus wie der \"Button\" auf dem Bild Filter : Eine Zahl ( number ) kann mithilfe der toString() -Methode in einen String umgewandelt werden (z.B. staedte[i].jahr.toString() ) Die L\u00e4nge eines Strings wird mithilfe von length ermittelt (z.B. input.length ) Ein Teilstring kann mithilfe der substring(start,end) -Methode erzeugt werden (z.B. staedte[i].stadt.substring(0,input.length) ) der Teilstring kann mit dem aktuellen Wert des input -Feldes verglichen werden Vergessen Sie nicht, als Ereignisbehandlung f\u00fcr das input -Element die createTable() -Methode aufzurufen! Welches Ereignis soll darin beahndelt werden? Viel Spa\u00df und viel Erfolg! \u00dcbungsaufgabe x - wird aber noch ge\u00e4ndert! Arbeiten Sie im Abschnitt Angular die Abschnitte Erstes Projekt erstellen und Angular-Projektstruktur durch. Sie m\u00fcssen dazu Angular installieren, eine Integrierte Entwicklungsumgebung und die passenden Developer Tools . Semesteraufgabe \u00b6 Am Ende des Kurses geben Sie eine Webanwendung ab. Diese wird bewertet und bildet die Modulnote f\u00fcr \"WebTech\" (es gibt also keine Klausur o.\u00e4.). \u00dcberlegen Sie sich fr\u00fch, was Sie implementieren wollen. Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Es k\u00f6nnen 2 Studentinnen gemeinsam ein Projekt durchf\u00fchren und abgeben. Sie erhalten dann (h\u00f6chstwahrscheinlich) die gleiche Note. Es muss an den Commits erkennbar sein, welchen Anteil am Ergebnis jede der beiden Studentinnen hatte. Mindestanforderungen Folgende Anforderungen werden an Ihr Projekt gestellt: das Frontend soll mit Angular entwickelt werden, das Backend mit Node.js, als Datenbank soll MySQL verwendet werden, es soll CRUD implementiert sein, d.h. Sie ben\u00f6tigen eine Komponente zur Erstellung und Speicherung eines Datenbankeintrages ( C reate), eine Komponente zur \u00c4nderung eines Datenbankeintrages ( U pdate), eine Komponente zur Anzeige aller Datenbankeintr\u00e4ge ( R ead), eine Komponente zum L\u00f6schen eines Datenbankeintrages ( D elete). Datenbankeintr\u00e4ge k\u00f6nnen B\u00fccher, CDs, ToDos, Einkaufslisten, Vorlesungen, K\u00fchlschrankinhalte usw. sein - wie gesagt, Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Die Anwendung soll in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Das README (oder eine andere Form der Projektbeschreibung) soll aussagekr\u00e4ftig sein. Verwenden Sie ein CSS-Framework, wie z.B. Materialize, Bootstrap o.\u00e4.! Ihre Anwendung soll \"modern\" aussehen. Nach Abgabe vereinbaren wir ein Online-Meeting, in dem Sie mir Ihre Anwendung nochmal zeigen k\u00f6nnen und ich Ihnen Fragen zu Ihrem Code stellen werde. Ist keine Pr\u00fcfung, sondern eher ein fachliches Gespr\u00e4ch.","title":"Home"},{"location":"#web-technologien","text":"Herzlich willkommen zur WebTech-Veranstaltung!","title":"Web-Technologien"},{"location":"#grober-inhalt","text":"In dieser Veranstaltung lernen Sie, was das World Wide Web ist und wie man eigene Webseiten und -anwendungen realisiert. Sie lernen die Protokolle und Sprachen http , HTML , CSS und JavaScript kennen und machen sich mit Angular , Node.js und REST vertraut. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 05.-09.10.2020 Einf\u00fchrung und Organisatorisches \u00dcbung 0 - - 2. 12.-16.10.2020 HTML \u00dcbung 1 Idee 25.10.2020 3. 19.-23.10.2020 CSS (Eigenschaften und Selektoren) \u00dcbung 2 - 01.11.2020 4. 26.-30.10.2020 RWD (Responsive Webdesign) \u00dcbung 3 Konzept 08.11.2020 5. 02.-06.11.2020 JavaScript (DOM, Events, DOM-Funktionen) \u00dcbung 4 - 15.11.2020 6. 09.-13.11.2020 JavaScript (JSON, AJAX) \u00dcbung 5 Datenmodell 22.11.2020 7. 16.-20.11.2020 Angular (Einf\u00fchrung und Komponenten) \u00dcbung 6 Schnittstelle 29.11.2020 8. 23.-27.11.2020 Angular (Direktiven, data-, property-, event-binding) \u00dcbung 7 Frontend (c+r) 06.12.2020 9. 30.-04.12.2020 Angular (Lifecycle-Hooks, Services, Routing) \u00dcbung 8 Frontend (u+d) 13.12.2020 10. 07.-11.12.2020 Angular (HTTP-Client, Formulare), MySQL, REST \u00dcbung 9 Frontend fertig 20.12.2020 11. 14.-18.12.2020 Node.js (Einf\u00fchrung, Webserver) \u00dcbung 10 Backend ( c ) 10.01.2020 12. 21.-25.12.2020 Node.js (Express, Request, Response, URL) - Backend ( r ) - 13. 04.-08.01.2021 Node.js (Model View Controller) - Backend (u) - 14. 11.-15.01.2021 Node.js (Datenbankanbindung, REST-Server) - Backend (d + fertig) - 15. 18.-22.01.2021 Wiederholung - fertig stellen - 16. 25.-29.01.2021 - Fragen Abgabe 1.PZ 13.02.2021 - Abgabe 2.PZ 01.04.2021 -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht.","title":"Organisatorisches"},{"location":"#inhalte","text":"Woche 1 - Einf\u00fchrung und Organisatorisches siehe \u00dcbungsaufgabe 0 die Notizen dazu finden Sie hier die Notizen dazu finden Sie hier Woche 2 - Hypertext Markup Language (HTML) siehe HTML siehe \u00dcbungsaufgabe 1 (HTML) hier die Bilder htw.jpg und fiw.jpg index.html aus HTML-Vorlesung <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > < title > HTML-Einf\u00fchrung </ title > </ head > < body > < h1 > gro\u00dfe \u00dcberschrift </ h1 > neuer Text < p > ein erster Absatz </ p > < h3 > kleinere \u00dcberschrift </ h3 > < p > noch ein Absatz </ p > Vorteile von HTML: < ul > < li > Syntax und Semantic frei definierbar </ li > < li > von Menschen lesbar </ li > < li > in Programmiersprachen einbettbar </ li > < li > offen f\u00fcr zuk\u00fcnftige Entwicklungen </ li > </ ul > <!-- das ist ein Kommentar --> < p > das ist ein l\u00e4ngerer Absatz < br /> das ist Text auf der n\u00e4chsten Zeile </ p > < img src = \"./images/fiw.jpg\" alt = \"FIW-Logo\" style = \"width: 200px;\" title = \"Mouseover-Effekt Informatione, die erscheinen, wenn wir mit der Maus dr\u00fcber fahren\" /> < h3 > Input-Elemente </ h3 > < input type = \"text\" /> < input type = \"radio\" /> < input type = \"checkbox\" checked = \"checked\" /> < input type = \"datetime-local\" /> < h3 > Hyperlinks </ h3 > das ist Text < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > < img src = \"./images/htw.jpg\" alt = \"HTW Logo\" /> </ a > das ist weiterer Text < p > < a href = \"./Unter/dok1.html\" > Dok 1 </ a > </ p > < h3 > Container </ h3 > < section > < header > ein Absatz </ header > < article > noch ein Absatz </ article > < footer > noch ein Absatz </ footer > </ section > < div > < p > ein Absatz </ p > < p > noch ein Absatz </ p > < p > noch ein Absatz </ p > </ div > < h3 > Formulare </ h3 > < form method = \"post\" > < input type = \"text\" name = \"user\" placeholder = \"user\" /> < input type = \"password\" name = \"pwd\" /> < button type = \"submit\" > Login </ button > </ form > < ul > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#http-anfragemethoden\" target = \"_blank\" > HTTP-Anfragemethoden </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#http-statusmeldungen\" target = \"_blank\" > HTTP-Statusmeldungen </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#urls\" target = \"_blank\" > URLs </ a > </ li > < li >< a href = \"http://freiheit.f4.htw-berlin.de/webtech/html/#domain-name-service-dns\" target = \"_blank\" > Domain Name Service (DNS) </ a > </ li > </ ul > </ body > </ html > Woche 3 - Cascading Style Sheets (CSS) siehe CSS siehe \u00dcbungsaufgabe 2 (CSS) css.html aus CSS-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > CSS </ title > <!-- 1. externe CSS-Datei --> < link rel = \"stylesheet\" href = \"./styles/mystyles.css\" > <!-- 2. style-Element --> < style > h1 { font-weight : normal ; color : red ; } div > ul { color : grey ; } li { display : inline ; padding : 10 px ; margin : 5 px ; } span { display : block ; color : red ; } </ style > </ head > < body > < h1 > Cascading Style Sheets (CSS) </ h1 > < div > living standard - weiterentwickelt von W3C. < span > Seit 2000 CSS3. </ span > Wichtig: Trennung zwischen Inhalten (HTML) und Aussehen (CSS). </ div > < div > Wof\u00fcr CSS? < section > < ul class = \"orangeBackground blackColor\" > < li > ansprechender Stil (Font, Farben, Schriftgr\u00f6\u00dfe, Rahmen, ...) < a href = \"index.html\" > Link 2 </ a > </ li > < li > Layout (2-spaltig, 3-spaltig, Kopf- und Fu\u00dfzeilen, ...) < a href = \"index.html\" > Link 3 </ a > </ li > < li > responsives Webdesign (unterschiedlich f\u00fcr Mobile, Tablets, Desktop, ...) < a href = \"index.html\" > Link 4 </ a > </ li > </ ul > </ section > </ div > < ul class = \"orangeBackground\" > Inhalte heute: < li > Orte f\u00fcr CSS-Definitionen < a href = \"Unter/dok1.html\" > Link 5 </ a > </ li > < li > Selektoren < a href = \"Unter/dok1.html\" > Link 6 </ a > </ li > < li > Box Model < a href = \"Unter/dok1.html\" > Link 7 </ a > </ li > < li > Layout (Prinzip, float) < a href = \"Unter/dok1.html\" > Link 8 </ a > </ li > < li > Gewichtung der Selektoren < a href = \"Unter/dok1.html\" > Link 9 </ a > </ li > </ ul > </ body > </ html > styles/mystyles.css aus CSS-Vorlesung /* Kommentar in CSS selektor { eigenschaft1: wert; eigenschaft2: wert; } */ body { font-family : Verdana ; color : blue ; } a { text-decoration : none ; color : sandybrown ; } layout.html aus CSS-Vorlesung < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Layout mit float </ title > < style > # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } </ style > </ head > < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > </ html > gewichtung.html aus CSS-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Gewichtung der Selektoren </ title > < style > a : link { /* B=0 C=1 D=1 */ color : blue ; } li a { /* B=0 C=0 D=2 */ color : magenta ; } # navigation a . link { /* B=1 C=1 D=1 */ color : red ; } # navigation li a { /* B=1 C=0 D=2 */ color : black ; } </ style > </ head > < body > < ul id = \"navigation\" > < li >< a href = \"startseite.html\" class = \"link\" > Startseite </ a ></ li > < li >< a href = \"unterseite.html\" class = \"link\" > Unterseite </ a ></ li > < li > Kategorie A: style-Attribut im html-Element (Beispiel 0) </ li > < li > Kategorie B: f\u00fcr id </ li > < li > Kategorie C: Anzahl Klassen und Pseudoklassen </ li > < li > Kategorie D: Anzahl der Elemente und Pseudoelemente </ li > </ ul > </ body > </ html > Woche 4 - Responsive Webdesign (RWD) siehe Responsive Webdesign siehe \u00dcbungsaufgabe 3 (RWD + Bootstrap) Woche 5 - JavaScript (DOM) siehe JavaScript siehe \u00dcbungsaufgabe 4 (JavaScript, DOM) javascript.html aus JavaScript (DOM)-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > HTML \u00e4ndern </ title > </ head > < body class = \"container-fluid\" > < input id = \"input1\" type = \"text\" class = \"form-control\" placeholder = \"neues Item\" onchange = \"doSomething()\" /> < ul id = \"ul1\" class = \"list-group\" > < li class = \"list-group-item active\" > erster </ li > < li class = \"list-group-item\" > zweiter </ li > < li class = \"list-group-item\" > dritter </ li > </ ul > < button type = \"button\" class = \"btn btn-primary\" onclick = \"createHeadline()\" > Klick mich </ button > < script > var idnr = 1 ; function doSomething () { let input1 = document . getElementById ( 'input1' ); let input1_value = input1 . value ; let ul1 = document . getElementById ( 'ul1' ); let new_item = document . createElement ( 'li' ); new_item . classList . add ( \"list-group-item\" ); new_item . id = \"li\" + idnr ++ ; /* let new_text = document.createTextNode(input1_value); new_item.appendChild(new_text); // li --> value */ new_item . innerHTML = input1_value + \"<span style='color: red;'> test </span>\" ; let listitems = document . getElementsByTagName ( 'li' ); console . log ( \"--------- drei ---------\" + listitems . length ); for ( let i = 0 ; i < listitems . length ; i ++ ) { console . log ( listitems [ i ]); } ul1 . insertBefore ( new_item , listitems [ 0 ]); let new_item2 = document . createElement ( 'li' ); new_item2 . classList . add ( \"list-group-item\" ); new_item2 . id = \"li\" + idnr ++ ; new_item2 . innerHTML = \"fuenftes\" ; ul1 . appendChild ( new_item2 ); console . log ( \"--------- nach 2 neuen ---------\" + listitems . length ); for ( let i = 0 ; i < listitems . length ; i ++ ) { console . log ( listitems [ i ]); } listitems [ 1 ]. classList . remove ( \"active\" ); listitems [ 3 ]. classList . add ( \"active\" ); } function createHeadline () { let body = document . body ; let input = document . getElementById ( 'input1' ); let h1 = document . createElement ( 'h1' ); h1 . innerHTML = \"HTML \u00e4ndern\" ; h1 . addEventListener ( 'mouseover' , doSomethingElse ); h1 . addEventListener ( 'mouseout' , doSomethingElse ); body . insertBefore ( h1 , input ); } function doSomethingElse ( event ) { let h1 = event . target ; if ( h1 . style . color === \"red\" ) { h1 . style . color = \"green\" ; h1 . style . fontSize = \"xx-large\" ; h1 . innerHTML = \"... und weg\" ; } else { h1 . style . color = \"red\" ; h1 . style . fontSize = \"400%\" ; h1 . innerHTML = \"... und wieder da\" ; } } </ script > </ body > </ html > Woche 6 - JavaScript (JSON, Ajax) siehe JSON und Ajax siehe \u00dcbungsaufgabe 5 (JSON, Ajax) json+ajax.html aus JavaScript (JSON, Ajax)-Vorlesung <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > JSON+AJAX </ title > </ head > < body onload = \"loadJSON()\" > < h3 > Objekte </ h3 > < div id = \"div1\" ></ div > < button type = \"button\" onclick = \"showObjects()\" > Show Objects </ button > < script > let person_obj ; function showObjects () { /* let person = { vorname: \"Maria\", nachname: \"Musterfrau\", kinder: { max: { vorname: \"Max\", alter: 7 }, moritz: { vorname: \"Moritz\", alter: 3 } }, auskunft: function() { return \"F: \" + this.vorname + \" \" + this.nachname; } } console.log(person.auskunft()); person.wohnort = \"Musterdorf\"; */ let person = person_obj ; console . log ( person ); console . log ( person . vorname + \" \" + person . nachname ); document . getElementById ( 'div1' ). innerHTML += person . vorname + \" \" + person . nachname + \"<br/>\" ; console . log ( person . wohnort ); /* let kinder = person.kinder; for(let i=0; i<kinder.length; i++) { console.log(kinder[i].vorname); } */ console . log ( person . kinder . max . vorname ); console . log ( person . kinder . moritz . vorname ); for ( let eigenschaften in person ) { console . log ( eigenschaften ); console . log ( person [ eigenschaften ]); } for ( let eigenschaften in person . kinder ) { console . log ( person . kinder [ eigenschaften ]. vorname ); for ( let kidseig in person . kinder [ eigenschaften ]) { console . log ( person . kinder [ eigenschaften ][ kidseig ]); } } let json_obj = JSON . stringify ( person ); document . getElementById ( 'div1' ). innerHTML += json_obj ; } function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { person_obj = JSON . parse ( this . responseText ); showObjects (); } }; xhttp . open ( \"GET\" , \"http://localhost/Webtech20/person.json\" , true ); xhttp . send (); } </ script > </ body > </ html > person.json aus JavaScript (JSON, Ajax)-Vorlesung { \"vorname\" : \"Maria\" , \"nachname\" : \"Musterfrau\" , \"kinder\" : { \"max\" : { \"vorname\" : \"Max\" , \"alter\" : 7 }, \"moritz\" : { \"vorname\" : \"Moritz\" , \"alter\" : 3 } }, \"wohnort\" : \"Musterdorf\" }","title":"Inhalte"},{"location":"#ubungen","text":"\u00dcbungsaufgabe 0 w\u00e4hlen Sie eine IDE aus und installieren Sie diese richten Sie sich ein Git-Repository ein (z.B. WebTech20 ) und pushen Sie es auf einen zentralen Dienst ( siehe ) laden Sie mich zu Ihrem Git-Dienst ein ( siehe ) erstellen Sie in Ihrem Repostory eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> richten Sie Ihren Webserver so ein, dass WebTech20 Ihr DocumentRoot ist ( siehe ) commiten und pushen Sie Ihr Repository \u00dcbungsaufgabe 1 (HTML) Erstellen Sie in einem Uebung1 -Ordner eine Datei uebung1.html . Das body -Element soll ein header -Element, ein nav -Element, ein section -Element und ein footer -Element enthalten. Unter dieser \u00dcbungsaufgabe (siehe mockupdata ) ist der HTML-Code einer Tabelle mit allen Teilnehmerinnen einer Veranstaltung. Kopieren Sie den Inhalt der Datei so in Ihren HTML-Code, dass folgende Seite erscheint: Es sollen 4 Unterseiten erstellt werden. Bei Klick auf diese Seiten soll die Tabelle jeweils nur die Teilnehmerinnen enthalten, deren Nachname mit dem entsprechenden Anfangsbuchstaben beginnt (also in ag.html nur alle Nachnamen, die mit A bis G beginnen). Die Seiten ag.html , hl.html , mr.html und sz.html sollen im Ordner NN abgelegt werden, der Unterordner von Uebung1 ist. Achten Sie darauf, dass man von jeder Unterseite auf jede andere Unterseite und auch auf die Hauptseite ( uebung1.html ) wechseln k\u00f6nnen muss. Das einzubindende Logo des Studiengangs liegt hier . Es soll in einen images -Ordner gespeichert werden, der in der Ordner-Hierarchie neben dem Uebung1 -Ordner liegt. Um die Gr\u00f6\u00dfe des Bildes festzulegen, k\u00f6nnen Sie mit Hilfe des style -Attributes die H\u00f6he und die Breite bestimmen: style=\"width:53px; height=48px;\" N\u00e4chste Woche wird Uebung1 um CSS erweitert. mockupdata < table > < thead > < tr > < th > Vorname </ th > < th > Nachname </ th > < th > E-Mail-Adresse </ th > < th > IP-Adresse </ th > </ tr > </ thead > < tbody > < tr > < td > Adam </ td > < td > Anderson </ td > < td > aanderson8@google.fr </ td > < td > 118.93.83.157 </ td > </ tr > < tr > < td > Susan </ td > < td > Andrews </ td > < td > sandrewsn@google.co.jp </ td > < td > 228.214.9.251 </ td > </ tr > < tr > < td > Catherine </ td > < td > Andrews </ td > < td > candrewsp@noaa.gov </ td > < td > 112.111.87.178 </ td > </ tr > < tr > < td > Alan </ td > < td > Bradley </ td > < td > abradley1c@globo.com </ td > < td > 229.152.117.127 </ td > </ tr > < tr > < td > Anne </ td > < td > Brooks </ td > < td > abrooks16@bravesites.com </ td > < td > 243.159.39.234 </ td > </ tr > < tr > < td > Russell </ td > < td > Brown </ td > < td > rbrownq@nifty.com </ td > < td > 215.38.120.242 </ td > </ tr > < tr > < td > Ryan </ td > < td > Burton </ td > < td > rburton18@foxnews.com </ td > < td > 159.60.107.14 </ td > </ tr > < tr > < td > Roy </ td > < td > Campbell </ td > < td > rcampbell1@geocities.com </ td > < td > 237.232.34.20 </ td > </ tr > < tr > < td > Russell </ td > < td > Campbell </ td > < td > rcampbell17@eventbrite.com </ td > < td > 251.2.92.63 </ td > </ tr > < tr > < td > Bonnie </ td > < td > Coleman </ td > < td > bcoleman11@fc2.com </ td > < td > 109.150.122.102 </ td > </ tr > < tr > < td > Ernest </ td > < td > Coleman </ td > < td > ecoleman15@businessweek.com </ td > < td > 213.173.4.7 </ td > </ tr > < tr > < td > Richard </ td > < td > Cruz </ td > < td > rcruz7@unc.edu </ td > < td > 235.124.23.221 </ td > </ tr > < tr > < td > Sean </ td > < td > Cruz </ td > < td > scruz10@answers.com </ td > < td > 92.255.49.227 </ td > </ tr > < tr > < td > Rebecca </ td > < td > Cunningham </ td > < td > rcunninghamd@mac.com </ td > < td > 65.79.191.52 </ td > </ tr > < tr > < td > Margaret </ td > < td > Evans </ td > < td > mevansh@pcworld.com </ td > < td > 162.10.86.196 </ td > </ tr > < tr > < td > Jeffrey </ td > < td > Ford </ td > < td > jford14@cnet.com </ td > < td > 210.216.54.14 </ td > </ tr > < tr > < td > Andrea </ td > < td > Gardner </ td > < td > agardnerv@woothemes.com </ td > < td > 179.91.0.30 </ td > </ tr > < tr > < td > Deborah </ td > < td > George </ td > < td > dgeorge6@furl.net </ td > < td > 201.76.47.162 </ td > </ tr > < tr > < td > Sean </ td > < td > Gibson </ td > < td > sgibsony@alexa.com </ td > < td > 48.114.103.55 </ td > </ tr > < tr > < td > Virginia </ td > < td > Graham </ td > < td > vgrahamk@aol.com </ td > < td > 165.219.171.1 </ td > </ tr > < tr > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > < tr > < td > Virginia </ td > < td > Hawkins </ td > < td > vhawkinsf@ehow.com </ td > < td > 93.120.46.203 </ td > </ tr > < tr > < td > Edward </ td > < td > Hicks </ td > < td > ehicksc@pcworld.com </ td > < td > 199.153.27.1 </ td > </ tr > < tr > < td > Mark </ td > < td > Johnson </ td > < td > mjohnsonj@hostgator.com </ td > < td > 73.87.135.206 </ td > </ tr > < tr > < td > Ruth </ td > < td > Jordan </ td > < td > rjordan1a@smugmug.com </ td > < td > 193.140.80.64 </ td > </ tr > < tr > < td > Antonio </ td > < td > Kim </ td > < td > akim4@odnoklassniki.ru </ td > < td > 168.244.191.78 </ td > </ tr > < tr > < td > Jennifer </ td > < td > Marshall </ td > < td > jmarshallt@gnu.org </ td > < td > 104.191.49.94 </ td > </ tr > < tr > < td > Eric </ td > < td > Matthews </ td > < td > ematthews5@independent.co.uk </ td > < td > 138.194.30.1 </ td > </ tr > < tr > < td > Raymond </ td > < td > Mcdonald </ td > < td > rmcdonald2@ihg.com </ td > < td > 161.24.42.24 </ td > </ tr > < tr > < td > Eric </ td > < td > Miller </ td > < td > emillere@creativecommons.org </ td > < td > 122.159.17.218 </ td > </ tr > < tr > < td > Jonathan </ td > < td > Morales </ td > < td > jmoralesa@ovh.net </ td > < td > 97.65.110.105 </ td > </ tr > < tr > < td > Marie </ td > < td > Morgan </ td > < td > mmorganb@cloudflare.com </ td > < td > 226.79.152.112 </ td > </ tr > < tr > < td > Amanda </ td > < td > Nelson </ td > < td > anelson13@indiatimes.com </ td > < td > 161.185.121.245 </ td > </ tr > < tr > < td > Lisa </ td > < td > Olson </ td > < td > lolsonr@telegraph.co.uk </ td > < td > 77.245.172.100 </ td > </ tr > < tr > < td > Alice </ td > < td > Ortiz </ td > < td > aortizw@histats.com </ td > < td > 179.52.222.21 </ td > </ tr > < tr > < td > Peter </ td > < td > Phillips </ td > < td > pphillipss@1688.com </ td > < td > 11.158.255.76 </ td > </ tr > < tr > < td > Matthew </ td > < td > Porter </ td > < td > mporter9@europa.eu </ td > < td > 174.81.178.88 </ td > </ tr > < tr > < td > Tammy </ td > < td > Ray </ td > < td > trayx@weather.com </ td > < td > 192.243.38.190 </ td > </ tr > < tr > < td > Mark </ td > < td > Richardson </ td > < td > mrichardson1d@ihg.com </ td > < td > 209.217.14.154 </ td > </ tr > < tr > < td > Joan </ td > < td > Roberts </ td > < td > jroberts12@alibaba.com </ td > < td > 4.91.143.62 </ td > </ tr > < tr > < td > Kathleen </ td > < td > Rose </ td > < td > kroseg@pinterest.com </ td > < td > 222.172.140.56 </ td > </ tr > < tr > < td > Steve </ td > < td > Sanders </ td > < td > ssanders1b@wikispaces.com </ td > < td > 91.61.109.245 </ td > </ tr > < tr > < td > Shirley </ td > < td > Scott </ td > < td > sscottm@macromedia.com </ td > < td > 219.237.108.82 </ td > </ tr > < tr > < td > Lillian </ td > < td > Stephens </ td > < td > lstephens19@hugedomains.com </ td > < td > 89.85.137.204 </ td > </ tr > < tr > < td > Nicole </ td > < td > Thompson </ td > < td > nthompson3@admin.ch </ td > < td > 13.183.208.155 </ td > </ tr > < tr > < td > Marie </ td > < td > Thompson </ td > < td > mthompsonz@yelp.com </ td > < td > 162.164.5.231 </ td > </ tr > < tr > < td > Alan </ td > < td > Vasquez </ td > < td > avasquezo@miibeian.gov.cn </ td > < td > 178.109.86.172 </ td > </ tr > < tr > < td > Mildred </ td > < td > Watkins </ td > < td > mwatkins0@miibeian.gov.cn </ td > < td > 150.67.132.64 </ td > </ tr > < tr > < td > Eugene </ td > < td > Williams </ td > < td > ewilliamsi@deliciousdays.com </ td > < td > 67.208.26.182 </ td > </ tr > < tr > < td > Catherine </ td > < td > Williams </ td > < td > cwilliamsl@360.cn </ td > < td > 154.87.204.51 </ td > </ tr > </ tbody > </ table > \u00dcbungsaufgabe 2 (CSS) Erstellen Sie (falls noch nicht geschehen) eine index.html -Datei in Ihrem Repository-Ordner (also z.B. DocumentRoot/Webtech20 ) derart, dass diese direkte Links auf Ihre L\u00f6sungen der \u00dcbungen enthalten (z.B. in einer Tabelle oder einer Liste). Kopieren Sie den Ordner Uebung1 in den Ordner Uebung2 (also inkl. Ordner NN ). \u00c4ndern Sie darin die Datei uebung1.html zu uebung2.html (umbenennen). \u00c4ndern Sie entsprechend alle Links innerhalb der Datei, damit Sie z.B. auf den Ordner Uebung2/NN zugreifen und nicht mehr auf Uebung1/NN . Legen Sie sich im Uebung2 -Ordner einen Ordner styles an. Erstellen Sie in dem styles -Ordner eine Datei mystyles.css . F\u00fcgen Sie im <head> -Bereich der uebung2.html eine logische Verkn\u00fcpfung zur mystyles.css -Datei ein ( <link href=\"./styles/mystyles.css\" rel=\"stylesheet\"> ). In mystyles.css definieren Sie (versuchen Sie mind. 6 der genannten 8 Punkte umzusetzen): Verdana als Schriftart f\u00fcr das ganze Dokument der <header> soll das HTW-Grau als Hintergrundfarbe, HTW-Orange als Schriftfarbe und der Text zentriert sein (siehe HTW Corporate Design ). die Tabelle soll ungef\u00e4hr wie dargestellt aussehen: d.h. mit Rahmen, mit einem Schatten, die Spalten\u00fcberschriften in wei\u00df, mit HTW-gr\u00fcnem Hintergrund. Das <nav> -Feld hat einen Abstand nach oben und nach unten von jeweils 50px . <a> -Elemente in einem <nav> -Element haben einen grauen Rand, deren Ecken abgerundet sind. Die Hintergrundfarbe ist HTW-blau. Schriftart ist wei\u00df und bold. <a> -Elemente in einem <nav> -Element sind nicht unterstrichen! F\u00e4hrt man mit der Maus \u00fcber ein <a> -Element in einem <nav> -Element \u00e4ndert sich die Hintergrundfarbe in HTW-grau und die Schriftfarbe in HTW-orange. Die Tabelle hat eine Breite von 80% des <section> -Elements. Der <footer> ist in HTW-Orange, die Schrift ist schwarz, der Text ist mittig und die Schrift ist kleiner. Die H\u00f6he des footers entsteht dadurch, dass die Schrift einen Abstand nach oben und nach unten von jeweils 20px hat. Am Ende soll es ungef\u00e4hr so aussehen: \u00dcbungsaufgabe 3 (RWD + Bootstrap) Kopieren Sie uebung2.html aus \u00dcbung 2 in einen neuen Uebung3 -Ordner und benennen Sie die Datei in uebung3.html um (der NN -Ordner muss nicht mehr mitkopiert werden). Achten Sie aber darauf, dass das FIW-Logo noch angezeigt wird Binden Sie in Ihre uebung3.html Bootstrap ein (entweder per CDN oder als lokalen Zugriff \u2013 siehe Bootstrap ) Header : der <header> enth\u00e4lt das FIW-Logo und die \u00dcberschrift <h1>Teilnehmerinnen WebTech</h1> weisen Sie dem <header> die Bootstrap-Klasse jumbotron zu definieren Sie eine CSS-Eigenschaft so, dass eine h1 -\u00dcberschrift in einem header ein Inline-Element ist definieren Sie eine padding-left -Eigenschaft f\u00fcr eine solche \u00dcberschrift so, dass die \u00dcberschrift ungef\u00e4hr mittig ist (relative Gr\u00f6\u00dfenangabe) der header soll ungef\u00e4hr so aussehen (Navigation und Anfang des Hauptteils sind auch schon zu sehen): Navigation : interne Links (Links innerhalb der Seite) funktionieren wie folgt: Sie weisen einem Element eine id zu, z.B. der Tabellenzeile, die den ersten Nachnamen enth\u00e4lt, der mit \"H\" beginnt: < tr id = \"H\" > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > Jetzt k\u00f6nnen Sie in einem internen Link mithilfe des Doppelkreuzes ( # ) und des Bezeichners f\u00fcr die id ( H ) darauf verweisen, z.B. < a class = \"nav-link\" href = \"#H\" > H-L </ a > Vergeben Sie entsprechend IDs f\u00fcr die entsprechenden Tabellenzeilen (A, H, M, S) und passen Sie Ihre Hyperlinks im Navigationsmen\u00fc entsprechend an Weisen Sie Ihrem <nav> -Element einen lightgrey-Hintergrund zu Erstellen Sie f\u00fcr die einzelnen Links eine <ul> , deren <li> jeweils ein <a> -Element mit den Referenzen auf die oben beschriebenen IDs enthalten Informieren Sie sich unter Navs (oder wo Sie m\u00f6chten) \u00fcber \u201eNavs\u201c und erstellen Sie Ihr Navigationsmen\u00fc so, wie oben in der Abbildung (siehe Header ) gezeigt \u00c4ndern Sie aber die Farbe der Links so, dass sie im HTW-Orange ( #FF5F00 ) erscheinen und wenn man mit der Maus dar\u00fcber f\u00e4hrt im HTW-Blau ( #0082D1 ) (Definieren Sie sich gerne Custom Properties und wenden Sie diese an) Hauptteil : der Hauptteil (ein Container) soll aus drei Containern bestehen: einer, der nur das Wort (\u00dcberschrift) \"links\" enth\u00e4lt, einer, der die Tabelle enth\u00e4lt und ein dritter, der nur das Wort (\u00dcberschrift) \"rechts\" enth\u00e4lt Weisen Sie diesem Hauptteil die Klasse row zu und gestalten gestalten Sie die drei inneren Container (links, Tabelle, rechts) so, dass sie ab einer Viewportbreite >= 992px ( lg ) nebeneinander sind, wobei die Tabelle 4x so breit ist wie die jeweiligen Container an der Seite unterhalb der Viewportbreite von 992px sollen die drei Teile untereinander sein Abbildung f\u00fcr Breite unter 992px : Abbildung f\u00fcr Breite oberhalb 992px : Mithilfe eigener Media-Queries sollen Sie daf\u00fcr sorgen, dass die beiden Container links und rechts einen orangenen Hintergrund und eine H\u00f6he von 100px haben, wenn der Viewport kleiner als 992px ist und einen hellgrauen ( lightgrey ) Hintergrund und eine automatische H\u00f6he ( height: auto; ), wenn der Viewport gr\u00f6\u00dfer ist Tabelle: Erkundigen Sie sich unter Tables und gestalten Sie die Tabelle so, dass sie ungef\u00e4hr so aussieht: Sie m\u00fcssen mit einer eigenen CSS-Definition daf\u00fcr sorgen, dass die Zeile, in der Sie mit der Maus sind, nicht mehr dunkelgrau, sondern in HTW-Gr\u00fcn erscheint \u00dcbungsaufgabe 4 (JavaScript, DOM) Kopieren Sie den Uebung3 -Ordner in einen Uebung4 -Ordner und benennen Sie die uebung3.html in uebung4.html um F\u00fcgen Sie Ihrer Tabelle eine f\u00fcnfte Spalte hinzu mit leerer \u00dcberschrift, also einfach ein weiteres <th></th> . F\u00fcgen Sie im Table-Body <tbody> auch in allen Zeilen ein f\u00fcnftes <td></td> hinzu (nicht h\u00e4ndisch! - Find and Replace der IDE nutzen!) F\u00fcgen Sie Ihrer Tablle nun in HTML eine weitere Zeile hinzu, die wie folgt aussehen soll: Verwenden Sie f\u00fcr den Button das Attribut onclick und rufen Sie eine JavaScript-Funktion checkAndAdd() auf, die Sie selbst schreiben in der checkAndAdd() -Funktion soll folgendes geschehen: sie pr\u00fcfen, ob in jedem der vier <input> -Felder (Vorname, Nachname, E-Mail-Adresse, IP-Adresse) etwas eingegeben wurde wenn ja, dann werden diese Werte f\u00fcr eine neue Tabellenzeile (\u00fcber der Eingabezeile) verwendet (in der folgenden Abbildung wurde test1 , test2 , test3 , test4 eingegeben): wenn nicht, dann werden die Felder, in denen nichts eingegeben wurde, durch Bootstrap rot umrandet ( is-invalid - siehe Tipps): Tipps: am einfachsten ist es sicherlich, wenn Sie f\u00fcr den <tbody> , die vier neuen <input> -Elemente und auch die Tabellenzeile <tr> , in der die <input> -Elemente sind, eine id vergeben, damit Sie in Ihrer Funktion checkAndAdd() jeweils mit document.getElementById() direkt darauf zugreifen k\u00f6nnen (siehe lokalisieren ) benutzen Sie f\u00fcr Ihre <input> -Elemente die Bootstrap-Klasse form-control , also z.B. <input id=\"i1\" type=\"text\" class=\"form-control\" placeholder=\"Vorname\" /> (siehe Bootstrap Forms ) haben Sie ein input -Objekt lokalisiert, z.B. durch let i1 = document.getElementById('i1') , dann k\u00f6nnen Sie \u00fcber i1.value auf den eingegeben Wert zugreifen (siehe Beispiele in HTML-Ereignisse und create ) Angenommen, Sie haben den value von i1 in der Variablen value_i1 gespeichert, dann k\u00f6nnen Sie mithilfe von value_i1 === \"\" pr\u00fcfen, ob der eingegebene String leer ist, ob also nichts eingegeben wurde ( === steht f\u00fcr identisch, d.h. Inhalt und Typ sind gleich - == w\u00fcrde auch gehen, dann muss der Typ nicht unbedingt gleich sein, der Inhalt aber schon - siehe z.B. Vergleichsoperatoren ) einem solchen i1 -Objekt k\u00f6nnen Sie die CSS-Klasse is-invalid mit i1.classList.add('is-invalid') hinzuf\u00fcgen und mit i1.classList.remove('is-invalid') wieder entfernen (selbst, wenn dem Element die Klasse gar nicht zuegordnet ist, gibt es keinen Fehler - siehe z.B. hier ) f\u00fcr die neu entstehende Tabellenzeile m\u00fcssen Sie f\u00fcnf neue td -Obejkte kreieren und diese an ein neu kreiertes tr -Objekt anh\u00e4ngen. Die ersten vier td -Obejkte bekommen f\u00fcr ihr innerHTML den entsprechenden value des input -Objektes (siehe create ) f\u00fcgen Sie das neue tr -Objekt in den tbody vor der Tabellenzeile mit den input -Feldern ein (siehe create ) Zusatz: sehr beeindruckend w\u00e4re es, wenn Sie die neue Zeile nicht immer direkt vor die Eingabezeile einf\u00fcgen, sondern alphabetisch korrekt nach dem Wert des Nachnamens. Sollte das jemand von Ihnen schaffen, schicken Sie mir bitte einen Pull-Request . Das w\u00e4re sehr cool! \u00dcbungsaufgabe 5 (JSON, Ajax) Laden Sie sich hier die Datei Uebung5.zip herunter und entpacken Sie sie. Es entsteht der Ordner Uebung5 . Dieser enth\u00e4lt eine Datei uebung5.html (bereits ausf\u00fchrbar), eine Datei staedte.json , die ein JSON enth\u00e4lt, das ausgelesen werden soll einen Ordner images , der Bilder enth\u00e4lt; die Referenzen darauf stehen im JSON Die Datei staedte.json enth\u00e4lt in JSON beschriebene Objekte der Form { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" } Alle diese Objekte sind in einem Array. Die Aufgabe ist, die Datei uebung5.html so zu erweitern, dass eine Tabelle in der folgenden Form entsteht: \u00d6ffnen Sie die Datei uebung5.html in Ihrer IDE und starten Sie sie auch schonmal im Browser. Es sind bereits angelegt: ein input -Element und eine Tabelle mit \u00dcberschriften. Dies geschieht in der Funktion createTable() . Diese Funktion wird in der Ereignisbehandlung des load -Events aufgerufen (siehe <body> ). Sie sollen nun: eine Funktion schreiben, die die JSON-Datei mithilfe eines XMLHttpRequest -Objektes (oder mithilfe von fetch() ) vom Server l\u00e4dt \u2192 siehe XMLHttpRequest rufen Sie diese Funktion anstelle der createTable() als Ereignisbehandlung des load -Events auf speichern Sie in dieser Funktion das JSON in der globalen Variable staedte_obj (die Variable ist bereits deklariert, Sie k\u00f6nnen aber auch nochmal hier \u00fcber globale Variablen nachlesen) rufen Sie in dieser Funktion die createTable() -Funktion auf in der createTable() -Funktion sollten Sie sich zun\u00e4chst eine Variable staedte anlegen, die das Array referenziert ( staedte_obj referenziert das Objekt, welches das Array enth\u00e4lt) \u2192 siehe dazu z.B. hier und hier in der Funktion gibt es einen gro\u00dfen Blockkommentar. An dieser Stelle sollten Sie jedes einzelne Element (Objekt) des staedte -Arrays (numerisch indiziert) auslesen f\u00fcr jedes Element eine neue Tabellenzeile generieren jede einzelne Eigenschaft eines Elementes entsprechend verwenden, um das Jahr, die Stadt, einen Link (als Button) und ein Bild ( img ) als eigenes <td> -Element in der Zeile zu erstellen Filter : in das input -Feld kann eine Zahl oder der Name einer Stadt eingegeben werden. Nach jedem eingegeben Zeichen wird \u00fcberpr\u00fcft, ob es eine entsprechende Stadt (oder mehrere) gibt. Die Liste der passenden St\u00e4dte wird in der Tabelle angezeigt, z.B.: (alle St\u00e4dte, die mit Br anfangen): oder alle St\u00e4dte, deren Gr\u00fcndungsjahr mit 12 beginnt: Tipps: der im JSON gespeicherte Link f\u00fcr das Bild kann als Wert des src -Attributes eines <img> -Elementes verwendet werden; das Bild wird dann geladen definieren Sie f\u00fcr die Bilder ein style -Attribut f\u00fcr die H\u00f6he; w\u00e4hlen Sie height = '60px' f\u00fcr den Wert des alt -Attributes des Bildes w\u00e4hlen Sie erneut den Namen der Stadt der Link ist ein <a> -Element. Wenn Sie ihm die (Bootstrap-)CSS-Klassen btn , btn-sm und btn-success zuweisen, sieht er aus wie der \"Button\" auf dem Bild Filter : Eine Zahl ( number ) kann mithilfe der toString() -Methode in einen String umgewandelt werden (z.B. staedte[i].jahr.toString() ) Die L\u00e4nge eines Strings wird mithilfe von length ermittelt (z.B. input.length ) Ein Teilstring kann mithilfe der substring(start,end) -Methode erzeugt werden (z.B. staedte[i].stadt.substring(0,input.length) ) der Teilstring kann mit dem aktuellen Wert des input -Feldes verglichen werden Vergessen Sie nicht, als Ereignisbehandlung f\u00fcr das input -Element die createTable() -Methode aufzurufen! Welches Ereignis soll darin beahndelt werden? Viel Spa\u00df und viel Erfolg! \u00dcbungsaufgabe x - wird aber noch ge\u00e4ndert! Arbeiten Sie im Abschnitt Angular die Abschnitte Erstes Projekt erstellen und Angular-Projektstruktur durch. Sie m\u00fcssen dazu Angular installieren, eine Integrierte Entwicklungsumgebung und die passenden Developer Tools .","title":"\u00dcbungen"},{"location":"#semesteraufgabe","text":"Am Ende des Kurses geben Sie eine Webanwendung ab. Diese wird bewertet und bildet die Modulnote f\u00fcr \"WebTech\" (es gibt also keine Klausur o.\u00e4.). \u00dcberlegen Sie sich fr\u00fch, was Sie implementieren wollen. Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Es k\u00f6nnen 2 Studentinnen gemeinsam ein Projekt durchf\u00fchren und abgeben. Sie erhalten dann (h\u00f6chstwahrscheinlich) die gleiche Note. Es muss an den Commits erkennbar sein, welchen Anteil am Ergebnis jede der beiden Studentinnen hatte. Mindestanforderungen Folgende Anforderungen werden an Ihr Projekt gestellt: das Frontend soll mit Angular entwickelt werden, das Backend mit Node.js, als Datenbank soll MySQL verwendet werden, es soll CRUD implementiert sein, d.h. Sie ben\u00f6tigen eine Komponente zur Erstellung und Speicherung eines Datenbankeintrages ( C reate), eine Komponente zur \u00c4nderung eines Datenbankeintrages ( U pdate), eine Komponente zur Anzeige aller Datenbankeintr\u00e4ge ( R ead), eine Komponente zum L\u00f6schen eines Datenbankeintrages ( D elete). Datenbankeintr\u00e4ge k\u00f6nnen B\u00fccher, CDs, ToDos, Einkaufslisten, Vorlesungen, K\u00fchlschrankinhalte usw. sein - wie gesagt, Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Die Anwendung soll in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Das README (oder eine andere Form der Projektbeschreibung) soll aussagekr\u00e4ftig sein. Verwenden Sie ein CSS-Framework, wie z.B. Materialize, Bootstrap o.\u00e4.! Ihre Anwendung soll \"modern\" aussehen. Nach Abgabe vereinbaren wir ein Online-Meeting, in dem Sie mir Ihre Anwendung nochmal zeigen k\u00f6nnen und ich Ihnen Fragen zu Ihrem Code stellen werde. Ist keine Pr\u00fcfung, sondern eher ein fachliches Gespr\u00e4ch.","title":"Semesteraufgabe"},{"location":"angular/","text":"Angular \u00b6 Angular geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Das erste Release von Angular erschien 2010 (damals noch unter dem Namen AngularJS, ab Version 2 nur noch Angular). React und Vue kamen 2013 bzw. 2014 erstmalig heraus. Angular wird haupts\u00e4chlich von Google, React haupts\u00e4chlich von Facebook und Vue als Community-Version entwickelt. Alle drei Frameworks stehen unter MIT-Lizent . Neben HTML und CSS verwendet Angular TypeScript . TypeScript ist eine Obermenge von JavaScript. Das bedeutet, dass jeder JavaScript-Code auch TypeScript ist, aber nicht umgekehrt. TypeScript-Code wird compiliert und erzeugt JavaScript-Code, der vom Browser ausgef\u00fchrt werden kann. Im Gegensatz zu JavaScript ist TypeScript typsicher und klar objektorientiert. Erstes Projekt erstellen \u00b6 Eine Angularanwendung besteht haupts\u00e4chlich aus Komponenten und Services. Um die Anwendung selbst sowie Komponenten und Services zu erstellen, wird am besten das Command Line Interface for Angular (Angular CLI) verwendet. \u00d6ffnen Sie ein Terminal (Windows-Nutzerinnen sollten die Git-Bash verwenden, die Sie bereits mit Git installiert haben). Wechseln Sie im Terminal in das Verzeichnis, das Ihre Projekte enthalten soll. F\u00fcr das Wechseln in andere Verzeichnisse nutzen Sie den cd Befehl (change directory). Um die Anwendung \"first\" zu erzeugen, geben Sie folgenden Befehl in das Terminal ein: ng new first ng steht f\u00fcr Angular. Mit dem Attribut new geben Sie an, dass Sie ein neues Projekt erzeugen wollen. first ist der Name des Projektes. Wenn Sie gefragt werden, ob Sie Angular routing verwenden m\u00f6chten, geben Sie ein y ein. Wenn Sie nach dem stylesheet format gefragt werden, k\u00f6nnen Sie CSS einfach mit Enter best\u00e4tigen. Wenn alles geklappt hat, erhalten Sie im Terminal eine Ausgabe in der Form: Es entsteht ein Ordner first in Ihrem Projekte-Verzeichnis. Wechseln Sie in dieses Verzeichnis: cd first F\u00fchren Sie darin den Befehl: npm install aus. Damit werden alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** :Compiled successfully. \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: Success Fertig! Sie haben Ihr erstes Angular-Projekt erstellt. Angular-Projektstruktur \u00b6 \u00d6ffnen Sie die IDE Ihrer Wahl (Screenshots hier mit [PhpStorm] ( https://www.jetbrains.com/de-de/phpstorm/ ). W\u00e4hlen Sie unter Open Project den Projektordner first . Klappen Sie das Projekt first auf, klappen Sie den Ordner src und dann den Ordner app auf. Der Projektexplorer zeigt folgendes Bild: Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt: \u00d6ffnen Sie die app.component.css -Datei und geben Sie dort h1 { color : red ; } Nach den \u00c4nderungen in app.component.css erscheint der Text der \u00dcberschrift in rot: Zusammenfassung Wir haben die die app.component.html ge\u00e4ndert, um den Inhalt der dargestellten Seite anzupassen und die app.component.css , um \u00c4nderungen an der Darstellung (dem Stil) des Inhalts durchzuf\u00fchren. Komponenten \u00b6 Eine Angular-Anwendung besteht haupts\u00e4chlich aus Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'book-app' ; } Der Selektor gibt an, dass \u00fcberall dort, wo app-root als Elementselektor <app-root> </app-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <app-root> </app-root> eingesetzt: < app-root > < h1 > This is app </ h1 > </ app-root > Wir schauen uns ein ausf\u00fchrlicheres Beispiel im Folgenden an, in dem wir eine neue Komponente erzeugen. Eine neue Komponente erzeugen \u00b6 Mithilfe von Angular-CLI erzeugen wir in unserer App first eine neue Komponente. Wir wechseln dazu im Terminal in den Ordner von first und geben dann ng generate component mycomponent ein. Sp\u00e4ter k\u00fcrzen wir solche Eingaben ab. Anstelle von generate brauchen wir auch nur g zu schreiben. Und anstelle von component gen\u00fcgt c . Das hei\u00dft, wir h\u00e4tten stattdessen auch ng g c mycomponent schreiben k\u00f6nnen. In unserer first App gibt es nun die Komponente mycomponent : Jede Angular-Komponente besteht aus vier Teilen: der TypeScript-Klasse (die *.component.ts -Datei) dem Template (die *.component.html -Datei) den Styles (die *.component.css -Datei) einer Testspezifikation (die *.component.spec.ts -Datei) Jede Komponente wird in der app.module.ts der gesamten Anwendung bekannt gemacht. Das erfolgt mithilfe der Eigenschaft declarations im Decorator @NgModule() : import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { MycomponentComponent } from './mycomponent/mycomponent.component' ; @ NgModule ({ declarations : [ AppComponent , MycomponentComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das obige Listing zeigt, dass die neue Komponente Mycomponent registriert wurde. Um dieses Eintragen in die app.module.ts m\u00fcssen wir uns aber nicht k\u00fcmmern, das erledigt die Angular-CLI mit der Anweisung zur Erstellung einer neuen Komponente ng generate component newComponent . Doppelklicken Sie im Projektexplorer Ihrer IDE auf die Datei mycomponent.component.ts , um sie zu \u00f6ffnen. Sie enth\u00e4lt den folgenden Quelltext: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-mycomponent' , templateUrl : './mycomponent.component.html' , styleUrls : [ './mycomponent.component.css' ] }) export class MycomponentComponent implements OnInit { constructor () { } ngOnInit () : void { } } Wir \u00e4ndern diese Datei zun\u00e4chst nicht und \u00f6ffnen auch noch die mycomponent.component.html . Diese enth\u00e4lt nur ein HTML-Element, einen Absatz: < p > mycomponent works! </ p > Wir \u00e4ndern auch diese Datei zun\u00e4chst nicht und \u00f6ffnen die app.component.html - die HTML-Datei unserer Root-Komponente. Diese sieht derzeit so aus: < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wir f\u00fcgen in die Datei den Selektor app-mycomponent unserer neuen Mycomponent -Komponente als HTML-Element ein: < h1 > This is app </ h1 > < app-mycomponent ></ app-mycomponent > <!-- eingefuegt --> < router-outlet ></ router-outlet > Dieses Element dient als \"Platzhalter\" f\u00fcr das Template unserer neuen Komponente. Das bedeutet, dass in dieses Element der HTML-Code aus mycomponent.component.html eingef\u00fcgt wird. Wechseln Sie in den Browser auf den Tab mit Ihrer Anwendung ( http://localhost:4200/ ). Sie sehen folgendes Bild: Unterhalb der \u00dcberschrift ( <h1>This is app</h1> ) wurde also der Absatz <p>mycomponent works!</p> eingef\u00fcgt. Wenn Sie sich den Quelltext Ihrer Seite anschauen, z.B. \u00fcber die Entwicklertools Ihres Browsers ( z.B. f\u00fcr Chrome ), dann wird folgender Code sichtbar: Wir k\u00f6nnen hier die Attribute der HTML-Elemente vernachl\u00e4ssigen (also z.B. _nghost-menu-c19 oder ng-version=\"9.0.7\" ). Aber es wird folgende HTML-Struktur sichtbar: < app-root > < h1 > This is app </ h1 > < app-mycomponent > < p > mycomponent works! </ p > </ app-mycomponent > < router-outlet ></ router-outlet > </ app-root > Das Element <app-root> fungiert als Platzhalter f\u00fcr die gesamte App. In dieses Element wird der gesamte Inhalt der Anwendung eingebunden (siehe app.component.html ). Dies ist hier zun\u00e4chst eine \u00dcberschrift <h1> , die von dem Element f\u00fcr die Mycomponent -Komponente gefolgt wird. Das bedeutet, dass in das Element <app-mycomponent> der Inhalt der Komponente Mycomponent eingebunden wird. Das ist hier nur ein Absatz <p> (siehe dazu mycomponent.component.html ). Das Element router-outlet> soll uns an dieser Stelle noch nicht interessieren. Das wird erst interessant, wenn wir \u00fcber das Routing in einer Angular-Anwendung sprechen. Direktiven \u00b6 In Angular gibt es 3 Arten sogenannter Direktiven (engl. Directives ): Komponentendirektiven (Components\u2014directives) Attributdirektiven (Attribute Directives) Strukturdirektiven (Structural-Direktives) Komponentendirektiven sind die meistverwendete Art und bereits in Angular \u2192 Kompnenten betrachtet. Attribut- und Strukturdirektiven k\u00f6nnen als HTML-Attribute verstanden werden, die dem HTML-Element ein zus\u00e4tzliches Verhalten hinzuf\u00fcgt. Attributdirektiven wirken sich das innere Verhalten eines HTML-Elementes aus (z.B. k\u00f6nnen damit CSS-Eigenschaften ge\u00e4ndert, hinzugef\u00fcgt oder gel\u00f6scht werden). Mit Strukturdirektiven kann die Struktur des DOMs ge\u00e4ndert werden (z.B. k\u00f6nnen ganze HTML-Elemente dem DOM-Baum hinzugef\u00fcgt werden). *Strukturdirektiven \u00b6 Strukturdirektiven beginnen immer mit einem Stern * . Die bekanntesten Vertreter sind *ngFor *ngIf *ngSwitch Diese sind auch in angular.io erl\u00e4utert. Wir erl\u00e4utern die darin aufgef\u00fchrten Beispiele und beginnen mit *ngIf : 1 2 3 4 5 6 7 8 < p * ngIf = \"true\" > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > < p * ngIf = \"false\" > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > Die Direktive *ngIf wird also wie ein Attribut des <p> -Elementes behandelt. Das Attribut *ngIf hat entweder den Wert \"true\" oder den Wert \"false\" . Ja nach Wert des Attributes wird das jeweilige <p> -Element in den DOM-Baum eingebunden. Also entweder das <p> -Element aus den Codezeilen 1 - 4 (bei Wert \"true\" ) oder das <p> -Element aus den Codezeilen 5 - 8 (bei Wert \"false\" ). In einer echten Anwendung ergibt sich der Wert des Attributes/der Direktive meistens aus dem Wert einer boole'schen Variablen oder einem anderen boole'schen Ausdruck. Das nicht dargestellte Element ist auch nicht Teil des DOMs! Es ist also nicht einfach nur auf hide gesetzt, sondern es ist gar nicht im DOM vorhanden. Intern wird aus der *ngIf -Direktive \u00fcbrigens ein sogenanntes Property-Binding : < ng-template [ ngIf ]=\" true \" > < p > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > </ ng-template > < ng-template [ ngIf ]=\" false \" > < p > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > </ ng-template > Die *ngFor -Direktive ist etwas komplexer als *ngIf . F\u00fcr *ngFor ben\u00f6tigen wir mindestens eine Liste (oder ein Array) und eine Laufvariable, die die Werte aus der Liste annehmen kann. Im folgenden Beispiel ist i unsere laufvariable und [1, 2, 3, 4, 5, 6] unser Array. < div * ngFor = \"let i of [1, 2, 3, 4, 5, 6]\" > {{ i }} </ div > F\u00fcr jeden Wert aus der Liste wird ein eigenes <div> - Element erzeugt. Der DOM-Baum sieht f\u00fcr obiges Beispiel also wie folgt aus (Angular-Attribute weggelassen): < div > 1 </ div > < div > 2 </ div > < div > 3 </ div > < div > 4 </ div > < div > 5 </ div > < div > 6 </ div > Au\u00dferdem stellt *ngFor noch einige Hilfsvariablen zur Verf\u00fcgung, die ebenfalls genutzt werden k\u00f6nnen: index (Index des aktuellen Elementes 0, 1, 2, ... ) first (ist true , wenn erstes Element, sonst false ) last (ist true , wenn letztes Element, sonst false ) even (ist true , wenn Index gerade , sonst false ) odd (ist true , wenn Index ungerade , sonst false ) Folgend ein komplexeres Beispiel unter Verwendung einiger Hilfsvariablen: 1 2 3 4 5 6 7 8 9 < div * ngFor = \"let value of [1, 2, 3, 4, 5, 6]; index as i; first as f; last as l; odd as o;\" > < div * ngIf = \"f\" > Start </ div > < div [ style . color ]=\" o ? ' red ' : ' blue '\" > {{ i }} : {{ value }} </ div > < div * ngIf = \"l\" > Ende </ div > </ div > In Zeile 1 ist unsere Laufvariable durch das Array nun value . Au\u00dferdem wird der jeweilige Wert von index in der Variablen i (Zeilennummer 2 ) gespeichert, der Wert von first in der Variablen f (Zeilennummer 3 ), der Wert von last in der Variablen l (Zeilennummer 4 ) und der Wert von odd in der Variablen o (Zeilennummer 5 ) - die Hilfsvariable even betrachten wir hier nicht, da deren Wert genau der Negation von odd entspricht. In Zeile 6 wenden wir die *ngIf -Direktive an: ein <div> mit dem Inhalt Start wird vor dem ersten Element aus dem Array ausgegeben. F\u00fcr jedes weitere Element nicht mehr. In Zeile 7 erfolgt ein Property Binding : die color -Eigenschaft bekommt einen Wert zugewiesen. Der Wert ist jedoch abh\u00e4ngig davon, ob o wahr ist (dann Wert red ) oder falsch (dann Wert blue ). Zeile 7 zeigt au\u00dferdem wie mithilfe von Interpolation der Wert von i und der Wert von value , getrennt mit : ausgegeben werden. Die Ausgabe ist also: Aufgabe Informieren Sie sich auch \u00fcber die *ngSwitch -Direktive. Implementieren Sie ein Beispiel, in dem Sie die 3 Direktiven *ngIf , *ngFor und *ngSwitch anwenden. {{ Interpolation }} \u00b6 Interpolation ist die einfachste Form des data binding . Syntaktisch erkennt man Interpolation an den doppelten geschweiften Klammern {{ Interpolation }} . Beispiel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-lesson' , template : ` <h1>{{ headline }}</h1> <p>Hier steht {{name}}</p> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { headline = 'Mein Titel' ; name = 'mein Name' ; } Im obigen Beispiel hat die Komponente LessonComponent zwei Eigenschaften: headline und name . In obiger Komponente wird (zur Anschauung) sogenanntes inline templating verwendet, d.h. es gibt keine eigene lesson.component.html -Datei, in der der HTML-Code steht, sondern der HTML-Code wird direkt in die template -Eigenschaft der Typescript-Datei lesson.component.ts eingef\u00fcgt (siehe Zeilen 5-8 im obigen Beispiel). Der HTML-Code wird in backticks eingefasst ( `` ), nicht zu verwechseln mit den einfachen Anf\u00fchrungsstrichen ( '' ). Damit inline templating m\u00f6glich ist, wird die Komponente mit dem Flag -t erzeugt ( inlineTemplate=true ), d.h. unsere Lesson-Komponente wurde mithilfe der CLI wie folgt erzeugt: ng g c lesson -t Eine Interpolation kann auch Ausdr\u00fccke enthalten, die aufgel\u00f6st werden, z.B. < p > 1 + 2 = {{1 + 2}}. </ p > Man kann mithilfe einer Direktive durch ein Array laufen und jedes einzelne Element mithilfe von Interpolation ausgeben: @ Component ({ selector : 'app-lesson' , template : ` <ol> <li *ngFor=\"let day of weekdays\">{{ day }}</li> </ol> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { weekdays = [ 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ]; } Oder es ist m\u00f6glich, Attributen von HTML-Elementen mithilfe von Interpolation Werte zuzuordnen: @ Component ({ selector : 'app-lesson' , template : ` <img src=\"{{ imgUrl }}\" /> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg' ; } [Property Bindings] \u00b6 Insbesondere, wenn Attributen von HTML-Elementen Werte zugeordnet werden sollen (so wie im letzten Beispiel des Abschnitts {{Interpolation}} ), spricht man von property binding . Property binding spielt eine gro\u00dfe Rolle beim Datenfluss von Eltern-Komponenten auf Kind-Komponenten. Die generelle Idee dabei ist, dass mithilfe von property binding Werte (Daten) an Attribute von HTML-Elementen bindet. Diese HTML-Elemente k\u00f6nnen auch Komponenten sein. Wir betrachten zun\u00e4chst die unterschiedlichen Arten (Notationen) von property binding: < element [ property ]=\" ausdruck \" ></ element > D.h. ein ausdruck wird \u00fcbergeben, der zu einem Wert aufgel\u00f6st wird und dieser Wert wird dem Attribut property \u00fcbergeben. Betrachten wir nochmals das letzte Beispiel aus dem Abschnitt {{Interpolation}} ). Bei diesem Beispiel haben wir Interpolation verwendet, um dem Attribut src des HTML-Elementes img einen Wert zuzuweisen. Das exakt gleiche Verhalten l\u00e4sst sich auch mittels property bindings erzeugen: < img [ src ]=\" imgUrl \" /> <!-- imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg'; --> Neben diesen \"allgemeinen\" property bindings gibt es auch noch \"spezielle\" property bindings, n\u00e4mlich class bindings und style bindings . Bei class bindings wird das Pr\u00e4fix class vor die property (die entsprechende CSS-Klasse) gesetzt: < element [ class . class1 ]=\" class1enabled \" [ class . class2 ]=\" class2enabled \" ... ></ element > D.h. die CSS-Klasse class1 ist genau dann wirksam, wenn der Ausdruck class1enabled true ist und class2 ist genau dann wirksam, wenn der Ausdruck class2enabled true ist usw. Bei den style bindings werden jedoch gar keine Ausdr\u00fccke, sondern Werte \u00fcbergeben: < element [ style . color ] (Event Bindings) \u00b6 In den property bindings haben wir gesehen, wie Werte Attributen (Eigenschaften) von Elementen zugeordnet werden k\u00f6nnen. Aus JavaScript ist auch bekannt, dass Ereignisse Attribute von Elementen sein k\u00f6nnen, z.B. onClick , onKeyup , onChange usw. Dabei handelt es sich um sogenannte native DOM-Ereignisse . Neben der M\u00f6glichkeit, solche nativen DOM-Ereigniss zu behandeln, bietet Angular auch die M\u00f6glichkeit, eigene Ereignisse zu definieren und diese zu behandeln. Wir betrachten beide M\u00f6glichkeiten und beginnen mit den nativen Ereignissen. Native DOM-Ereignisse \u00b6 In HTML sieht das unter Aufruf einer JavaScript-Funktion f\u00fcr die Ereignisbahandlung dann typischerweise (hier das Click-Ereignis f\u00fcr einen Button) wie folgt aus: HTML < button onClick = \"doSomething()\" > Click here! </ button > JavaScript function doSomething () { // something to do } In Angular ist das Prinzip das gleiche, nur dass das Ereignis in runden Klammern genannt und an dieses Ereignis die Ereignisbehandlung gebunden wird ( event binding ). Das bedeutet, das Angular-Template f\u00fcr das obige Beispiel sieht wie folgt aus: Angular-Template < button ( click )=\" doSomething ()\" > Click here! </ button > Angular-Typescript export class EventsComponent { doSomething () { // something to do } } Dieses Prinzip gilt f\u00fcr alle nativen DOM-Ereignisse. Hier ein kurzer \u00dcberblick \u00fcber die wichtigsten (f\u00fcr eine umfangreichere Liste siehe hier oder hier ): Ereignis Beschreibung click Mausklick auf das Element change Der Inhalt/Wert eines Elementes hat sich ge\u00e4ndert mouseover die Maus wird \u00fcber das Element bewegt mouseout die Maus wird vom Element wegbewegt keydown eine Taste der Tastatur wird gedr\u00fcckt keyup Loslassen einer Taste load der Browser hat die Seite vollst\u00e4ndig geladen focus Fokussieren des Elements (z.B. Anklicken) blur Verlieren des Fokus (z.B. Klick au\u00dferhalb) submit Abschicken eines Formulars copy , paste Kopieren, Einf\u00fcgen von Text Einen kleinen Unterschied gibt es noch bei der \u00dcbergabe des Ereignisses an die das Ereignis behandelnde Funktion zu beachten. W\u00e4hrend in plain JavaScript das Ereignis mit event der Funktion \u00fcbergeben wird, erfolgt die \u00dcbergabe des Ereignisses in Angular mit $event . Beispiel: Angular-Template < input ( change )=\" showPayload ($ event )\" type = \"text\" /> Angular-Typescript export class EventsComponent { showPayload ( e : Event ) { console . log ( e ); } } Alle Events (in TypeScript/Angular) sind vom Typ Event . Es gibt noch speziellere Eventtypen, die aber alle auf dem Interface Event basieren, z.B. MouseEvent , InputEvent , KeyboardEvent , UIEvent , ClipboardEvent . Weitere Details siehe hier . Die einfache JavaScript-Attributschreibweise kann in Angular nicht verwendet werden, sondern immer nur die event binding -Schreibweise von Angular (mit den runden Klammern)! Eigene Ereignisse \u00b6 F\u00fcr eine Komponente kann ein eigenes - nicht natives - Ereignis definiert werden. Dies geschieht, indem f\u00fcr eine Komponente eine neue Eigenschaft (z.B. myEvent ) definiert wird und diese vom Typ EventEmitter deklariert wird. Mithilfe von Generics kann der Typ des Events angegeben werden, der ausgel\u00f6st werden soll - wenn Sie den Typ nicht genau kennen, verwenden Sie any . Soll das Ereignis an die Elternkomponente weitergeleitet werden, was meistens der Fall ist, wird der Decorator @Output() verwendet. Das Ausl\u00f6sen des Events geschieht dann durch die emit() -Methode von EventEmitter . Hier ein typisches Beispiel (zun\u00e4chst die Kindkomponente EventsComponent - also events.component.html und events.component.ts ): .html < button ( click )=\" emitMyEvent ()\" > Click here! </ button > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < any > (); emitMyEvent () { this . myEvent . emit (); } } Die .html -Datei definiert einen Button mit dem nativen Ereignis click . Dieses wird durch die Methode emitMyEvent() behandelt. In der .ts -Datei ist diese Methode definiert (Zeilen 11-13). Darin wird das eigene Event myEvent ausgel\u00f6st. Dieses Event ist ein Objekt vom Typ EventEmitter , typisiert als any (beliebiger Typ). Das Ausl\u00f6sen dieses Events wird an die aufrufende Komponente (die Elternkomponente) ausgegeben (Decorator @Output() ). Deklaration der Eigenschaft und Dekorieren mit @Output() in Zeile 9. Das Ausl\u00f6sen des eigenen Events erfolgt durch den Aufruf der Methode emit() aus EventEmitter (Zeile 12). In der Elternkomponente kann dieses Ereignis nun empfangen werden (Beispiel einer Elternkomponente AppComponent - also app.component.html und app.component.ts ): .html < app-events ( myEvent )=\" handleEventFromEventsComponent ()\" ></ app-events > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent () { console . log ( 'myEvent in der Kindkomponente ausgel\u00f6st' ); } } In der AppComponent (das kann nat\u00fcrlich eine beliebige Komponente sein), wird die EventsComponent eingebunden (siehe <app-events> im Template der AppComponent ). Dadurch entsteht die Hierarchie Elternkomponente AppComponent \u2192 Kindkomponente EventsComponent im DOM. Mithilfe von event binding wird die Behandlung des Ereignisses myEvent an die Methode handleEventFromEventsComponent() gebunden. In dieser Methode erfolgt hier einfach nur eine Ausgabe auf die Konsole. Interessant ist, dass wir dadurch die M\u00f6glichkeit haben, Daten von der Kindkomponente zur Elternkomponente flie\u00dfen zu lassen. Dazu \u00fcbergeben wir diese Daten als payload des Ereignisses. Daf\u00fcr typisieren wir EventEmitter mit dem Typ, von dem wir Daten \u00fcbergeben wollen (z.B. Book - siehe B\u00fccher-App ). Die beiden obigen Beispiele sehen dann wie folgt aus (zuerst wieder EventsComponent ): .html < button ( click )=\" emitMyEvent ( book )\" > Click here! </ button > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < Book > (); emitMyEvent ( book : Book ) { this . myEvent . emit ( book ); } } Im Template (HTML) werden die Daten der Ereignisbehandlung \u00fcbergeben. Das EventEmitter -Objekt ist mit dem konkreten Datentyp typisiert. Bei Aufruf der Methode emit() werden die Daten an die Elternkomponente \u00fcbergeben. Die Elternkomponente (hier wieder AppComponent kann diese Daten, die von der Kindkomponente an die Elternkomponente via Ereignis geflossen sind, nun weiterverarbeiten bzw. darstellen): .html < app-events ( myEvent )=\" handleEventFromEventsComponent ($ event )\" ></ app-events > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent ( book : Book ) { console . log ( book . title ); } } Wichtig beim event binding der Elternkomponente ist, dass der payload des Ereignisses mit $event \u00fcbergeben wird (siehe auch Native DOM-Ereignisse ). Zusammenfassung In den letzten drei Abschnitten Interpolation, Property Binding und Event Binding haben wir uns mit Datenfluss besch\u00e4ftigt. Interpolation wird verwendet, um innerhalb einer Komponente die in der TypeScript-Klasse definierten Daten im Template darzustellen. Mithilfe von Property Binding kann die aufrufende Komponente (Elternkomponente) der aufgerufenen Kopmponente (Kindkomponente) Daten \u00fcbergeben. Mithilfe von Event Binding kann die Kindkomponente der Elternkomponente mithilfe eines eigenen Ereignisses Daten \u00fcbergeben. F\u00fcr die Anwendung dieser Konzepte schauen Sie sich B\u00fccher-App\u2192Datenfluss zwischen Komponenten an. [(Two-Way-Bindings)] \u00b6 Lifecycle-Hooks \u00b6 Komponenten durchlaufen einen festen Lebenszyklus ( lifecycle ). Die verschiedenen Status rufen dabei jeweils eine Methode auf, die wir jeweils implementieren k\u00f6nnen, um in den jeweiligen Status des Lebenszyklus eingreifen zu k\u00f6nnen. Man spricht dabei von sogenannten Lifecycle-Hooks . Der wohl bekannteste Lifecycle-Hook ist ngOnInit() . Damit greift man in die Initialisierung der Komponente ein. Typischerweise werden z.B. Eingabewerte initialisiert, die im Template dargestellt werden. Noch vor ngOnInit wird jedoch ngOnChange() aufgerufen. N\u00e4mlich genau dann, wenn die Eingabewerte gesetzt bzw. ge\u00e4ndert werden. F\u00fcr weiterf\u00fchrende Informationen sei https://angular.io/guide/lifecycle-hooks empfohlen. Services \u00b6 Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, eine Komponente Methoden zur Datenbindung ( data binding ) zur Verf\u00fcgung stellt, um zwischen View und Anwendungslogik zu vermitteln. Ein Service erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, ohne sich um die Darstellung der Daten zu k\u00fcmmern. Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen). Ein Service ist eine Klasse mit dem Decorator @Injectable() . Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service my kann mittels CLI so erzeugt werden: ng generate service shared/my Es entsteht im src/app/shared -Ordner eine Datei my.service.ts . Services sollten am besten in dem shared -Ordner erstellt werden, da ein Service von allen Komponenten genutzt werden kann (eine andere M\u00f6glichkeit w\u00e4re, einen eigenen Ordner services zu erstellen). In dem Decorator @Injectable() wird mittels providedIn: root angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services MyService : my.service.ts 1 2 3 4 5 6 7 8 9 10 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class MyService { constructor ( private myDependency : MyDependency ) { } } Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel: example.component.ts import { Component , OnInit } from '@angular/core' ; import { MyService } from './shared/my.service' ; @ Component ({ selector : 'app-example' , templateUrl : './example.component.html' , styleUrls : [ './example.component.css' ] }) export class ExampleComponent implements OnInit { constructor ( private myService : MyService ) { } ngOnInit () : void { this . example . methodOfMyService (); } } F\u00fcr ein Beispiel einer Service-Definition und der Verwendung eines Services siehe BookStoreService . F\u00fcr weiterf\u00fchrende Informationen siehe https://angular.io/guide/architecture-services . Routing \u00b6 Routing ist ein wesentliches Konzept f\u00fcr die Entwicklung von Single-Page-Applikationen (SPA). Bei Single-Page-Applikationen wird genau eine Seite vom Webserver geladen (typischerweise die index.html und alle weiteren, sich \u00e4ndernden, Inhalte und Sichten werden in diese Seite nachgeladen). Das f\u00fchrt zun\u00e4chst auch dazu, dass es f\u00fcr die Seite genau eine URL gibt, um auf sie zuzugreifen (z.B. http://www.mydomain.de bzw. http://www.mydomain.de/index.html ). M\u00f6chte man aber Komponenten direkt in der URL ansprechen, z.B. http://www.mydomain.de/login f\u00fcr die Login-Komponente, so ben\u00f6tigen wir das Routing von Angular. Wir betrachten hier ein Beispiel, das https://angular.io/guide/router entnommen ist und nur leicht abgewandelt wurde. Wir erstellen dazu zun\u00e4chst ein neues Projekt routing-lesson . ng new routing-lesson In der obigen Anweisung h\u00e4tte man auch bereits den Parameter --routing verwenden k\u00f6nnen, also: ng new routing-lesson --routing Macht man das nicht, werden Sie gefragt, ob Sie Routing verwenden wollen: ? Would you like to add Angular routing? [y|N] Antworten Sie mit y . Zur Demonstration des Routings werden wir zun\u00e4chst 2 weitere Komponenten erstellen: first und second . cd routing-lesson ng g c first ng g c second Wird ein Angular-Projekt mit Routing erstellt, so existiert die Datei app-routing.module.ts im src/app/ -Ordner. Diese Datei sieht urspr\u00fcnglich so aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; const routes : Routes = []; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Bei dieser Klasse handelt es sich um ein eigenes Angular-Modul (als @NgModule dekoriert). Es wird deshalb auch in die app.module.ts integriert (dies geschieht automatisch, wenn wir Routing ausgew\u00e4hlt haben) - siehe Zeilen 4 und 17 im folgenden Listing: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; @ NgModule ({ declarations : [ AppComponent , FirstComponent , SecondComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das Array routes aus der Datei app-routing.module.ts enth\u00e4lt sp\u00e4ter die Pfadangaben zu den Komponenten - sogenannte Routen . Routen sind Objekte und wie folgt notiert: { path : 'mypath' , component : MyComponent } Diese Angabe bewirkt, dass unter der URL http://www.mydomain.de/mypath die Komponente MyComponent aufgerufen wird. Angenommen, wir wollen, dass unsere Komponente FirstComponent unter dem Pfad /first aufgerufen wird und SecondComponent unter dem Pfad /second , dann sieht unsere Datei app-routing.module.ts wie folgt aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 8 und 9 sind die beiden Routen definiert. Beachten Sie, dass die Pfadangaben ohne vorangestelltes Slash / erfolgen! Unter Verwendung der Selektoren <app-first> bzw. <app-second> k\u00f6nnten wir unsere Komponenten nun (statisch) in unsere Anwendung einbinden. Wollen wir das jedoch dem Routing \u00fcberlassen, die Komponenten also dynamisch - abh\u00e4ngig von dem jeweils gew\u00e4hlten Pfad - einbinden lassen, verwenden wir stattdessen den Selektor <router-outlet> . Auch dieser ist bei gew\u00e4hltem Routing bereits Teil des AppComponent -Templates: app.component.html <!-- hier wurde viel vom urspr\u00fcnglichen --> <!-- Template gel\u00f6scht --> < h1 > Hier ist AppComponent </ h1 > < router-outlet ></ router-outlet > Obiges Listing zeigt, dass das Template von AppComponent zun\u00e4chst eine <h1> -\u00dcberschrift vorsieht und dann folgt das <router-outlet> , welches als Platzhalter f\u00fcr die durch das Routing ausgew\u00e4hlten Komponenten agiert. Angenommen, wir definieren die Templates f+r FirstComponent und SecondComponent wie folgt: first.component.html < h3 > Hier ist FirstComponent </ h3 > second.component.html < h3 > Hier ist SecondComponent </ h3 > Starten wir nun unsere Anwendung, dann sehen wir zun\u00e4chst (URL: http://localhost:4200/ ) nur die View der AppComponent , n\u00e4mlich die <h1> -\u00dcberschrift. Der Platzhalter <router-outlet> bleibt leer, da keine der angegebenen Pfade aus der app-routing.module.ts angegeben wurde. Geben wir jedoch als URL http://localhost:4200/first ein, so wird das Template der FirstComponent in diesen Platzhalter geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist FirstComponent . Geben wir als URL stattdessen http://localhost:4200/second ein, so wird das Template der SecondComponent in den Platzhalter <router-outlet> geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist SecondComponent . Die folgende Abbildung zeigt die Views der drei F\u00e4lle: Wir haben nun Pfade erzeugt, mit denen man Komponenten direkt ansprechen kann. Im folgenden Abschnitt wird gezeigt, wie man diese Pfade in Hyperlinks nutzt. Routen verlinken \u00b6 Wir kennen nun die m\u00f6glichen Pfade unserer Anwendung http://localhost:4200/ , http://localhost:4200/first und http://localhost:4200/second und w\u00fcrden diese Adressen z.B. gerne in Hyperlinks verwenden, um direkt zu den Views der jeweiligen Komponente zu springen, z.B. so: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a href = \"/\" > home </ a > </ li > < li > < a href = \"/first\" > first </ a > </ li > < li > < a href = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das funktioniert auch, hat aber einen von uns nicht gewollten Effekt: Die Seite wird durch jeden Klick auf einen Hyperlink neu geladen. Das ist ja auch das gew\u00fcnschte Verhalten eines Hyperlinks. Die Idee einer Single-Page-Applikation ist aber jedoch die, dass die Seite nur genau einmal geladen wird und dann dynamisch alle weiteren Inhalte. Das Nachladen wird vermieden, wenn wir als Attribut f\u00fcr unsere Pfade nicht href verwenden, sondern die Angular-Direktive routerLink . Dies gilt nur f\u00fcr interne Links! Aber es verhindert bei internen Links ein Neuladen der Seite. app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a routerLink = \"/\" > home </ a > </ li > < li > < a routerLink = \"/first\" > first </ a > </ li > < li > < a routerLink = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die obige Attributschreibweise kann auch durch property binding ersetzt werden. Dann \u00fcbergeben Sie als Wert aber keinen String sondern ein 1-elementiges Array: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die zweite Variante wird meistens dann verwendet, wenn an den Pfad noch dynamisch Werte \u00fcbergeben werden, sogenannte Parameter an den Routen. Parameter an Routen \u00b6 H\u00e4ufig sind die Pfadangaben nicht nur so statisch wie bisher, also /first bzw. /second , sondern es werden auch noch Werte, z.B. Session-IDs, Nutzer-IDs, B\u00fccher-ISBN usw. \u00fcbergeben. Dazu werden die Routen durch Parameter erweitert. Diese Parameter werden dann mit einem konkreten Wert bei Aufruf ersetzt. Die allgemeine Syntax f\u00fcr einen parametrisierten Pfad ist: { path : 'mypath/:id' , component : MyComponent } Der Doppelpunkt : ist zwingend, der Name des Parameters id ist frei w\u00e4hlbar. Die Werte f\u00fcr den Routenparameter k\u00f6nnen als routerLink wieder entweder als String \u00fcbergeben werden (Zeile 1 im folgenden Listing) oder per property binding als weiteres Array-Element (Zeile 2 im folgenden Listing). 1 2 < a routerLink = \"/mypath/4711\" > statischer Wert f\u00fcr id </ a > < a [ routerLink ]=\"['/ mypath ', myData . id ]\" > dynamischer Wert f\u00fcr id (aus JSON myData) </ a > Wir haben jetzt eine parametrisierten Pfad konfiguriert und wir haben auch betrachtet, wie der Aufruf einer solch parametrisierten Route erfolgen kann. Nun betrachten wir, wie der Wert eines Parameters in einer Komponentenklasse ausgelesen und verarbeitet werden kann. Wir f\u00fchren dazu zun\u00e4chst kleinere \u00c4nderungen an unserem obigen Beispiel der routing-lesson -App durch: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } first.component.html 1 2 < h3 > Hier ist FirstComponent </ h3 > < p * ngIf = \"id\" > {{ id }} </ p > In app-routing.module.ts haben wir einen weiteren Pfad hinzugef\u00fcgt (Zeilennummer 8). Beachten Sie, dass ohne die Pfadkonfiguration in Zeilennummer 7 die Route http://localhost:4200/first (also ohne Parameterwert) nicht mehr existieren w\u00fcrde. Wenn ein Parameter erforderlich ist, dann muss er auch angegeben werden. Nur in Kombination der beiden Pfadkonfigurationen aus Zeilennummern 7 und 8 ist der Pfad sowohl mit als auch ohne Parameterwert m\u00f6glich. Im Template der FirstComponent haben wir einen Absatz eingef\u00fcgt, der als Inhalt den Wert der Eigenschaft id mittels Interpolation anzeigt. Der Absatz erscheint nur, wenn id auch einen Wert hat. Die Eigenschaft id muss allerdings noch in der first.component.ts angelegt werden: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . id = this . route . snapshot . paramMap . get ( 'id' ); } } In der first.component.ts kommen verschiedene Sachen hinzu: es wird die Eigenschaft id deklariert (als string ) es wird der Service ActivatedRoute per dependency injection der Klasse FirstComponent injiziert \u2192 die Eigenschaft route ist vom Typ ActivatedRoute ActivatedRoute stellt uns Informationen \u00fcber den aktuellen Router (die aktuelle URL) zur Verf\u00fcgung \u2192 die Eigenschaft this.route.snapshot.paramMap enth\u00e4lt alle Parameter der aktuellen Route \u2192 mithilfe der Methode get() kann nach einem konkreten Parameter gefragt werden \u2192 wir fragen nach dem Parameter id , da wir so unseren Pfad konfiguriert haben (siehe oben app-routing.module.ts ) Wenn wir nun z.B. die URL http://localhost:4200/first/42 eingeben, dann erscheint im Brower der Wert des Parameters (als Inhalt des <p> -Elementes; siehe oben first.component.html ). Die aktuelle Implementierung von first.component.ts liest also w\u00e4hrend der Initialisierung der Komponente die Routenparameter aus. Finden jedoch am Parameterwert \u00c4nderungen statt, ohne dass die Komponente neu initialisiert wird, bekommt die Komponente von den \u00c4nderungen nichts mit. Die oben gezeigte Form der Implementierung ist deshalb nicht f\u00fcr alle F\u00e4lle geeignet. Vielmehr ist es besser auszunutzen, dass es sich bei this.route.paramMap (ohne snapshot ) um ein Observable handelt. Ein Observable kann so verstanden werden, dass er permanent eine bestimmte Sache beobachtet (z.B. ist der EventEmitter ein Observable und beobachtet permanent, ob das Ereignis ausgel\u00f6st wird; wenn ja, dann ruft EventEmitter die Funktion emit() auf \u2192 siehe Eigene Ereignisse ). Wenn sich etwas an dem beobachteten Objekt ge\u00e4ndert hat, dann reagiert Observable sofort und ruft eine bestimmte Funktion auf. Das Observable paramMap beobachtet permanent die aktuelle Route und sobald sich etwas an dieser Route \u00e4ndert, wird eine Funktion aufgerufen. Damit das Observable aber \u00fcberhaupt den aktuellen Router permanent beobachtet, muss er an den Router angemeldet werden \u2192 das Observable \"abboniert\" den Router. Dies geschieht mithilfe der Funktion subscribe() . Dieser Funktion kann als Parameter eine Funktion \u00fcbergeben werden. Diese Funktion wird aufgerufen, sobald sich am aktuellen Router etwas \u00e4ndert. Wir \u00e4ndern die Implementierung von ngOnInit() in der Klasse first.component.ts deshalb wie folgt: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . route . paramMap . subscribe ( paramMap => this . id = paramMap . get ( 'id' ) ); } } Nun erh\u00e4lt die Eigenschaft id immer den aktuellsten Wert (und dieser wird aufgrund der Interpolation auch stets aktuell in der View dargestellt). Verschachtelte Routen \u00b6 Angenommen, wir haben zwei weitere Komponenten OneComponent und TwoComponent und beide Komponenten sind Kindkomponenten von der Elternkomponente FirstComponent . Das Verh\u00e4ltnis Eltern- Kindkomponente entsteht ja eigentlich dadurch, dass das Template der Elternkomponente den Selektor der Kindkomponente enth\u00e4lt. Das hei\u00dft in first.component.html gibt es sowohl ein <app-one></app-one> als auch ein <app-two></app-two> \u2192 dann sind One und Two Kindkomponenten von First . Wir wollen nun aber folgendes: die Route /first verweist auf die FirstComponent die Route /first/one verweist auf die FirstComponent und deren Kindkomponente OneComponent die Route /first/two verweist auf die FirstComponent und deren Kindkomponente TwoComponent Wir wollen also, dass auch die beiden Kindkomponenten mittels Routing in die Elternkomponente eingef\u00fcgt werden. Das erreichen wir mit 2 Anpassungen: in app-routing.module.ts kann im routes -Array auch noch die Eigenschaft children hinzugef\u00fcgt werden, welche Pfadkonfigurationen zu den Kindkomponenten enth\u00e4lt in der *.component.html der Elternkomponente wird ein weiteres <router-outlet></router-outlet> hinzugef\u00fcgt app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; import { OneComponent } from './first/one/one.component' ; import { TwoComponent } from './first/two/two.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent , children : [ { path : 'one' , component : OneComponent }, { path : 'two' , component : TwoComponent }, ]}, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } first.component.html 1 2 3 4 5 6 7 < h3 > Hier ist FirstComponent </ h3 > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > < p * ngIf = \"id\" > {{ id }} </ p > < router-outlet ></ router-outlet > app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das bedeutet, dass wir nun zwei <router-outlet></router-outlet> -Elemente haben. Eines in der app.component.html f\u00fcr die Routen first , first/:id und second und eines in der first.component.html f\u00fcr die Routen first/one und first/two . Styles f\u00fcr aktive Routen \u00b6 Sie k\u00f6nnen angeben, welche CSS-Klassen wirken sollen, falls eine Route aktiv ist. Eine Route ist aktiv, wenn Sie ausgew\u00e4hlt/angewendet werden kann. Dazu wurde in Angular das Attribut routerLinkActive eingef\u00fchrt. Angenommen, die CSS-Klasse myactiveclass soll Anwendung f\u00fcr eine aktuelle (aktive) Route /first Anwendung finden, dann definieren Sie: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass\" > first </ a > Sie k\u00f6nnen auch mehrere CSS-Klassen definieren. Daf\u00fcr gibt es zwei verschiedene M\u00f6glichkeiten: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass1 myactiveclass1\" > first </ a > < a routerLink = \"/first\" [ routerLinkActive ]=\"[' myactiveclass1 ', ' myactiveclass1 ']\" > first </ a > Das Styling aktiver Routen ist insbesondere f\u00fcr Navigationsleisten (Men\u00fcs) hilfreich. Routen im Programm wechseln \u00b6 Der Service Router stellt zwei Methoden zur Verf\u00fcgung, mit denen eine Route im Programm gewechselt werden kann, z.B. nach einer Nutzereingabe oder einer Nutzerinteraktion: navigate() navigateByUrl() Angenommen, wir erweitern unsere Komponente SecondComponent um einen Button. Durch den Klick auf den Button soll von der SecondComponent auf die OneComponent \u00fcber die Route /first/one gewechselt werden: second.component.html 1 2 < h3 > Hier ist SecondComponent </ h3 > < button ( click )=\" changeRoute ()\" > /first/one </ button > second.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component , OnInit } from '@angular/core' ; import { Router } from '@angular/router' ; @ Component ({ selector : 'app-second' , templateUrl : './second.component.html' , styleUrls : [ './second.component.css' ] }) export class SecondComponent implements OnInit { constructor ( private router : Router ) { } ngOnInit () : void { } changeRoute () { this . router . navigate ([ '/first' , 'one' ]); // oder // this.router.navigateByUrl('/first/one'); } } In der second.component.ts sehen wir in Zeile 11, dass der Service Router per dependency injection eingebunden wird. Der Eigenschaft router stehen die Methoden navigate() bzw. navigateByUrl() zur Verf\u00fcgung. Wir sehen in den Zeilen 16-20 die Behandlung des Click -Ereignisses des Buttons. In Zeile 17 wird darin programmatisch die Route /first/one aufgerufen. HTTPClient \u00b6 Wir wissen bereits, dass Angular eine TypeScript-Framework ist, mit dem sich Single-Page-Anwendungen implementieren lassen. Es wird einmalig eine Seite (h\u00e4ufig index.html ) vom Server geladen und alle weiteren Inhalte werden sukzessive bzw. durch Nutzerinteraktionen gesteuert in diese eine Seite nachgeladen. Die Steuering wird dabei durch den Browser vorgenommen, der das aus TypeScript \u00fcbersetzte JavaScript interpretiert und entsprechend die Templates der Komponenten in die Anwendung einbindet. Das bedeutet, dass im Prinzip die gesamte Logik im Client , d.h. im Browser ausgef\u00fchrt wird. Dem gegen\u00fcber steht jedoch die in der Anwendung verarbeitete Menge von Daten, die typischerweise in einer Datenbank auf einem Server bereitgestellt werden. W\u00e4hrend der Client sich darum k\u00fcmmert, dass Daten angezeigt oder eingegeben werden, muss sich der Server darum k\u00fcmmern, dass Daten in die Datenquelle (die Datenbank) neu eingef\u00fcgt, ausgelesen, aktualisiert und gel\u00f6scht werden k\u00f6nnen. Diese vier Operationen werden mit CRUD abgek\u00fcrzt f\u00fcr: C reate - neue Daten einf\u00fcgen R ead - Daten auslesen U pdate - Daten aktualisieren D elete - Daten l\u00f6schen Der Client und der Server m\u00fcssen dazu nun irgendwie verbunden werden. Diese Verbindung erfolgt mithilfe des Hypertext Transfer Protocols (HTTP) .","title":"Angular"},{"location":"angular/#angular","text":"Angular geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Das erste Release von Angular erschien 2010 (damals noch unter dem Namen AngularJS, ab Version 2 nur noch Angular). React und Vue kamen 2013 bzw. 2014 erstmalig heraus. Angular wird haupts\u00e4chlich von Google, React haupts\u00e4chlich von Facebook und Vue als Community-Version entwickelt. Alle drei Frameworks stehen unter MIT-Lizent . Neben HTML und CSS verwendet Angular TypeScript . TypeScript ist eine Obermenge von JavaScript. Das bedeutet, dass jeder JavaScript-Code auch TypeScript ist, aber nicht umgekehrt. TypeScript-Code wird compiliert und erzeugt JavaScript-Code, der vom Browser ausgef\u00fchrt werden kann. Im Gegensatz zu JavaScript ist TypeScript typsicher und klar objektorientiert.","title":"Angular"},{"location":"angular/#erstes-projekt-erstellen","text":"Eine Angularanwendung besteht haupts\u00e4chlich aus Komponenten und Services. Um die Anwendung selbst sowie Komponenten und Services zu erstellen, wird am besten das Command Line Interface for Angular (Angular CLI) verwendet. \u00d6ffnen Sie ein Terminal (Windows-Nutzerinnen sollten die Git-Bash verwenden, die Sie bereits mit Git installiert haben). Wechseln Sie im Terminal in das Verzeichnis, das Ihre Projekte enthalten soll. F\u00fcr das Wechseln in andere Verzeichnisse nutzen Sie den cd Befehl (change directory). Um die Anwendung \"first\" zu erzeugen, geben Sie folgenden Befehl in das Terminal ein: ng new first ng steht f\u00fcr Angular. Mit dem Attribut new geben Sie an, dass Sie ein neues Projekt erzeugen wollen. first ist der Name des Projektes. Wenn Sie gefragt werden, ob Sie Angular routing verwenden m\u00f6chten, geben Sie ein y ein. Wenn Sie nach dem stylesheet format gefragt werden, k\u00f6nnen Sie CSS einfach mit Enter best\u00e4tigen. Wenn alles geklappt hat, erhalten Sie im Terminal eine Ausgabe in der Form: Es entsteht ein Ordner first in Ihrem Projekte-Verzeichnis. Wechseln Sie in dieses Verzeichnis: cd first F\u00fchren Sie darin den Befehl: npm install aus. Damit werden alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** :Compiled successfully. \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: Success Fertig! Sie haben Ihr erstes Angular-Projekt erstellt.","title":"Erstes Projekt erstellen"},{"location":"angular/#angular-projektstruktur","text":"\u00d6ffnen Sie die IDE Ihrer Wahl (Screenshots hier mit [PhpStorm] ( https://www.jetbrains.com/de-de/phpstorm/ ). W\u00e4hlen Sie unter Open Project den Projektordner first . Klappen Sie das Projekt first auf, klappen Sie den Ordner src und dann den Ordner app auf. Der Projektexplorer zeigt folgendes Bild: Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt: \u00d6ffnen Sie die app.component.css -Datei und geben Sie dort h1 { color : red ; } Nach den \u00c4nderungen in app.component.css erscheint der Text der \u00dcberschrift in rot: Zusammenfassung Wir haben die die app.component.html ge\u00e4ndert, um den Inhalt der dargestellten Seite anzupassen und die app.component.css , um \u00c4nderungen an der Darstellung (dem Stil) des Inhalts durchzuf\u00fchren.","title":"Angular-Projektstruktur"},{"location":"angular/#komponenten","text":"Eine Angular-Anwendung besteht haupts\u00e4chlich aus Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'book-app' ; } Der Selektor gibt an, dass \u00fcberall dort, wo app-root als Elementselektor <app-root> </app-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <app-root> </app-root> eingesetzt: < app-root > < h1 > This is app </ h1 > </ app-root > Wir schauen uns ein ausf\u00fchrlicheres Beispiel im Folgenden an, in dem wir eine neue Komponente erzeugen.","title":"Komponenten"},{"location":"angular/#eine-neue-komponente-erzeugen","text":"Mithilfe von Angular-CLI erzeugen wir in unserer App first eine neue Komponente. Wir wechseln dazu im Terminal in den Ordner von first und geben dann ng generate component mycomponent ein. Sp\u00e4ter k\u00fcrzen wir solche Eingaben ab. Anstelle von generate brauchen wir auch nur g zu schreiben. Und anstelle von component gen\u00fcgt c . Das hei\u00dft, wir h\u00e4tten stattdessen auch ng g c mycomponent schreiben k\u00f6nnen. In unserer first App gibt es nun die Komponente mycomponent : Jede Angular-Komponente besteht aus vier Teilen: der TypeScript-Klasse (die *.component.ts -Datei) dem Template (die *.component.html -Datei) den Styles (die *.component.css -Datei) einer Testspezifikation (die *.component.spec.ts -Datei) Jede Komponente wird in der app.module.ts der gesamten Anwendung bekannt gemacht. Das erfolgt mithilfe der Eigenschaft declarations im Decorator @NgModule() : import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { MycomponentComponent } from './mycomponent/mycomponent.component' ; @ NgModule ({ declarations : [ AppComponent , MycomponentComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das obige Listing zeigt, dass die neue Komponente Mycomponent registriert wurde. Um dieses Eintragen in die app.module.ts m\u00fcssen wir uns aber nicht k\u00fcmmern, das erledigt die Angular-CLI mit der Anweisung zur Erstellung einer neuen Komponente ng generate component newComponent . Doppelklicken Sie im Projektexplorer Ihrer IDE auf die Datei mycomponent.component.ts , um sie zu \u00f6ffnen. Sie enth\u00e4lt den folgenden Quelltext: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-mycomponent' , templateUrl : './mycomponent.component.html' , styleUrls : [ './mycomponent.component.css' ] }) export class MycomponentComponent implements OnInit { constructor () { } ngOnInit () : void { } } Wir \u00e4ndern diese Datei zun\u00e4chst nicht und \u00f6ffnen auch noch die mycomponent.component.html . Diese enth\u00e4lt nur ein HTML-Element, einen Absatz: < p > mycomponent works! </ p > Wir \u00e4ndern auch diese Datei zun\u00e4chst nicht und \u00f6ffnen die app.component.html - die HTML-Datei unserer Root-Komponente. Diese sieht derzeit so aus: < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wir f\u00fcgen in die Datei den Selektor app-mycomponent unserer neuen Mycomponent -Komponente als HTML-Element ein: < h1 > This is app </ h1 > < app-mycomponent ></ app-mycomponent > <!-- eingefuegt --> < router-outlet ></ router-outlet > Dieses Element dient als \"Platzhalter\" f\u00fcr das Template unserer neuen Komponente. Das bedeutet, dass in dieses Element der HTML-Code aus mycomponent.component.html eingef\u00fcgt wird. Wechseln Sie in den Browser auf den Tab mit Ihrer Anwendung ( http://localhost:4200/ ). Sie sehen folgendes Bild: Unterhalb der \u00dcberschrift ( <h1>This is app</h1> ) wurde also der Absatz <p>mycomponent works!</p> eingef\u00fcgt. Wenn Sie sich den Quelltext Ihrer Seite anschauen, z.B. \u00fcber die Entwicklertools Ihres Browsers ( z.B. f\u00fcr Chrome ), dann wird folgender Code sichtbar: Wir k\u00f6nnen hier die Attribute der HTML-Elemente vernachl\u00e4ssigen (also z.B. _nghost-menu-c19 oder ng-version=\"9.0.7\" ). Aber es wird folgende HTML-Struktur sichtbar: < app-root > < h1 > This is app </ h1 > < app-mycomponent > < p > mycomponent works! </ p > </ app-mycomponent > < router-outlet ></ router-outlet > </ app-root > Das Element <app-root> fungiert als Platzhalter f\u00fcr die gesamte App. In dieses Element wird der gesamte Inhalt der Anwendung eingebunden (siehe app.component.html ). Dies ist hier zun\u00e4chst eine \u00dcberschrift <h1> , die von dem Element f\u00fcr die Mycomponent -Komponente gefolgt wird. Das bedeutet, dass in das Element <app-mycomponent> der Inhalt der Komponente Mycomponent eingebunden wird. Das ist hier nur ein Absatz <p> (siehe dazu mycomponent.component.html ). Das Element router-outlet> soll uns an dieser Stelle noch nicht interessieren. Das wird erst interessant, wenn wir \u00fcber das Routing in einer Angular-Anwendung sprechen.","title":"Eine neue Komponente erzeugen"},{"location":"angular/#direktiven","text":"In Angular gibt es 3 Arten sogenannter Direktiven (engl. Directives ): Komponentendirektiven (Components\u2014directives) Attributdirektiven (Attribute Directives) Strukturdirektiven (Structural-Direktives) Komponentendirektiven sind die meistverwendete Art und bereits in Angular \u2192 Kompnenten betrachtet. Attribut- und Strukturdirektiven k\u00f6nnen als HTML-Attribute verstanden werden, die dem HTML-Element ein zus\u00e4tzliches Verhalten hinzuf\u00fcgt. Attributdirektiven wirken sich das innere Verhalten eines HTML-Elementes aus (z.B. k\u00f6nnen damit CSS-Eigenschaften ge\u00e4ndert, hinzugef\u00fcgt oder gel\u00f6scht werden). Mit Strukturdirektiven kann die Struktur des DOMs ge\u00e4ndert werden (z.B. k\u00f6nnen ganze HTML-Elemente dem DOM-Baum hinzugef\u00fcgt werden).","title":"Direktiven"},{"location":"angular/#strukturdirektiven","text":"Strukturdirektiven beginnen immer mit einem Stern * . Die bekanntesten Vertreter sind *ngFor *ngIf *ngSwitch Diese sind auch in angular.io erl\u00e4utert. Wir erl\u00e4utern die darin aufgef\u00fchrten Beispiele und beginnen mit *ngIf : 1 2 3 4 5 6 7 8 < p * ngIf = \"true\" > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > < p * ngIf = \"false\" > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > Die Direktive *ngIf wird also wie ein Attribut des <p> -Elementes behandelt. Das Attribut *ngIf hat entweder den Wert \"true\" oder den Wert \"false\" . Ja nach Wert des Attributes wird das jeweilige <p> -Element in den DOM-Baum eingebunden. Also entweder das <p> -Element aus den Codezeilen 1 - 4 (bei Wert \"true\" ) oder das <p> -Element aus den Codezeilen 5 - 8 (bei Wert \"false\" ). In einer echten Anwendung ergibt sich der Wert des Attributes/der Direktive meistens aus dem Wert einer boole'schen Variablen oder einem anderen boole'schen Ausdruck. Das nicht dargestellte Element ist auch nicht Teil des DOMs! Es ist also nicht einfach nur auf hide gesetzt, sondern es ist gar nicht im DOM vorhanden. Intern wird aus der *ngIf -Direktive \u00fcbrigens ein sogenanntes Property-Binding : < ng-template [ ngIf ]=\" true \" > < p > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > </ ng-template > < ng-template [ ngIf ]=\" false \" > < p > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > </ ng-template > Die *ngFor -Direktive ist etwas komplexer als *ngIf . F\u00fcr *ngFor ben\u00f6tigen wir mindestens eine Liste (oder ein Array) und eine Laufvariable, die die Werte aus der Liste annehmen kann. Im folgenden Beispiel ist i unsere laufvariable und [1, 2, 3, 4, 5, 6] unser Array. < div * ngFor = \"let i of [1, 2, 3, 4, 5, 6]\" > {{ i }} </ div > F\u00fcr jeden Wert aus der Liste wird ein eigenes <div> - Element erzeugt. Der DOM-Baum sieht f\u00fcr obiges Beispiel also wie folgt aus (Angular-Attribute weggelassen): < div > 1 </ div > < div > 2 </ div > < div > 3 </ div > < div > 4 </ div > < div > 5 </ div > < div > 6 </ div > Au\u00dferdem stellt *ngFor noch einige Hilfsvariablen zur Verf\u00fcgung, die ebenfalls genutzt werden k\u00f6nnen: index (Index des aktuellen Elementes 0, 1, 2, ... ) first (ist true , wenn erstes Element, sonst false ) last (ist true , wenn letztes Element, sonst false ) even (ist true , wenn Index gerade , sonst false ) odd (ist true , wenn Index ungerade , sonst false ) Folgend ein komplexeres Beispiel unter Verwendung einiger Hilfsvariablen: 1 2 3 4 5 6 7 8 9 < div * ngFor = \"let value of [1, 2, 3, 4, 5, 6]; index as i; first as f; last as l; odd as o;\" > < div * ngIf = \"f\" > Start </ div > < div [ style . color ]=\" o ? ' red ' : ' blue '\" > {{ i }} : {{ value }} </ div > < div * ngIf = \"l\" > Ende </ div > </ div > In Zeile 1 ist unsere Laufvariable durch das Array nun value . Au\u00dferdem wird der jeweilige Wert von index in der Variablen i (Zeilennummer 2 ) gespeichert, der Wert von first in der Variablen f (Zeilennummer 3 ), der Wert von last in der Variablen l (Zeilennummer 4 ) und der Wert von odd in der Variablen o (Zeilennummer 5 ) - die Hilfsvariable even betrachten wir hier nicht, da deren Wert genau der Negation von odd entspricht. In Zeile 6 wenden wir die *ngIf -Direktive an: ein <div> mit dem Inhalt Start wird vor dem ersten Element aus dem Array ausgegeben. F\u00fcr jedes weitere Element nicht mehr. In Zeile 7 erfolgt ein Property Binding : die color -Eigenschaft bekommt einen Wert zugewiesen. Der Wert ist jedoch abh\u00e4ngig davon, ob o wahr ist (dann Wert red ) oder falsch (dann Wert blue ). Zeile 7 zeigt au\u00dferdem wie mithilfe von Interpolation der Wert von i und der Wert von value , getrennt mit : ausgegeben werden. Die Ausgabe ist also: Aufgabe Informieren Sie sich auch \u00fcber die *ngSwitch -Direktive. Implementieren Sie ein Beispiel, in dem Sie die 3 Direktiven *ngIf , *ngFor und *ngSwitch anwenden.","title":"*Strukturdirektiven"},{"location":"angular/#interpolation","text":"Interpolation ist die einfachste Form des data binding . Syntaktisch erkennt man Interpolation an den doppelten geschweiften Klammern {{ Interpolation }} . Beispiel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-lesson' , template : ` <h1>{{ headline }}</h1> <p>Hier steht {{name}}</p> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { headline = 'Mein Titel' ; name = 'mein Name' ; } Im obigen Beispiel hat die Komponente LessonComponent zwei Eigenschaften: headline und name . In obiger Komponente wird (zur Anschauung) sogenanntes inline templating verwendet, d.h. es gibt keine eigene lesson.component.html -Datei, in der der HTML-Code steht, sondern der HTML-Code wird direkt in die template -Eigenschaft der Typescript-Datei lesson.component.ts eingef\u00fcgt (siehe Zeilen 5-8 im obigen Beispiel). Der HTML-Code wird in backticks eingefasst ( `` ), nicht zu verwechseln mit den einfachen Anf\u00fchrungsstrichen ( '' ). Damit inline templating m\u00f6glich ist, wird die Komponente mit dem Flag -t erzeugt ( inlineTemplate=true ), d.h. unsere Lesson-Komponente wurde mithilfe der CLI wie folgt erzeugt: ng g c lesson -t Eine Interpolation kann auch Ausdr\u00fccke enthalten, die aufgel\u00f6st werden, z.B. < p > 1 + 2 = {{1 + 2}}. </ p > Man kann mithilfe einer Direktive durch ein Array laufen und jedes einzelne Element mithilfe von Interpolation ausgeben: @ Component ({ selector : 'app-lesson' , template : ` <ol> <li *ngFor=\"let day of weekdays\">{{ day }}</li> </ol> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { weekdays = [ 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ]; } Oder es ist m\u00f6glich, Attributen von HTML-Elementen mithilfe von Interpolation Werte zuzuordnen: @ Component ({ selector : 'app-lesson' , template : ` <img src=\"{{ imgUrl }}\" /> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg' ; }","title":"{{ Interpolation }}"},{"location":"angular/#property-bindings","text":"Insbesondere, wenn Attributen von HTML-Elementen Werte zugeordnet werden sollen (so wie im letzten Beispiel des Abschnitts {{Interpolation}} ), spricht man von property binding . Property binding spielt eine gro\u00dfe Rolle beim Datenfluss von Eltern-Komponenten auf Kind-Komponenten. Die generelle Idee dabei ist, dass mithilfe von property binding Werte (Daten) an Attribute von HTML-Elementen bindet. Diese HTML-Elemente k\u00f6nnen auch Komponenten sein. Wir betrachten zun\u00e4chst die unterschiedlichen Arten (Notationen) von property binding: < element [ property ]=\" ausdruck \" ></ element > D.h. ein ausdruck wird \u00fcbergeben, der zu einem Wert aufgel\u00f6st wird und dieser Wert wird dem Attribut property \u00fcbergeben. Betrachten wir nochmals das letzte Beispiel aus dem Abschnitt {{Interpolation}} ). Bei diesem Beispiel haben wir Interpolation verwendet, um dem Attribut src des HTML-Elementes img einen Wert zuzuweisen. Das exakt gleiche Verhalten l\u00e4sst sich auch mittels property bindings erzeugen: < img [ src ]=\" imgUrl \" /> <!-- imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg'; --> Neben diesen \"allgemeinen\" property bindings gibt es auch noch \"spezielle\" property bindings, n\u00e4mlich class bindings und style bindings . Bei class bindings wird das Pr\u00e4fix class vor die property (die entsprechende CSS-Klasse) gesetzt: < element [ class . class1 ]=\" class1enabled \" [ class . class2 ]=\" class2enabled \" ... ></ element > D.h. die CSS-Klasse class1 ist genau dann wirksam, wenn der Ausdruck class1enabled true ist und class2 ist genau dann wirksam, wenn der Ausdruck class2enabled true ist usw. Bei den style bindings werden jedoch gar keine Ausdr\u00fccke, sondern Werte \u00fcbergeben: < element [ style . color ]","title":"[Property Bindings]"},{"location":"angular/#event-bindings","text":"In den property bindings haben wir gesehen, wie Werte Attributen (Eigenschaften) von Elementen zugeordnet werden k\u00f6nnen. Aus JavaScript ist auch bekannt, dass Ereignisse Attribute von Elementen sein k\u00f6nnen, z.B. onClick , onKeyup , onChange usw. Dabei handelt es sich um sogenannte native DOM-Ereignisse . Neben der M\u00f6glichkeit, solche nativen DOM-Ereigniss zu behandeln, bietet Angular auch die M\u00f6glichkeit, eigene Ereignisse zu definieren und diese zu behandeln. Wir betrachten beide M\u00f6glichkeiten und beginnen mit den nativen Ereignissen.","title":"(Event Bindings)"},{"location":"angular/#native-dom-ereignisse","text":"In HTML sieht das unter Aufruf einer JavaScript-Funktion f\u00fcr die Ereignisbahandlung dann typischerweise (hier das Click-Ereignis f\u00fcr einen Button) wie folgt aus: HTML < button onClick = \"doSomething()\" > Click here! </ button > JavaScript function doSomething () { // something to do } In Angular ist das Prinzip das gleiche, nur dass das Ereignis in runden Klammern genannt und an dieses Ereignis die Ereignisbehandlung gebunden wird ( event binding ). Das bedeutet, das Angular-Template f\u00fcr das obige Beispiel sieht wie folgt aus: Angular-Template < button ( click )=\" doSomething ()\" > Click here! </ button > Angular-Typescript export class EventsComponent { doSomething () { // something to do } } Dieses Prinzip gilt f\u00fcr alle nativen DOM-Ereignisse. Hier ein kurzer \u00dcberblick \u00fcber die wichtigsten (f\u00fcr eine umfangreichere Liste siehe hier oder hier ): Ereignis Beschreibung click Mausklick auf das Element change Der Inhalt/Wert eines Elementes hat sich ge\u00e4ndert mouseover die Maus wird \u00fcber das Element bewegt mouseout die Maus wird vom Element wegbewegt keydown eine Taste der Tastatur wird gedr\u00fcckt keyup Loslassen einer Taste load der Browser hat die Seite vollst\u00e4ndig geladen focus Fokussieren des Elements (z.B. Anklicken) blur Verlieren des Fokus (z.B. Klick au\u00dferhalb) submit Abschicken eines Formulars copy , paste Kopieren, Einf\u00fcgen von Text Einen kleinen Unterschied gibt es noch bei der \u00dcbergabe des Ereignisses an die das Ereignis behandelnde Funktion zu beachten. W\u00e4hrend in plain JavaScript das Ereignis mit event der Funktion \u00fcbergeben wird, erfolgt die \u00dcbergabe des Ereignisses in Angular mit $event . Beispiel: Angular-Template < input ( change )=\" showPayload ($ event )\" type = \"text\" /> Angular-Typescript export class EventsComponent { showPayload ( e : Event ) { console . log ( e ); } } Alle Events (in TypeScript/Angular) sind vom Typ Event . Es gibt noch speziellere Eventtypen, die aber alle auf dem Interface Event basieren, z.B. MouseEvent , InputEvent , KeyboardEvent , UIEvent , ClipboardEvent . Weitere Details siehe hier . Die einfache JavaScript-Attributschreibweise kann in Angular nicht verwendet werden, sondern immer nur die event binding -Schreibweise von Angular (mit den runden Klammern)!","title":"Native DOM-Ereignisse"},{"location":"angular/#eigene-ereignisse","text":"F\u00fcr eine Komponente kann ein eigenes - nicht natives - Ereignis definiert werden. Dies geschieht, indem f\u00fcr eine Komponente eine neue Eigenschaft (z.B. myEvent ) definiert wird und diese vom Typ EventEmitter deklariert wird. Mithilfe von Generics kann der Typ des Events angegeben werden, der ausgel\u00f6st werden soll - wenn Sie den Typ nicht genau kennen, verwenden Sie any . Soll das Ereignis an die Elternkomponente weitergeleitet werden, was meistens der Fall ist, wird der Decorator @Output() verwendet. Das Ausl\u00f6sen des Events geschieht dann durch die emit() -Methode von EventEmitter . Hier ein typisches Beispiel (zun\u00e4chst die Kindkomponente EventsComponent - also events.component.html und events.component.ts ): .html < button ( click )=\" emitMyEvent ()\" > Click here! </ button > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < any > (); emitMyEvent () { this . myEvent . emit (); } } Die .html -Datei definiert einen Button mit dem nativen Ereignis click . Dieses wird durch die Methode emitMyEvent() behandelt. In der .ts -Datei ist diese Methode definiert (Zeilen 11-13). Darin wird das eigene Event myEvent ausgel\u00f6st. Dieses Event ist ein Objekt vom Typ EventEmitter , typisiert als any (beliebiger Typ). Das Ausl\u00f6sen dieses Events wird an die aufrufende Komponente (die Elternkomponente) ausgegeben (Decorator @Output() ). Deklaration der Eigenschaft und Dekorieren mit @Output() in Zeile 9. Das Ausl\u00f6sen des eigenen Events erfolgt durch den Aufruf der Methode emit() aus EventEmitter (Zeile 12). In der Elternkomponente kann dieses Ereignis nun empfangen werden (Beispiel einer Elternkomponente AppComponent - also app.component.html und app.component.ts ): .html < app-events ( myEvent )=\" handleEventFromEventsComponent ()\" ></ app-events > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent () { console . log ( 'myEvent in der Kindkomponente ausgel\u00f6st' ); } } In der AppComponent (das kann nat\u00fcrlich eine beliebige Komponente sein), wird die EventsComponent eingebunden (siehe <app-events> im Template der AppComponent ). Dadurch entsteht die Hierarchie Elternkomponente AppComponent \u2192 Kindkomponente EventsComponent im DOM. Mithilfe von event binding wird die Behandlung des Ereignisses myEvent an die Methode handleEventFromEventsComponent() gebunden. In dieser Methode erfolgt hier einfach nur eine Ausgabe auf die Konsole. Interessant ist, dass wir dadurch die M\u00f6glichkeit haben, Daten von der Kindkomponente zur Elternkomponente flie\u00dfen zu lassen. Dazu \u00fcbergeben wir diese Daten als payload des Ereignisses. Daf\u00fcr typisieren wir EventEmitter mit dem Typ, von dem wir Daten \u00fcbergeben wollen (z.B. Book - siehe B\u00fccher-App ). Die beiden obigen Beispiele sehen dann wie folgt aus (zuerst wieder EventsComponent ): .html < button ( click )=\" emitMyEvent ( book )\" > Click here! </ button > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < Book > (); emitMyEvent ( book : Book ) { this . myEvent . emit ( book ); } } Im Template (HTML) werden die Daten der Ereignisbehandlung \u00fcbergeben. Das EventEmitter -Objekt ist mit dem konkreten Datentyp typisiert. Bei Aufruf der Methode emit() werden die Daten an die Elternkomponente \u00fcbergeben. Die Elternkomponente (hier wieder AppComponent kann diese Daten, die von der Kindkomponente an die Elternkomponente via Ereignis geflossen sind, nun weiterverarbeiten bzw. darstellen): .html < app-events ( myEvent )=\" handleEventFromEventsComponent ($ event )\" ></ app-events > .ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent ( book : Book ) { console . log ( book . title ); } } Wichtig beim event binding der Elternkomponente ist, dass der payload des Ereignisses mit $event \u00fcbergeben wird (siehe auch Native DOM-Ereignisse ). Zusammenfassung In den letzten drei Abschnitten Interpolation, Property Binding und Event Binding haben wir uns mit Datenfluss besch\u00e4ftigt. Interpolation wird verwendet, um innerhalb einer Komponente die in der TypeScript-Klasse definierten Daten im Template darzustellen. Mithilfe von Property Binding kann die aufrufende Komponente (Elternkomponente) der aufgerufenen Kopmponente (Kindkomponente) Daten \u00fcbergeben. Mithilfe von Event Binding kann die Kindkomponente der Elternkomponente mithilfe eines eigenen Ereignisses Daten \u00fcbergeben. F\u00fcr die Anwendung dieser Konzepte schauen Sie sich B\u00fccher-App\u2192Datenfluss zwischen Komponenten an.","title":"Eigene Ereignisse"},{"location":"angular/#two-way-bindings","text":"","title":"[(Two-Way-Bindings)]"},{"location":"angular/#lifecycle-hooks","text":"Komponenten durchlaufen einen festen Lebenszyklus ( lifecycle ). Die verschiedenen Status rufen dabei jeweils eine Methode auf, die wir jeweils implementieren k\u00f6nnen, um in den jeweiligen Status des Lebenszyklus eingreifen zu k\u00f6nnen. Man spricht dabei von sogenannten Lifecycle-Hooks . Der wohl bekannteste Lifecycle-Hook ist ngOnInit() . Damit greift man in die Initialisierung der Komponente ein. Typischerweise werden z.B. Eingabewerte initialisiert, die im Template dargestellt werden. Noch vor ngOnInit wird jedoch ngOnChange() aufgerufen. N\u00e4mlich genau dann, wenn die Eingabewerte gesetzt bzw. ge\u00e4ndert werden. F\u00fcr weiterf\u00fchrende Informationen sei https://angular.io/guide/lifecycle-hooks empfohlen.","title":"Lifecycle-Hooks"},{"location":"angular/#services","text":"Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, eine Komponente Methoden zur Datenbindung ( data binding ) zur Verf\u00fcgung stellt, um zwischen View und Anwendungslogik zu vermitteln. Ein Service erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, ohne sich um die Darstellung der Daten zu k\u00fcmmern. Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen). Ein Service ist eine Klasse mit dem Decorator @Injectable() . Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service my kann mittels CLI so erzeugt werden: ng generate service shared/my Es entsteht im src/app/shared -Ordner eine Datei my.service.ts . Services sollten am besten in dem shared -Ordner erstellt werden, da ein Service von allen Komponenten genutzt werden kann (eine andere M\u00f6glichkeit w\u00e4re, einen eigenen Ordner services zu erstellen). In dem Decorator @Injectable() wird mittels providedIn: root angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services MyService : my.service.ts 1 2 3 4 5 6 7 8 9 10 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class MyService { constructor ( private myDependency : MyDependency ) { } } Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel: example.component.ts import { Component , OnInit } from '@angular/core' ; import { MyService } from './shared/my.service' ; @ Component ({ selector : 'app-example' , templateUrl : './example.component.html' , styleUrls : [ './example.component.css' ] }) export class ExampleComponent implements OnInit { constructor ( private myService : MyService ) { } ngOnInit () : void { this . example . methodOfMyService (); } } F\u00fcr ein Beispiel einer Service-Definition und der Verwendung eines Services siehe BookStoreService . F\u00fcr weiterf\u00fchrende Informationen siehe https://angular.io/guide/architecture-services .","title":"Services"},{"location":"angular/#routing","text":"Routing ist ein wesentliches Konzept f\u00fcr die Entwicklung von Single-Page-Applikationen (SPA). Bei Single-Page-Applikationen wird genau eine Seite vom Webserver geladen (typischerweise die index.html und alle weiteren, sich \u00e4ndernden, Inhalte und Sichten werden in diese Seite nachgeladen). Das f\u00fchrt zun\u00e4chst auch dazu, dass es f\u00fcr die Seite genau eine URL gibt, um auf sie zuzugreifen (z.B. http://www.mydomain.de bzw. http://www.mydomain.de/index.html ). M\u00f6chte man aber Komponenten direkt in der URL ansprechen, z.B. http://www.mydomain.de/login f\u00fcr die Login-Komponente, so ben\u00f6tigen wir das Routing von Angular. Wir betrachten hier ein Beispiel, das https://angular.io/guide/router entnommen ist und nur leicht abgewandelt wurde. Wir erstellen dazu zun\u00e4chst ein neues Projekt routing-lesson . ng new routing-lesson In der obigen Anweisung h\u00e4tte man auch bereits den Parameter --routing verwenden k\u00f6nnen, also: ng new routing-lesson --routing Macht man das nicht, werden Sie gefragt, ob Sie Routing verwenden wollen: ? Would you like to add Angular routing? [y|N] Antworten Sie mit y . Zur Demonstration des Routings werden wir zun\u00e4chst 2 weitere Komponenten erstellen: first und second . cd routing-lesson ng g c first ng g c second Wird ein Angular-Projekt mit Routing erstellt, so existiert die Datei app-routing.module.ts im src/app/ -Ordner. Diese Datei sieht urspr\u00fcnglich so aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; const routes : Routes = []; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Bei dieser Klasse handelt es sich um ein eigenes Angular-Modul (als @NgModule dekoriert). Es wird deshalb auch in die app.module.ts integriert (dies geschieht automatisch, wenn wir Routing ausgew\u00e4hlt haben) - siehe Zeilen 4 und 17 im folgenden Listing: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; @ NgModule ({ declarations : [ AppComponent , FirstComponent , SecondComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das Array routes aus der Datei app-routing.module.ts enth\u00e4lt sp\u00e4ter die Pfadangaben zu den Komponenten - sogenannte Routen . Routen sind Objekte und wie folgt notiert: { path : 'mypath' , component : MyComponent } Diese Angabe bewirkt, dass unter der URL http://www.mydomain.de/mypath die Komponente MyComponent aufgerufen wird. Angenommen, wir wollen, dass unsere Komponente FirstComponent unter dem Pfad /first aufgerufen wird und SecondComponent unter dem Pfad /second , dann sieht unsere Datei app-routing.module.ts wie folgt aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 8 und 9 sind die beiden Routen definiert. Beachten Sie, dass die Pfadangaben ohne vorangestelltes Slash / erfolgen! Unter Verwendung der Selektoren <app-first> bzw. <app-second> k\u00f6nnten wir unsere Komponenten nun (statisch) in unsere Anwendung einbinden. Wollen wir das jedoch dem Routing \u00fcberlassen, die Komponenten also dynamisch - abh\u00e4ngig von dem jeweils gew\u00e4hlten Pfad - einbinden lassen, verwenden wir stattdessen den Selektor <router-outlet> . Auch dieser ist bei gew\u00e4hltem Routing bereits Teil des AppComponent -Templates: app.component.html <!-- hier wurde viel vom urspr\u00fcnglichen --> <!-- Template gel\u00f6scht --> < h1 > Hier ist AppComponent </ h1 > < router-outlet ></ router-outlet > Obiges Listing zeigt, dass das Template von AppComponent zun\u00e4chst eine <h1> -\u00dcberschrift vorsieht und dann folgt das <router-outlet> , welches als Platzhalter f\u00fcr die durch das Routing ausgew\u00e4hlten Komponenten agiert. Angenommen, wir definieren die Templates f+r FirstComponent und SecondComponent wie folgt: first.component.html < h3 > Hier ist FirstComponent </ h3 > second.component.html < h3 > Hier ist SecondComponent </ h3 > Starten wir nun unsere Anwendung, dann sehen wir zun\u00e4chst (URL: http://localhost:4200/ ) nur die View der AppComponent , n\u00e4mlich die <h1> -\u00dcberschrift. Der Platzhalter <router-outlet> bleibt leer, da keine der angegebenen Pfade aus der app-routing.module.ts angegeben wurde. Geben wir jedoch als URL http://localhost:4200/first ein, so wird das Template der FirstComponent in diesen Platzhalter geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist FirstComponent . Geben wir als URL stattdessen http://localhost:4200/second ein, so wird das Template der SecondComponent in den Platzhalter <router-outlet> geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist SecondComponent . Die folgende Abbildung zeigt die Views der drei F\u00e4lle: Wir haben nun Pfade erzeugt, mit denen man Komponenten direkt ansprechen kann. Im folgenden Abschnitt wird gezeigt, wie man diese Pfade in Hyperlinks nutzt.","title":"Routing"},{"location":"angular/#routen-verlinken","text":"Wir kennen nun die m\u00f6glichen Pfade unserer Anwendung http://localhost:4200/ , http://localhost:4200/first und http://localhost:4200/second und w\u00fcrden diese Adressen z.B. gerne in Hyperlinks verwenden, um direkt zu den Views der jeweiligen Komponente zu springen, z.B. so: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a href = \"/\" > home </ a > </ li > < li > < a href = \"/first\" > first </ a > </ li > < li > < a href = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das funktioniert auch, hat aber einen von uns nicht gewollten Effekt: Die Seite wird durch jeden Klick auf einen Hyperlink neu geladen. Das ist ja auch das gew\u00fcnschte Verhalten eines Hyperlinks. Die Idee einer Single-Page-Applikation ist aber jedoch die, dass die Seite nur genau einmal geladen wird und dann dynamisch alle weiteren Inhalte. Das Nachladen wird vermieden, wenn wir als Attribut f\u00fcr unsere Pfade nicht href verwenden, sondern die Angular-Direktive routerLink . Dies gilt nur f\u00fcr interne Links! Aber es verhindert bei internen Links ein Neuladen der Seite. app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a routerLink = \"/\" > home </ a > </ li > < li > < a routerLink = \"/first\" > first </ a > </ li > < li > < a routerLink = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die obige Attributschreibweise kann auch durch property binding ersetzt werden. Dann \u00fcbergeben Sie als Wert aber keinen String sondern ein 1-elementiges Array: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die zweite Variante wird meistens dann verwendet, wenn an den Pfad noch dynamisch Werte \u00fcbergeben werden, sogenannte Parameter an den Routen.","title":"Routen verlinken"},{"location":"angular/#parameter-an-routen","text":"H\u00e4ufig sind die Pfadangaben nicht nur so statisch wie bisher, also /first bzw. /second , sondern es werden auch noch Werte, z.B. Session-IDs, Nutzer-IDs, B\u00fccher-ISBN usw. \u00fcbergeben. Dazu werden die Routen durch Parameter erweitert. Diese Parameter werden dann mit einem konkreten Wert bei Aufruf ersetzt. Die allgemeine Syntax f\u00fcr einen parametrisierten Pfad ist: { path : 'mypath/:id' , component : MyComponent } Der Doppelpunkt : ist zwingend, der Name des Parameters id ist frei w\u00e4hlbar. Die Werte f\u00fcr den Routenparameter k\u00f6nnen als routerLink wieder entweder als String \u00fcbergeben werden (Zeile 1 im folgenden Listing) oder per property binding als weiteres Array-Element (Zeile 2 im folgenden Listing). 1 2 < a routerLink = \"/mypath/4711\" > statischer Wert f\u00fcr id </ a > < a [ routerLink ]=\"['/ mypath ', myData . id ]\" > dynamischer Wert f\u00fcr id (aus JSON myData) </ a > Wir haben jetzt eine parametrisierten Pfad konfiguriert und wir haben auch betrachtet, wie der Aufruf einer solch parametrisierten Route erfolgen kann. Nun betrachten wir, wie der Wert eines Parameters in einer Komponentenklasse ausgelesen und verarbeitet werden kann. Wir f\u00fchren dazu zun\u00e4chst kleinere \u00c4nderungen an unserem obigen Beispiel der routing-lesson -App durch: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } first.component.html 1 2 < h3 > Hier ist FirstComponent </ h3 > < p * ngIf = \"id\" > {{ id }} </ p > In app-routing.module.ts haben wir einen weiteren Pfad hinzugef\u00fcgt (Zeilennummer 8). Beachten Sie, dass ohne die Pfadkonfiguration in Zeilennummer 7 die Route http://localhost:4200/first (also ohne Parameterwert) nicht mehr existieren w\u00fcrde. Wenn ein Parameter erforderlich ist, dann muss er auch angegeben werden. Nur in Kombination der beiden Pfadkonfigurationen aus Zeilennummern 7 und 8 ist der Pfad sowohl mit als auch ohne Parameterwert m\u00f6glich. Im Template der FirstComponent haben wir einen Absatz eingef\u00fcgt, der als Inhalt den Wert der Eigenschaft id mittels Interpolation anzeigt. Der Absatz erscheint nur, wenn id auch einen Wert hat. Die Eigenschaft id muss allerdings noch in der first.component.ts angelegt werden: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . id = this . route . snapshot . paramMap . get ( 'id' ); } } In der first.component.ts kommen verschiedene Sachen hinzu: es wird die Eigenschaft id deklariert (als string ) es wird der Service ActivatedRoute per dependency injection der Klasse FirstComponent injiziert \u2192 die Eigenschaft route ist vom Typ ActivatedRoute ActivatedRoute stellt uns Informationen \u00fcber den aktuellen Router (die aktuelle URL) zur Verf\u00fcgung \u2192 die Eigenschaft this.route.snapshot.paramMap enth\u00e4lt alle Parameter der aktuellen Route \u2192 mithilfe der Methode get() kann nach einem konkreten Parameter gefragt werden \u2192 wir fragen nach dem Parameter id , da wir so unseren Pfad konfiguriert haben (siehe oben app-routing.module.ts ) Wenn wir nun z.B. die URL http://localhost:4200/first/42 eingeben, dann erscheint im Brower der Wert des Parameters (als Inhalt des <p> -Elementes; siehe oben first.component.html ). Die aktuelle Implementierung von first.component.ts liest also w\u00e4hrend der Initialisierung der Komponente die Routenparameter aus. Finden jedoch am Parameterwert \u00c4nderungen statt, ohne dass die Komponente neu initialisiert wird, bekommt die Komponente von den \u00c4nderungen nichts mit. Die oben gezeigte Form der Implementierung ist deshalb nicht f\u00fcr alle F\u00e4lle geeignet. Vielmehr ist es besser auszunutzen, dass es sich bei this.route.paramMap (ohne snapshot ) um ein Observable handelt. Ein Observable kann so verstanden werden, dass er permanent eine bestimmte Sache beobachtet (z.B. ist der EventEmitter ein Observable und beobachtet permanent, ob das Ereignis ausgel\u00f6st wird; wenn ja, dann ruft EventEmitter die Funktion emit() auf \u2192 siehe Eigene Ereignisse ). Wenn sich etwas an dem beobachteten Objekt ge\u00e4ndert hat, dann reagiert Observable sofort und ruft eine bestimmte Funktion auf. Das Observable paramMap beobachtet permanent die aktuelle Route und sobald sich etwas an dieser Route \u00e4ndert, wird eine Funktion aufgerufen. Damit das Observable aber \u00fcberhaupt den aktuellen Router permanent beobachtet, muss er an den Router angemeldet werden \u2192 das Observable \"abboniert\" den Router. Dies geschieht mithilfe der Funktion subscribe() . Dieser Funktion kann als Parameter eine Funktion \u00fcbergeben werden. Diese Funktion wird aufgerufen, sobald sich am aktuellen Router etwas \u00e4ndert. Wir \u00e4ndern die Implementierung von ngOnInit() in der Klasse first.component.ts deshalb wie folgt: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . route . paramMap . subscribe ( paramMap => this . id = paramMap . get ( 'id' ) ); } } Nun erh\u00e4lt die Eigenschaft id immer den aktuellsten Wert (und dieser wird aufgrund der Interpolation auch stets aktuell in der View dargestellt).","title":"Parameter an Routen"},{"location":"angular/#verschachtelte-routen","text":"Angenommen, wir haben zwei weitere Komponenten OneComponent und TwoComponent und beide Komponenten sind Kindkomponenten von der Elternkomponente FirstComponent . Das Verh\u00e4ltnis Eltern- Kindkomponente entsteht ja eigentlich dadurch, dass das Template der Elternkomponente den Selektor der Kindkomponente enth\u00e4lt. Das hei\u00dft in first.component.html gibt es sowohl ein <app-one></app-one> als auch ein <app-two></app-two> \u2192 dann sind One und Two Kindkomponenten von First . Wir wollen nun aber folgendes: die Route /first verweist auf die FirstComponent die Route /first/one verweist auf die FirstComponent und deren Kindkomponente OneComponent die Route /first/two verweist auf die FirstComponent und deren Kindkomponente TwoComponent Wir wollen also, dass auch die beiden Kindkomponenten mittels Routing in die Elternkomponente eingef\u00fcgt werden. Das erreichen wir mit 2 Anpassungen: in app-routing.module.ts kann im routes -Array auch noch die Eigenschaft children hinzugef\u00fcgt werden, welche Pfadkonfigurationen zu den Kindkomponenten enth\u00e4lt in der *.component.html der Elternkomponente wird ein weiteres <router-outlet></router-outlet> hinzugef\u00fcgt app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; import { OneComponent } from './first/one/one.component' ; import { TwoComponent } from './first/two/two.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent , children : [ { path : 'one' , component : OneComponent }, { path : 'two' , component : TwoComponent }, ]}, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } first.component.html 1 2 3 4 5 6 7 < h3 > Hier ist FirstComponent </ h3 > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > < p * ngIf = \"id\" > {{ id }} </ p > < router-outlet ></ router-outlet > app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das bedeutet, dass wir nun zwei <router-outlet></router-outlet> -Elemente haben. Eines in der app.component.html f\u00fcr die Routen first , first/:id und second und eines in der first.component.html f\u00fcr die Routen first/one und first/two .","title":"Verschachtelte Routen"},{"location":"angular/#styles-fur-aktive-routen","text":"Sie k\u00f6nnen angeben, welche CSS-Klassen wirken sollen, falls eine Route aktiv ist. Eine Route ist aktiv, wenn Sie ausgew\u00e4hlt/angewendet werden kann. Dazu wurde in Angular das Attribut routerLinkActive eingef\u00fchrt. Angenommen, die CSS-Klasse myactiveclass soll Anwendung f\u00fcr eine aktuelle (aktive) Route /first Anwendung finden, dann definieren Sie: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass\" > first </ a > Sie k\u00f6nnen auch mehrere CSS-Klassen definieren. Daf\u00fcr gibt es zwei verschiedene M\u00f6glichkeiten: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass1 myactiveclass1\" > first </ a > < a routerLink = \"/first\" [ routerLinkActive ]=\"[' myactiveclass1 ', ' myactiveclass1 ']\" > first </ a > Das Styling aktiver Routen ist insbesondere f\u00fcr Navigationsleisten (Men\u00fcs) hilfreich.","title":"Styles f\u00fcr aktive Routen"},{"location":"angular/#routen-im-programm-wechseln","text":"Der Service Router stellt zwei Methoden zur Verf\u00fcgung, mit denen eine Route im Programm gewechselt werden kann, z.B. nach einer Nutzereingabe oder einer Nutzerinteraktion: navigate() navigateByUrl() Angenommen, wir erweitern unsere Komponente SecondComponent um einen Button. Durch den Klick auf den Button soll von der SecondComponent auf die OneComponent \u00fcber die Route /first/one gewechselt werden: second.component.html 1 2 < h3 > Hier ist SecondComponent </ h3 > < button ( click )=\" changeRoute ()\" > /first/one </ button > second.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component , OnInit } from '@angular/core' ; import { Router } from '@angular/router' ; @ Component ({ selector : 'app-second' , templateUrl : './second.component.html' , styleUrls : [ './second.component.css' ] }) export class SecondComponent implements OnInit { constructor ( private router : Router ) { } ngOnInit () : void { } changeRoute () { this . router . navigate ([ '/first' , 'one' ]); // oder // this.router.navigateByUrl('/first/one'); } } In der second.component.ts sehen wir in Zeile 11, dass der Service Router per dependency injection eingebunden wird. Der Eigenschaft router stehen die Methoden navigate() bzw. navigateByUrl() zur Verf\u00fcgung. Wir sehen in den Zeilen 16-20 die Behandlung des Click -Ereignisses des Buttons. In Zeile 17 wird darin programmatisch die Route /first/one aufgerufen.","title":"Routen im Programm wechseln"},{"location":"angular/#httpclient","text":"Wir wissen bereits, dass Angular eine TypeScript-Framework ist, mit dem sich Single-Page-Anwendungen implementieren lassen. Es wird einmalig eine Seite (h\u00e4ufig index.html ) vom Server geladen und alle weiteren Inhalte werden sukzessive bzw. durch Nutzerinteraktionen gesteuert in diese eine Seite nachgeladen. Die Steuering wird dabei durch den Browser vorgenommen, der das aus TypeScript \u00fcbersetzte JavaScript interpretiert und entsprechend die Templates der Komponenten in die Anwendung einbindet. Das bedeutet, dass im Prinzip die gesamte Logik im Client , d.h. im Browser ausgef\u00fchrt wird. Dem gegen\u00fcber steht jedoch die in der Anwendung verarbeitete Menge von Daten, die typischerweise in einer Datenbank auf einem Server bereitgestellt werden. W\u00e4hrend der Client sich darum k\u00fcmmert, dass Daten angezeigt oder eingegeben werden, muss sich der Server darum k\u00fcmmern, dass Daten in die Datenquelle (die Datenbank) neu eingef\u00fcgt, ausgelesen, aktualisiert und gel\u00f6scht werden k\u00f6nnen. Diese vier Operationen werden mit CRUD abgek\u00fcrzt f\u00fcr: C reate - neue Daten einf\u00fcgen R ead - Daten auslesen U pdate - Daten aktualisieren D elete - Daten l\u00f6schen Der Client und der Server m\u00fcssen dazu nun irgendwie verbunden werden. Diese Verbindung erfolgt mithilfe des Hypertext Transfer Protocols (HTTP) .","title":"HTTPClient"},{"location":"books-backend/","text":"B\u00fccher-Backend \u00b6 Datenbank erstellen \u00b6 http://localhost/phpmyadmin Datei books-db.sql files/books-db.sql -- phpMyAdmin SQL Dump -- version 5.0.2 -- https://www.phpmyadmin.net/ -- -- Host: localhost -- Generation Time: Jul 15, 2020 at 02:36 PM -- Server version: 8.0.17 -- PHP Version: 7.3.11 SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\" ; START TRANSACTION ; SET time_zone = \"+00:00\" ; /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */ ; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */ ; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */ ; /*!40101 SET NAMES utf8mb4 */ ; -- -- Database: `books-db` -- -- -------------------------------------------------------- -- -- Table structure for table `author` -- CREATE TABLE `author` ( `author_id` int ( 11 ) NOT NULL , `lastname` varchar ( 255 ) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL , `firstname` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `author` -- INSERT INTO `author` (`author_id`, `lastname`, `firstname`) VALUES ( 1 , 'Malcher' , 'Ferdinand' ), ( 2 , 'Hoppe' , 'Johannes' ), ( 3 , 'Kopenhagen' , 'Danny' ), ( 4 , 'Zeigermann' , 'Oliver' ), ( 5 , 'Hartmann' , 'Nils' ), ( 6 , 'Bloch' , 'Joshua' ); -- -------------------------------------------------------- -- -- Table structure for table `author_book` -- CREATE TABLE `author_book` ( `id` int ( 11 ) NOT NULL , `author_id` int ( 11 ) NOT NULL , `book_id` int ( 11 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `author_book` -- INSERT INTO `author_book` (`id`, `author_id`, `book_id`) VALUES ( 1 , 1 , 1 ), ( 2 , 2 , 1 ), ( 3 , 3 , 1 ), ( 4 , 4 , 2 ), ( 5 , 5 , 2 ), ( 6 , 6 , 3 ); -- -------------------------------------------------------- -- -- Table structure for table `books` -- CREATE TABLE `books` ( `book_id` int ( 11 ) NOT NULL , `isbn` varchar ( 30 ) NOT NULL , `title` varchar ( 50 ) NOT NULL , `published` date NOT NULL , `subtitle` varchar ( 255 ) NOT NULL , `rating` smallint ( 6 ) NOT NULL , `thumbnails` int ( 11 ) NOT NULL , `description` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `books` -- INSERT INTO `books` (`book_id`, `isbn`, `title`, `published`, `subtitle`, `rating`, `thumbnails`, `description`) VALUES ( 1 , '9783864906466' , 'Angular' , '2019-04-30' , 'Grundlagen, fortgeschrittene Techniken und Best Practices - mit NativeScript und NgRx' , 5 , 1 , 'Die Autoren f\u00fchren Sie mit einem anspruchsvollen Beispielprojekt durch die Welt von Angular...' ), ( 2 , '9783864903274' , 'React' , '2016-06-17' , 'Die praktische Einf\u00fchrung in React, React Router und Redux' , 3 , 2 , 'React ist ein JavaScript-Framework zur Entwicklung von Benutzeroberfl\u00e4chen ...' ), ( 3 , '978-3-86490-578-0' , 'Effective Java' , '2018-09-01' , 'Best Practices f\u00fcr die Java-Plattform' , 3 , 3 , 'Seit der Vorauflage von Effective Java hat sich Java dramatisch ver\u00e4ndert...' ); -- -------------------------------------------------------- -- -- Table structure for table `thumbnail` -- CREATE TABLE `thumbnail` ( `id` int ( 11 ) NOT NULL , `url` varchar ( 255 ) NOT NULL , `title` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `thumbnail` -- INSERT INTO `thumbnail` (`id`, `url`, `title`) VALUES ( 1 , 'https://ng-buch.de/cover2.jpg' , 'Buchcover' ), ( 2 , 'https://ng-buch.de/cover1.jpg' , 'Buchcover' ), ( 3 , 'https://www.dpunkt.de/common/images/cover_masterid/300/13216.jpg' , 'Buchcover' ); -- -- Indexes for dumped tables -- -- -- Indexes for table `author` -- ALTER TABLE `author` ADD PRIMARY KEY ( `author_id` ), ADD KEY `author_id` ( `author_id` ); -- -- Indexes for table `author_book` -- ALTER TABLE `author_book` ADD PRIMARY KEY ( `id` ), ADD UNIQUE KEY `id` ( `book_id` , `author_id` ), ADD KEY `author_id` ( `author_id` ); -- -- Indexes for table `books` -- ALTER TABLE `books` ADD PRIMARY KEY ( `book_id` ), ADD KEY `book_id` ( `book_id` ), ADD KEY `thumbnails` ( `thumbnails` ); -- -- Indexes for table `thumbnail` -- ALTER TABLE `thumbnail` ADD PRIMARY KEY ( `id` ); -- -- AUTO_INCREMENT for dumped tables -- -- -- AUTO_INCREMENT for table `author` -- ALTER TABLE `author` MODIFY `author_id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 7 ; -- -- AUTO_INCREMENT for table `author_book` -- ALTER TABLE `author_book` MODIFY `id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 7 ; -- -- AUTO_INCREMENT for table `books` -- ALTER TABLE `books` MODIFY `book_id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 12 ; -- -- AUTO_INCREMENT for table `thumbnail` -- ALTER TABLE `thumbnail` MODIFY `id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 4 ; -- -- Constraints for dumped tables -- -- -- Constraints for table `author_book` -- ALTER TABLE `author_book` ADD CONSTRAINT `author_book_ibfk_1` FOREIGN KEY ( `author_id` ) REFERENCES `author` ( `author_id` ), ADD CONSTRAINT `author_book_ibfk_2` FOREIGN KEY ( `book_id` ) REFERENCES `books` ( `book_id` ); -- -- Constraints for table `books` -- ALTER TABLE `books` ADD CONSTRAINT `books_ibfk_1` FOREIGN KEY ( `thumbnails` ) REFERENCES `thumbnail` ( `id` ); COMMIT ; /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */ ; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */ ; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */ ; Node.js-Projekt erstellen \u00b6 Ordner books-backend erstellen. In diesen Ordner wechseln. Im Ordner npm init ausf\u00fchren (es entsteht eine package.json ). mkdir books-backend cd books-backend npm init Alle Fragen mit einem Enter beantworten (oder etwas eingeben, wenn Sie m\u00f6chten). Jetzt noch die Packages express und mysql installieren. npm install express npm install mysql Im Ordner books-backend eine index.js erzeugen: books-backend/index.js const express = require ( 'express' ); const app = express (); app . listen ( 8081 , () => { console . log ( 'Server is listening to http://localhost:8081' ); }); Im Ordner books-backend einen Ordner books erzeugen. Darin eine index.js (f\u00fcr den Router), eine model.js (f\u00fcr die Datenbankanbindung) und eine controller.js (f\u00fcr die Aktionsverwaltung) erstellen. Einen Endpunkt ( localhost/books/authors ) erstellen, um alle Authoren aus der Datenbank auszulesen (mit GET ). /books/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , database : 'books-db' , }); connection . connect (); function getAllAuthors () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAllAuthors , }; /books/controller.js const model = require ( './model' ); function readAuthors ( request , response ) { model . getAllAuthors (). then ( authors => response . json ( authors ), error => response . json ( error ), ); } module . exports = { readAuthors , } /books/index.js const express = require ( 'express' ); const router = express . Router (); const { readAuthors } = require ( './controller' ); router . get ( '/authors' , readAuthors ); module . exports = router ; Zum Testen in Postman: http://localhost:8081/books/authors eingeben und GET -Methode w\u00e4hlen. Es erscheint das JSON mit allen Autoren: Response-Body [ { \"author_id\" : 1 , \"lastname\" : \"Malcher\" , \"firstname\" : \"Ferdinand\" }, { \"author_id\" : 2 , \"lastname\" : \"Hoppe\" , \"firstname\" : \"Johannes\" }, { \"author_id\" : 3 , \"lastname\" : \"Kopenhagen\" , \"firstname\" : \"Danny\" }, { \"author_id\" : 4 , \"lastname\" : \"Zeigermann\" , \"firstname\" : \"Oliver\" }, { \"author_id\" : 5 , \"lastname\" : \"Hartmann\" , \"firstname\" : \"Nils\" }, { \"author_id\" : 6 , \"lastname\" : \"Bloch\" , \"firstname\" : \"Joshua\" } ] GET - einen Autor auslesen \u00b6 Neu hinzugekommener Code highlighted: /books/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , database : 'books-db' , }); connection . connect (); function getAllAuthors () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } function getOneAuthor ( id ) { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author WHERE author_id=?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAllAuthors , getAuthor ( id ) { return getOneAuthor ( id ) }, }; /books/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const model = require ( './model' ); function readAuthors ( request , response ) { model . getAllAuthors (). then ( authors => response . json ( authors ), error => response . json ( error ), ); } function readAuthor ( request , response ) { model . getAuthor ( request . params . id ). then ( author => response . json ( author ), error => response . status ( 500 ). json ( error ), ); } module . exports = { readAuthors , readAuthor , } /books/index.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { readAuthors , readAuthor } = require ( './controller' ); router . get ( '/authors' , readAuthors ); router . get ( '/author/:id' , readAuthor ); module . exports = router ; Zum Testen in Postman z.B. http://localhost:8081/books/author/4 (Autor mit der author_id 4) und GET aufrufen. POST - einen neuen Autoren anlegen und PUT - einen Autoren \u00e4ndern \u00b6 Ein neuer Autor bzw. die \u00c4nderungen werden als JSON dem Request-Body \u00fcbergeben. Dazu wird das Paket body-parser ben\u00f6tigt. npm install body-parser","title":"B\u00fccher-Backend"},{"location":"books-backend/#bucher-backend","text":"","title":"B\u00fccher-Backend"},{"location":"books-backend/#datenbank-erstellen","text":"http://localhost/phpmyadmin Datei books-db.sql files/books-db.sql -- phpMyAdmin SQL Dump -- version 5.0.2 -- https://www.phpmyadmin.net/ -- -- Host: localhost -- Generation Time: Jul 15, 2020 at 02:36 PM -- Server version: 8.0.17 -- PHP Version: 7.3.11 SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\" ; START TRANSACTION ; SET time_zone = \"+00:00\" ; /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */ ; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */ ; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */ ; /*!40101 SET NAMES utf8mb4 */ ; -- -- Database: `books-db` -- -- -------------------------------------------------------- -- -- Table structure for table `author` -- CREATE TABLE `author` ( `author_id` int ( 11 ) NOT NULL , `lastname` varchar ( 255 ) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL , `firstname` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `author` -- INSERT INTO `author` (`author_id`, `lastname`, `firstname`) VALUES ( 1 , 'Malcher' , 'Ferdinand' ), ( 2 , 'Hoppe' , 'Johannes' ), ( 3 , 'Kopenhagen' , 'Danny' ), ( 4 , 'Zeigermann' , 'Oliver' ), ( 5 , 'Hartmann' , 'Nils' ), ( 6 , 'Bloch' , 'Joshua' ); -- -------------------------------------------------------- -- -- Table structure for table `author_book` -- CREATE TABLE `author_book` ( `id` int ( 11 ) NOT NULL , `author_id` int ( 11 ) NOT NULL , `book_id` int ( 11 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `author_book` -- INSERT INTO `author_book` (`id`, `author_id`, `book_id`) VALUES ( 1 , 1 , 1 ), ( 2 , 2 , 1 ), ( 3 , 3 , 1 ), ( 4 , 4 , 2 ), ( 5 , 5 , 2 ), ( 6 , 6 , 3 ); -- -------------------------------------------------------- -- -- Table structure for table `books` -- CREATE TABLE `books` ( `book_id` int ( 11 ) NOT NULL , `isbn` varchar ( 30 ) NOT NULL , `title` varchar ( 50 ) NOT NULL , `published` date NOT NULL , `subtitle` varchar ( 255 ) NOT NULL , `rating` smallint ( 6 ) NOT NULL , `thumbnails` int ( 11 ) NOT NULL , `description` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `books` -- INSERT INTO `books` (`book_id`, `isbn`, `title`, `published`, `subtitle`, `rating`, `thumbnails`, `description`) VALUES ( 1 , '9783864906466' , 'Angular' , '2019-04-30' , 'Grundlagen, fortgeschrittene Techniken und Best Practices - mit NativeScript und NgRx' , 5 , 1 , 'Die Autoren f\u00fchren Sie mit einem anspruchsvollen Beispielprojekt durch die Welt von Angular...' ), ( 2 , '9783864903274' , 'React' , '2016-06-17' , 'Die praktische Einf\u00fchrung in React, React Router und Redux' , 3 , 2 , 'React ist ein JavaScript-Framework zur Entwicklung von Benutzeroberfl\u00e4chen ...' ), ( 3 , '978-3-86490-578-0' , 'Effective Java' , '2018-09-01' , 'Best Practices f\u00fcr die Java-Plattform' , 3 , 3 , 'Seit der Vorauflage von Effective Java hat sich Java dramatisch ver\u00e4ndert...' ); -- -------------------------------------------------------- -- -- Table structure for table `thumbnail` -- CREATE TABLE `thumbnail` ( `id` int ( 11 ) NOT NULL , `url` varchar ( 255 ) NOT NULL , `title` varchar ( 255 ) NOT NULL ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; -- -- Dumping data for table `thumbnail` -- INSERT INTO `thumbnail` (`id`, `url`, `title`) VALUES ( 1 , 'https://ng-buch.de/cover2.jpg' , 'Buchcover' ), ( 2 , 'https://ng-buch.de/cover1.jpg' , 'Buchcover' ), ( 3 , 'https://www.dpunkt.de/common/images/cover_masterid/300/13216.jpg' , 'Buchcover' ); -- -- Indexes for dumped tables -- -- -- Indexes for table `author` -- ALTER TABLE `author` ADD PRIMARY KEY ( `author_id` ), ADD KEY `author_id` ( `author_id` ); -- -- Indexes for table `author_book` -- ALTER TABLE `author_book` ADD PRIMARY KEY ( `id` ), ADD UNIQUE KEY `id` ( `book_id` , `author_id` ), ADD KEY `author_id` ( `author_id` ); -- -- Indexes for table `books` -- ALTER TABLE `books` ADD PRIMARY KEY ( `book_id` ), ADD KEY `book_id` ( `book_id` ), ADD KEY `thumbnails` ( `thumbnails` ); -- -- Indexes for table `thumbnail` -- ALTER TABLE `thumbnail` ADD PRIMARY KEY ( `id` ); -- -- AUTO_INCREMENT for dumped tables -- -- -- AUTO_INCREMENT for table `author` -- ALTER TABLE `author` MODIFY `author_id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 7 ; -- -- AUTO_INCREMENT for table `author_book` -- ALTER TABLE `author_book` MODIFY `id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 7 ; -- -- AUTO_INCREMENT for table `books` -- ALTER TABLE `books` MODIFY `book_id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 12 ; -- -- AUTO_INCREMENT for table `thumbnail` -- ALTER TABLE `thumbnail` MODIFY `id` int ( 11 ) NOT NULL AUTO_INCREMENT , AUTO_INCREMENT = 4 ; -- -- Constraints for dumped tables -- -- -- Constraints for table `author_book` -- ALTER TABLE `author_book` ADD CONSTRAINT `author_book_ibfk_1` FOREIGN KEY ( `author_id` ) REFERENCES `author` ( `author_id` ), ADD CONSTRAINT `author_book_ibfk_2` FOREIGN KEY ( `book_id` ) REFERENCES `books` ( `book_id` ); -- -- Constraints for table `books` -- ALTER TABLE `books` ADD CONSTRAINT `books_ibfk_1` FOREIGN KEY ( `thumbnails` ) REFERENCES `thumbnail` ( `id` ); COMMIT ; /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */ ; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */ ; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */ ;","title":"Datenbank erstellen"},{"location":"books-backend/#nodejs-projekt-erstellen","text":"Ordner books-backend erstellen. In diesen Ordner wechseln. Im Ordner npm init ausf\u00fchren (es entsteht eine package.json ). mkdir books-backend cd books-backend npm init Alle Fragen mit einem Enter beantworten (oder etwas eingeben, wenn Sie m\u00f6chten). Jetzt noch die Packages express und mysql installieren. npm install express npm install mysql Im Ordner books-backend eine index.js erzeugen: books-backend/index.js const express = require ( 'express' ); const app = express (); app . listen ( 8081 , () => { console . log ( 'Server is listening to http://localhost:8081' ); }); Im Ordner books-backend einen Ordner books erzeugen. Darin eine index.js (f\u00fcr den Router), eine model.js (f\u00fcr die Datenbankanbindung) und eine controller.js (f\u00fcr die Aktionsverwaltung) erstellen. Einen Endpunkt ( localhost/books/authors ) erstellen, um alle Authoren aus der Datenbank auszulesen (mit GET ). /books/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , database : 'books-db' , }); connection . connect (); function getAllAuthors () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAllAuthors , }; /books/controller.js const model = require ( './model' ); function readAuthors ( request , response ) { model . getAllAuthors (). then ( authors => response . json ( authors ), error => response . json ( error ), ); } module . exports = { readAuthors , } /books/index.js const express = require ( 'express' ); const router = express . Router (); const { readAuthors } = require ( './controller' ); router . get ( '/authors' , readAuthors ); module . exports = router ; Zum Testen in Postman: http://localhost:8081/books/authors eingeben und GET -Methode w\u00e4hlen. Es erscheint das JSON mit allen Autoren: Response-Body [ { \"author_id\" : 1 , \"lastname\" : \"Malcher\" , \"firstname\" : \"Ferdinand\" }, { \"author_id\" : 2 , \"lastname\" : \"Hoppe\" , \"firstname\" : \"Johannes\" }, { \"author_id\" : 3 , \"lastname\" : \"Kopenhagen\" , \"firstname\" : \"Danny\" }, { \"author_id\" : 4 , \"lastname\" : \"Zeigermann\" , \"firstname\" : \"Oliver\" }, { \"author_id\" : 5 , \"lastname\" : \"Hartmann\" , \"firstname\" : \"Nils\" }, { \"author_id\" : 6 , \"lastname\" : \"Bloch\" , \"firstname\" : \"Joshua\" } ]","title":"Node.js-Projekt erstellen"},{"location":"books-backend/#get-einen-autor-auslesen","text":"Neu hinzugekommener Code highlighted: /books/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , database : 'books-db' , }); connection . connect (); function getAllAuthors () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } function getOneAuthor ( id ) { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM author WHERE author_id=?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAllAuthors , getAuthor ( id ) { return getOneAuthor ( id ) }, }; /books/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const model = require ( './model' ); function readAuthors ( request , response ) { model . getAllAuthors (). then ( authors => response . json ( authors ), error => response . json ( error ), ); } function readAuthor ( request , response ) { model . getAuthor ( request . params . id ). then ( author => response . json ( author ), error => response . status ( 500 ). json ( error ), ); } module . exports = { readAuthors , readAuthor , } /books/index.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { readAuthors , readAuthor } = require ( './controller' ); router . get ( '/authors' , readAuthors ); router . get ( '/author/:id' , readAuthor ); module . exports = router ; Zum Testen in Postman z.B. http://localhost:8081/books/author/4 (Autor mit der author_id 4) und GET aufrufen.","title":"GET - einen Autor auslesen"},{"location":"books-backend/#post-einen-neuen-autoren-anlegen-und-put-einen-autoren-andern","text":"Ein neuer Autor bzw. die \u00c4nderungen werden als JSON dem Request-Body \u00fcbergeben. Dazu wird das Paket body-parser ben\u00f6tigt. npm install body-parser","title":"POST - einen neuen Autoren anlegen und PUT - einen Autoren \u00e4ndern"},{"location":"books/","text":"B\u00fccher-App \u00b6 Das folgende Beispiel ist dem Buch Ferdinand Malcher, Johannes Hoppe, Danny Koppenhagen: \"Angular: Grundlagen, fortgeschrittene Themen und Best Practices\" dpunkt.verlag, 2. Auflage, ISBN: 978-3-86490-646-6, 2019 Link entnommen (und nur unwesentlich ge\u00e4ndert). In der App soll eine Liste von B\u00fcchern angezeigt werden, f\u00fcr jedes einzelne Buch soll eine Detailansicht existieren und B\u00fccher k\u00f6nnen hinzugef\u00fcgt werden. Projekt anlegen \u00b6 Wir gehen wie in beschrieben vor. Wir wollen unsere App book-app nennen. ng new book-app Wir werden gefragt, ob wir Routing verwenden m\u00f6chten (Antwort: y ) und welches StyleSheet-Format wir verwenden (Antwort: CSS ): ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS Nachdem das Projekt erstellt wurde, wechseln wir im Terminal in das Verzeichnis book-app cd book-app und rufen darin npm install auf, um alle in package.json definierten Abh\u00e4ngigkeiten und Module einzubinden. Danach kann die Anwendung durch Eingabe von ng serve gestartet werden. \u00d6ffnen Sie den Browser und geben Sie als URL http://localhost:4200/ ein. Es erscheint die Angular-Projekt-Startseite (siehe auch Erstes Angular-Projekt erstellen ). \u00d6ffnen Sie nun noch in Ihrer IDE (z.B. IntelliJ IDEA ) das Projekt book-app , um Ihre Implementierungen durchzuf\u00fchren. Zun\u00e4chst k\u00fcmmern wir uns allerdings erst noch um das Aussehen des Projektes - um moderne, einheitliche Styles. CSS-Framework Semantic UI einbinden \u00b6 Es ist \u00fcblich, eines der bekannten Style-Frameworks (z.B. Bootstrap oder Material Design ) einzubinden. F\u00fcr die B\u00fccher-App soll daf\u00fcr Semantic UI verwendet werden. Geben Sie dazu im Terminal in dem book-app -Verzeichnis npm install semantic-ui-css ein. Durch diese Anweisung werden die ben\u00f6tigten Style-Dateien geladen und unter dem Ordner node_modules/semantic-ui-css gespeichert. Diese m\u00fcssen jetzt nur noch in das Projekt eingebunden werden. \u00d6ffnen Sie dazu in Ihrer IDE die Datei angular.json . Bei dieser Datei handelt es sich um eine JSON -Datei, die f\u00fcr die Konfiguration unserer Angular-Anwendung zust\u00e4ndig ist. In der angular.json -Datei \u00e4ndern wir unter \"projects\"\u2192\"book-app\"\u2192\"architect\"\u2192\"build\"\u2192\"options\"\u2192\"styles\" den Eintrag von \"styles\" : [ \"src/styles.css\" ] , auf \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , Die gleiche \u00c4nderung f\u00fchren wir in angular.json unter \"test\" (statt \"build\" ) durch, um die Styles auch beim Testen einzubeziehen. Also unter \"projects\"\u2192\"book-app\"\u2192\"architect\"\u2192\"test\"\u2192\"options\"\u2192\"styles\" ebenfalls nach \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , \u00e4ndern. Um zu testen, ob das Einbinden der Semantic-UI-Styles geklappt hat, \u00f6ffnen wir in der IDE die Datei app.component.html und l\u00f6schen darin alles bis auf <router-outlet></router-outlet> . Stattdessen geben wir davor ein (Listing zeigt auch <router-outlet></router-outlet> - also die dann vollst\u00e4ndige Datei app.component.html ): < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade B\u00fccher ... </ div > </ div > < router-outlet ></ router-outlet > Wir gestalten also das Template unserer App-Komponente als ein div im div . Beiden div s werden CSS-Klassen aus dem Semantic-UI-Framework zugeordnet (siehe z.B. Klasse loader ). Unsere Webseite sollte nun so aussehen: Success Der erste Teil unserer B\u00fccher-App ist erstellt! Wir haben eine Anwendung erstellt und diese aufgerufen. Wir haben ein CSS-Framework eingebunden und erste \u00c4nderungen am HTML-Code vorgenommen. Unter http://localhost:4200/ ist unsere Anwendung nun im Browser sichtbar und alle unseren zuk\u00fcnftigen \u00c4nderungen am Code werden automatisch (ohne erneuten Aufruf) der Seite dargestellt. Datenmodell und Daten \u00b6 Wir wollen Details (Daten) \u00fcber B\u00fccher speichern und verwenden dazu die JavaScript Object Notation (JSON) . Zun\u00e4chst wird Angular jedoch das dazugeh\u00f6rige Datenmodell bekannt gemacht. Dies geschieht mithilfe eines Interfaces . Wir erstellen ein solches Interface mithilfe der Angular CLI im Terminal (Sie sind im book-app -Verzeichnis): ng g interface shared/book Die obige Anweisung erstellt eine Datei book.ts im Ordner src/app/shared . Der shared - Ordner wird automatisch angelegt. In der obigen Anweisung steht g f\u00fcr generate ( h\u00e4tte man auch schreiben k\u00f6nnen ). In der IDE \u00f6ffnen wir die Datei book.ts . Sie enth\u00e4lt nur die Interface-Deklaration ohne Inhalt: export interface Book { } Wir implementieren das Interface wie folgt: export interface Book { isbn : string ; title : string ; authors : string []; published : Date ; subtitle ?: string ; rating ?: number ; thumbnails ?: Thumbnail []; description ?: string ; } export interface Thumbnail { url : string ; title ?: string ; } Das bedeutet, dass unser Datenmodell so aussieht, dass die Details \u00fcber ein Buch folgende Daten beinhalten: isbn , title , authors , published , subtitle , rating , thumbnails , description . Die Fragezeichen hinter den Bezeichnern geben an, dass die jeweilige Eigenschaft optional ist, d.h. dass ihr kein Wert zugeordnet werden muss. Die Eigenschaft thumbnail ist vom Typ Thumbnail -Array. Dieser Typ ist kein Standard-TypeScript-Typ, sondern von uns definiert. Thumbnail definieren wir ebenfalls als Interface, bestehend aus 2 Eigenschaften url und (optional) title . Die Definition dieses Interfaces erfolgt ebenfalls direkt in book.ts . Wir haben also 2 Interfaces diefiniert: Book und Thumbnail . Die Daten werden zun\u00e4chst direkt in eine neu zu erstellende Komponente zum Anzeigen der B\u00fccher-Liste eingebunden: B\u00fccherliste erstellen \u00b6 Zur Anzeige aller gespeicherten B\u00fccher erstellen wir eine neue Komponente book-list . Siehe dazu auch Angular \u2192 Eine neue Komponente erzeugen : ng generate component book-list Es ensteht ein neuer Ordner src/app/book-list , welcher die 4 Dateien: book-list.component.css book-list.component.html book-list.component.spec.ts book-list.component.ts enth\u00e4lt. In der IDE \u00f6ffnen wir zun\u00e4chst die book-list.component.html . Sie sieht so aus: < p > book-list works! </ p > Wir ersetzen den Inhalt vollst\u00e4ndig durch den folgenden HTML-Code: < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > </ a > </ div > Obiger Code enth\u00e4lt einige Strukturdirektiven (siehe Angular \u2192 *Strukturdirektiven )). So l\u00e4uft bspw. die *ngFor -Direktive in der zweiten Zeile durch die Liste books und erzeugt f\u00fcr jedes Buch aus der Liste books einen Hyperlink <a> . Diese existiert jedoch noch gar nicht, so dass unsere App sich derzeit nicht ausf\u00fchren l\u00e4sst. Die erste *ngIf -Direktive in der vierten Zeile pr\u00fcft zun\u00e4chst, ob das Array book.thumbnails \u00fcberhaupt existiert und wenn ja, ob dieses Array einen ersten Eintrag hat book.thumbnails[0] und wenn das der Fall ist, ob dieser erste Eintrag auch eine url enth\u00e4lt (siehe Interfaces Book und Thumbnail ). Wenn diese url existiert, wird durch ein Property-Binding (siehe Angular \u2192 [Property Binding] ) dem src -Attribut von <a> der Wert zugeordnet, der unter book.thumbnails[0].url im JSON gespeichert ist. Die Liste der Autoren eines Buches wird ebenfalls mithilfe der Strukturdirektive *ngFor durchlaufen. Au\u00dferdem findet die Hilfsvariable last dieser Strukturdirektive Anwendung (siehe Angular \u2192 *Strukturdirektiven )). Alle Autoren werden durch Komma getrennt. Nur nach dem letzten Autor wird kein Komma hinzugef\u00fcgt. Dies gelingt mithilfe der Strukturdirektive *ngIf und der Abfrage, ob es sich nicht um das letzte Element handelt - dann Komma. Wir ben\u00f6tigen jetzt f\u00fcr unsere Komponente noch die Liste der B\u00fccher - ein Book -Array. Dieses legen wir in der Datei book-list.component.ts an. Wir \u00f6ffnen diese Datei - sie sieht wie folgt aus: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { constructor () { } ngOnInit () : void { } } Die (TypeScript-)Klasse BookListComponent enth\u00e4lt zwei Methoden: den Konstruktor constructor() { } ngOnInit(): void { } ngOnInit() ist eine Methode aus dem Interface OnInit . Dabei handelt es sich um einen sogenannten Lifecycle-Hook (siehe Angular \u2192 Lifecycle-Hooks ). Die Methode ngOnInit() wird immer dann (automatisch) ausgef\u00fchrt, wenn die Komponente geladen wird. Wir ersetzen den bisherigen Code der Datei book-list.component.ts durch: import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; constructor () { } ngOnInit () : void { this . books = [ { isbn : '9783864906466' , title : 'Angular' , authors : [ 'Ferdinand Malcher' , 'Johannes Hoppe' , 'Danny Kopenhagen' ], published : new Date ( 2019 , 4 , 30 ), subtitle : 'Grundlagen, fortgeschrittene Techniken und Best Practices - mit NativeScript und NgRx' , rating : 5 , thumbnails : [{ url : 'https://ng-buch.de/cover2.jpg' , title : 'Buchcover' }], description : 'Die Autoren f\u00fchren Sie mit einem anspruchsvollen Beispielprojekt durch die Welt von Angular...' , }, { isbn : '9783864903274' , title : 'React' , authors : [ 'Oliver Zeigermann' , 'Nils Hartmann' ], published : new Date ( 2016 , 6 , 17 ), subtitle : 'Die praktische Einf\u00fchrung in React, React Router und Redux' , rating : 3 , thumbnails : [{ url : 'https://ng-buch.de/cover1.jpg' , title : 'Buchcover' }], description : 'React ist ein JavaScript-Framework zur Entwicklung von Benutzeroberfl\u00e4chen ...' , }, { isbn : '978-3-86490-578-0' , title : 'Effective Java' , authors : [ 'Joshua Bloch' ], published : new Date ( 2018 , 9 , 1 ), subtitle : 'Best Practices f\u00fcr die Java-Plattform' , rating : 3 , thumbnails : [{ url : 'https://www.dpunkt.de/common/images/cover_masterid/300/13216.jpg' , title : 'Buchcover' }], description : 'Seit der Vorauflage von \\\"Effective Java\\\" hat sich Java dramatisch ver\u00e4ndert...' , } ]; } } Somit existiert die Eigenschaft books f\u00fcr die Komponente nun (siehe books: Book[] ). Auf diese Eigenschaft kann innerhalb der Klasse mit this.books zugegriffen werden. Dies passiert auch in der ngOnInit() -Methode. Dort wird das Array mit Daten bef\u00fcllt (mit zun\u00e4chst 3 B\u00fcchern). Die Syntax entspricht der JavaScript Object Notation (JSON) . Damit unsere Komponente \u00fcberhaupt sichtbar ist, binden wir sie noch in unsere Root-Komponente ein. Der Selektor unserer book-list -Komponente ist app-book-list . Wir binden diesen Selektor als HTML-Element in app.component.html ein. app.component.html (alt) < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade B\u00fccher ... </ div > </ div > < router-outlet ></ router-outlet > app.component.html (neu) < app-book-list ></ app-book-list > < router-outlet ></ router-outlet > Die App ist nun ausf\u00fchrbar. Im Browser erscheint folgende Darstellung: Success Der zeite Teil unserer B\u00fccher-App ist erstellt! Wir haben zwei Interfaces ( Book und Thumbnail ) und eine neue Komponente ( book-list ) erstellt. Wir haben Direktiven verwendet ( *ngFor und *ngIf ), um durch Daten zu man\u00f6vrieren und diese entsprechend darszustellen. Wir haben Daten im JSON-Format gespeichert. Datenfluss zwischen Komponenten \u00b6 In diesem Abschnitt wird der Datenfluss von Eltern- auf Kindkomponenten und von Kind- auf Elternkomponenten betrachtet. Letzteres erreicht man \u00fcber event binding (siehe Angular\u2192Event Binding ). Wir betrachten zun\u00e4chst den Datenfluss von Eltern- auf Kindkomponenten. Das grundlegende Prinzip dabei ist das property binding (siehe dazu Angular \u2192 [Property Bindings] ). Datenfluss von Eltern- auf Kindkomponenten \u00b6 Wir legen uns dazu zun\u00e4chst eine weitere Komponente in unserer B\u00fccher-App an - die Komponente book-list-item . Sie ist daf\u00fcr zust\u00e4ndig, die Informationen \u00fcber ein einzelnes Buch im Detail anzuzeigen. Wir werden zu dieser Detailansicht gelangen, indem wir ausgehend von der Liste der B\u00fccher auf ein einzelnes Buch klicken - dieses wird dann im Detail angezeigt. Wechseln Sie im Terminal in den Ordner Ihrer B\u00fccher-App book-app und geben dort zum Erzeugen der neuen Komponente ein: ng g c book-list-item Im Ordner book-app/src/app entsteht eine neue Komponente (ein neuer Ordner) book-list-item mit den Dateien book-list-item.component.ts , book-list-item.component.html , book-list-item.component.css und book-list-item.component.spec.ts . Wir kopieren zun\u00e4chst den Teil aus der book-list.component.html in die book-list-item.component.html , der die Details eines Buches anzeigt. Im folgenden Tab sind jeweils die *.component.html gemeint. book-list (alt) < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > </ a > </ div > book-list-item < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > book-list (neu - zun\u00e4chst) < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > <!-- dieses Anchorelement (Hyperlink <a>) wird gleich ge\u00e4ndert aber die Direktive *ngFor bleibt --> </ a > </ div > Nachdem wir den oben gelb unterlegten Teil nach book-list-item.component.html geschoben haben, f\u00e4llt auf, dass die Variable book in der Komponente book-list-item (noch) unbekannt ist. Dies wird nun ge\u00e4ndert. Zun\u00e4chst \u00e4ndern das HTML-Element, das uns die Details eines Buches anzeigen soll von <a> nach <app-book-list-item> - das ist der Selektor unserer neuen Komponente. book-list.component.html 1 2 3 4 5 6 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" > </ app-book-list-item > </ div > In Zeile 2 erkennt man die Verwendung des Selektors app-book-list-item , hier erfolgt der \"Aufruf\" unserer neuen Komponente. In Zeile 3 wird die bereits bekannte Direktive *ngFor angewendet (siehe Angular\u2192*Strukturdirektiven ), mit der wir durch unser Array von B\u00fcchern ( Book[] ) laufen. In Zeile 4 findet nun das property binding statt (siehe Angular \u2192 [Property Bindings] )). Der Eigenschaft book wird jeweils der Wert der Variable b \u00fcbergeben. Das bedeutet, dass wir in der Elternkomponente book-list die Kindkomponente book-list-item aufrufen und in der Elternkomponente einer Eigenschaft der Kindkomponente book einen Wert zuweisen. Es erfolgt also ein Datenfluss von der Elternkoponente zur Kindkomponente unter Verwendung von property binding . Es fehlt nur noch zwei Sachen: die Eigenschaft book (vom Typ Book ) muss noch als Eigenschaft (Objektvariable) der Komponente book-list-tem deklariert werden. es muss mithilfe des Decorators @Input() aggeben werden, dass die Werte (Daten) f\u00fcr diese Eigenschaft \"in die Komponente hineinflie\u00dfen\". Beides erreichen wir durch \u00c4nderungen der Datei book-list-item.component.ts wie folgt: book-list-item.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , Input , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list-item' , templateUrl : './book-list-item.component.html' , styleUrls : [ './book-list-item.component.css' ] }) export class BookListItemComponent implements OnInit { @ Input () book : Book ; constructor () { } ngOnInit () : void { } } Wesentlich ist die Zeile 10. Dort sehen Sie die Deklaration der Eigenschaft book: Book und die Verwendung der Directive @Input() . Sowohl das Interface Book als auch die Directive @Input m\u00fcssen noch eingebunden werden (Zeilen 1 und 2). Lassen Sie dies am besten Ihre IDE erledigen. Gehen Sie mit der Maus \u00fcber die rot dargestellten Bezeichner ( Book und @Input() ) und w\u00e4hlen Sie jeweils den automatischen Korrekturvorschlag aus. Success Der dritte Teil unserer B\u00fccher-App ist erstellt! Leider hat sich in der Ansicht nichts ge\u00e4ndert. Zwar wissen wir jetzt, wie der Datenfluss von Eltern- auf Kindkomponenten erfolgt (n\u00e4mlich mit property binding und der Deklaration der Eigenschaft (property) mithilfe des @Input() -Decorators). Aber der Wechsel der Ansicht ist noch nicht realisiert. Dieser soll durch ein Ereignis ausgel\u00f6st werden, n\u00e4mlich wenn wir auf eines der B\u00fccher aus der Liste klicken. Die Behandlung von Ereignissen ( event binding ) ist Thema des n\u00e4chsten Abschnittes. Datenfluss von Kind- auf Elternkomponenten \u00b6 Der Datenfluss von Kind- auf Elternkomponenten kann mithilfe von event binding organisiert werden (siehe dazu Angular\u2192Eigene Ereignisse ). Wir werden eine BookDetailsComponent erzeugen. Diese zeigt die Details eines Buches. In unserer BookListComponent definieren wir ein Ereignis, das diese Detail-Ansicht aufruft und dabei das entsprechende Buch \u00fcbergibt. In der BookDetailsComponent definieren wir ein Ereignis, das die Listendarstellung aller B\u00fccher wieder aufruft. Wir erzeugen zun\u00e4chst die BookDetailsComponent : ng g c book-details Wir planen folgende Kommunikation zwischen den Komponenten (Abbildung ebenfalls aus eingangs erw\u00e4hntem Buch ): Wir erweitern zun\u00e4chst die Komponente AppComponent um zwei weitere Eigenschaften: book vom Typ Book (die Daten eines Buches sollen ja an die Komponente BookDetailsComponent mithilfe von property binding weitergegeben werden) und einen viewState , der zwischen den beiden Ansichten BookList und BookDetails umschalten soll. Dazu vereinbaren wir einen neuen Typ ViewState , der 2 verschiedene Werte annehmen kann list und details . Die neue app.component.ts sieht dann so aus: app.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { Component } from '@angular/core' ; import { Book } from './shared/book' ; type ViewState = 'list' | 'details' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { book : Book ; viewState : ViewState = 'list' ; showList () { this . viewState = 'list' ; } showDetails ( book : Book ) { this . book = book ; this . viewState = 'details' ; } } Neben den beiden Eigenschaften book und viewState ( viewState ist vom Typ ViewState - dieser wurde in Zeile 5 erstellt) wurde auch zwei Methoden hinzugef\u00fcgt: showList() und showDetails(book: Book) . showList() wird von der Kindkomponente BookDetailsComponent als Ereignis aufgerufen ( event binding ). showDetails() wird von der Kindkomponente BookListComponent als Ereignis aufgerufen und liefert als payload des Ereignisses die Informationen \u00fcber das Buch mit, auf das innerhalb der Liste geklickt wurde (siehe auch Angular\u2192Eigene Ereignisse ). Die beiden Methoden schalten jeweils zwischen den viewState s um. Im Template der AppComponent wird mittels der *ngIf -Direktive zwischen den Ansichten der beiden Komponenten BookDetailsComponent und BookListeComponent umgeschaltet, je nachdem, welcher Wert viewState aufweist: app.component.html 1 2 3 4 5 6 7 8 9 10 < app-book-list * ngIf = \"viewState === 'list'\" ( showDetailsEvent )=\" showDetails ($ event )\" ></ app-book-list > < app-book-details * ngIf = \"viewState === 'details'\" ( showListEvent )=\" showList ()\" [ book ]=\" book \" ></ app-book-details > < router-outlet ></ router-outlet > Die beiden Events showDetailsEvent und showListEvent der beiden Komponenten BookListComponent bzw. BookDetailsComponent sind noch nicht in den jeweiligen Komponenten angelegt, ebenso noch nicht die Eigenschaft book in der BookDetailsComponent . Das machen wir jetzt in beginnen mit der BookListComponent . In der BookListComponent soll ein eigenes Event ( showDetailsEvent ) definiert werden. Wir gehen dazu vor, wie in Angular\u2192Eigene Ereignisse beschrieben. Wichtig ist, dass wir einen payload des Events \u00fcbergeben, n\u00e4mlich das jeweilige Buch auf das geklickt wurde. Dieser payload wird in der Methode showDetails($event) der AppComponent verarbeitet. Wir \u00f6ffnen die book-list.component.ts und f\u00fcgen hinzu : Caution Achten Sie darauf, dass Sie nur den Teil hinzuf\u00fcgen, der noch nicht in Ihrer book-list.component.ts enthalten ist. Diese Datei ist durch das JSON schon recht lang. Es kommen nur die Zeilen 8 und 14-16 hinzu und in der ersten Zeile werden EventEmitter und Output aus @angular/core importiert! book-list.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ /* bleibt wie es ist */ }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor () { } ngOnInit () : void { /* bleibt wie es ist */ } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Im Template der BookListComponent kommt nur ein event binding hinzu. Wir binden das native DOM-Ereignis click an die Ereignisbehandlung showDetails() und \u00fcbergeben dabei als payload das entsprechende Buch b . Das bedeutet, dass jetzt jedes einzelne BookItem (es gibt f\u00fcr jedes Buch eine eigens BookItem - siehe *ngFor ) ein Click-Ereignis existiert. Klicken wir also auf einen Eintrag in unserer BookList , dann wird das showDetails() -Ereignis ausgel\u00f6st, das entsprechende Buch als payload \u00fcbergeben und an die AppComponent weitergereicht, die dann auf die BookDetails -Ansicht umschaltet. Die um diese eine Zeile (Zeile 5) erweiterte book-list.component.html sieht nun so: book-list.component.html 1 2 3 4 5 6 7 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" ( click )=\" showDetails ( b )\" > </ app-book-list-item > </ div > Reflexion Wir sehen in dem obigen kleinen Beispiel book-list.component.html sehr sch\u00f6n vier Konzepte: 1. die Komponente BookListComponent ruft die Komponente BookListItemComponent auf. Damit ist BookListComponent eine Elternkomponente der Kindkomponente BookListItemComponent (Zeile 2). 2. der Einsatz der Direktive *ngFor . F\u00fcr jeden einzelnen Eintrag aus dem Array books wird ein neues HTML-Element <app-book-list-item> erzeugt. 3. Ein property binding , bei der der Ausdruck \"b\" and die Eigenschaft book gebunden wird und 4. ein event binding , bei der wir die Ereignisbehandlung showDetails(b) an das native DOM-Element click binden. Jetzt k\u00fcmmern wir uns noch um unsere neue Komponente BookDetailsComponent . Zwei Konzepte kennen wir bereits: definieren wir uns eine Eigenschaft book , deren Wert wir als @Input() von der Elternkomponente AppComponent erhalten (siehe dazu Datenfluss von Eltern- auf Kindkomponenten ). definieren wir uns ein eigenes Ereignis, welches an die Elternkomponente AppComponent weitergereicht wird (siehe dazu book-list.component.ts oben) Es wird noch eine dritte Kleinigkeit eingef\u00fcgt: eine Methode getRating(number) , die f\u00fcr eine gegebene Zahl ein Array der \u00fcbergebenen L\u00e4nge zur\u00fcckgibt. Wir werden im Template sehen, was es damit auf sich hat. Die book-details.component.ts sieht dann wie folgt aus: book-details.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { Component , EventEmitter , Input , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } Das zugeh\u00f6rige Template ist recht umfangreich. Wir gehen auf einzelne Details ein, zeigen es aber zun\u00e4chst: book-details.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < div * ngIf = \"book\" > < h1 > {{ book.title }} </ h1 > < h3 * ngIf = \"book.subtitle\" > {{ book.subtitle }} </ h3 > < div class = \"ui divider\" ></ div > < div class = \"ui grid\" > < div class = \"four wide column\" > < h4 > Autoren </ h4 > < ng-container * ngFor = \"let author of book.authors\" > {{ author }} < br > </ ng-container > </ div > < div class = \"four wide column\" > < h4 > ISBN </ h4 > {{ book.isbn }} </ div > < div class = \"four wide column\" > < h4 > Erschienen </ h4 > {{ book.published }} </ div > < div class = \"four wide column\" > < h4 > Rating </ h4 > < i class = \"yellow star icon\" * ngFor = \"let r of getRating(book.rating)\" ></ i > </ div > </ div > < h4 > Beschreibung </ h4 > < p > {{ book.description }} </ p > < div class = \"ui small images\" > < img * ngFor = \"let thumbnail of book.thumbnails\" [ src ]=\" thumbnail . url \" > </ div > < button class = \"ui red button\" ( click )=\" showBookList ()\" > Zur\u00fcck zur Buchliste </ button > </ div > Die Detailansicht sollte dann etwa so aussehen: Success Der vierte Teil unserer B\u00fccher-App ist erstellt! Wir wissen jetzt, wie wir Ereignisse behandeln und sogar eigene Ereignisse erstellen k\u00f6nnen und wie wir mit diesen eigenen Ereignissen und event bining Daten an die Elternklasse \u00fcbergeben k\u00f6nnen. Damit k\u00f6nnen wir jetzt sowohl von Eltern- nach Kindklassen als auch zur\u00fcck Daten transferieren und durch Ereignisse zwischen verschiedenen Komponenten hin- und herwechseln. F\u00fcr viele Komponenten und eine tiefe Verschachtelung ist die Komplexit\u00e4t jedoch mit diesen Konzepten zu hoch. Wir lernen zwei weitere Konzepte kennen, die uns helfen, diese Komplexit\u00e4t zu meistern: Services und Routing . Service BookStoreService \u00b6 Derzeit ist die Liste (genauer: das Array) unserer B\u00fccher statisch als JSON innerhalb der Komponente BookListComponent gespeichert (siehe in ngOnInit() this.books = [ ... ] ). Die BookListComponent verwaltet somit die B\u00fccher und stellt diese auch noch als Liste dar. Wir wollen die Darstellung unabh\u00e4ngig von der \"Datenspeicherung\" gestalten und die Datenverwaltung (Speicherung und Bereitstellung) in einen Service auslagern (siehe Angular\u2192Services ). Um einen Service mithilfe der CLI anzulegen (zu generieren), verwenden wir das Attribut service anstelle von component . Au\u00dferdem ist es guter Stil, Services in den shared -Ordner abzulegen, da ja alle Komponenten einen Service nutzen k\u00f6nnen. Wir erzeugen einen Service BookStoreService : ng g service shared/book-store Nach der Erzeugung sieht der Service zun\u00e4chst so aus: book-store.service.ts import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { constructor () { } } F\u00fcr Services gibt es keine Lifecycle-Hooks. Wir finden hier deshalb auch keine ngOnInit() -Methode. W\u00e4hrend Komponenten den Decorator @Component() aufweisen, wird f\u00fcr Services der Decorator @Injectable() verwendet. Mit diesem Decorator geben wir an, dass der Service weitere Abh\u00e4ngigkeiten einbinden kann. Dies geschieht typischerweise \u00fcber einen Parameter im Konstruktor - eine soganannte dependency injection (wenn \u00fcber den Konstruktor, dann constructor injection ). Auch wenn wir eine solche Abh\u00e4ngigkeit nicht einbinden, sollte der Decorator @Injectable() stets f\u00fcr einen Service angegeben werden. Dies liegt daran, dass wir diesen Decorator um die providedIn -Eigenschaft erweitern. Mit providedIn: 'root' geben wir an, dass der Service allen Komponenten (im gesamten Root-Modul) zur Verf\u00fcgung steht, er also von allen Komponenten genutzt werden kann. In unseren Service integrieren wir nun folgende Eigenschaften: das Book -Array books aus der BookListComponent und die Methode getAll() , die dieses Array zur\u00fcckgibt, also alle B\u00fccher aus dem Array books . book-store.service.ts import { Injectable } from '@angular/core' ; import { Book } from './book' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { books : Book []; constructor () { this . books = [ { isbn : '9783864906466' , /* das gesamte Array aus book-list.component.ts hier her bewegen */ }, } getAll () : Book [] { return this . books ; } } book-list.component.ts import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor () { } ngOnInit () : void { } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Es wurde also die gesamte Wertebelegung f\u00fcr this.books mit dem JSON von der Datei book-list.component.ts (dort aus ngOnInit() ) nach book-store.service.ts (hier in den Konstruktor constructor() - Liefecycle-hooks gibt es f\u00fcr Services ja nicht) verschoben. Dazu wurde dem Service die Eigenschaft books hinzugef\u00fcgt (Typ Book[] - das Interface Book muss dazu importiert werden). Au\u00dferdem wurde in dem Service die Methode getAll() implementiert. Nun kann der Service in der BookListComponent verwendet werden. Dazu werden der BookService importiert, der BookService mittels dependency injection ( constructor injection ) in die Komponente eingebunden und die Methode getAll() des Services aufgerufen, um die Eigenschaft this.books mit dem Book -Array zu initialisieren. book-list.component.ts import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; import { BookStoreService } from '../shared/book-store.service' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor ( private bs : BookStoreService ) { } ngOnInit () : void { this . books = this . bs . getAll (); } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Beachten Sie, dass die dependency injection des Services dazu f\u00fchrt, dass bs eine Eigenschaft der BookListComponent ist, ohne dass diese Eigenschaft explizit deklariert wird. In ngOnInit() wird \u00fcber this.bs auf den Service zugegriffen. Die Anwendung sieht zwar genauso aus wie vorher, aber wir haben die BookListComponent davon entlastet, das B\u00fccher-Array speichern zu m\u00fcssen. Diesen Dienst haben wir in einen Service augelagert, der au\u00dferdem noch die Methode getAll() zur Verf\u00fcgung stellt, mit dem das gesamte B\u00fccher-Array zur\u00fcckgegeben wird. Success Der f\u00fcnfte Teil unserer B\u00fccher-App ist erstellt! Die Anwendung sieht zwar genauso aus wie vorher, aber wir haben die BookListComponent davon entlastet, das B\u00fccher-Array speichern zu m\u00fcssen. Diesen Dienst haben wir in einen Service augelagert, der au\u00dferdem noch die Methode getAll() zur Verf\u00fcgung stellt, mit dem das gesamte B\u00fccher-Array zur\u00fcckgegeben wird. Nun wollen wir mithilfe von Routing besser durch unsere Anwendung navigieren. Routing \u00b6 Derzeit hat unsere App zwei Sichten: einerseits die Listenansicht aller B\u00fccher (Template der BookListComponent , wobei jede Zeile der Liste/jedes Buch durch das Template der BookListItemComponent dargestellt wird) und die Detailansicht eines Buches (Template der BookDetailsComponent ). Zwischen diesen Sichten ( views ) wechseln wir durch Nutzereignisse hin- und her. Von der Listenansicht auf die Detailansicht kommen wir durch Anklicken einer Buchzeile und zur\u00fcck kommen wir durch Klicken des Buttons \"Zur\u00fcck zur Buchliste\". Unsere URL bleibt jedoch immer gleich, n\u00e4mlich localhost:4200 . Ein direkter Zugriff auf die Detailansicht eines Buches ist nicht m\u00f6glich, sondern erfolgt immer \u00fcber die Listenansicht. Dies soll im folgenden ge\u00e4ndert werden. Zum Beispiel k\u00f6nnte die Detailansicht des Buches mit der ISBN 9783864906466 mithilfe der URL localhost:4200/books/9783864906466 erfolgen. Eine solche URL h\u00e4tte auch den Vorteil, dass man diese URL an andere versenden k\u00f6nnte, um auf ein konkretes Buch aufmerksam zu machen. Zur Erstellung solcher Pfade wird das Konzept des Routings in Angular verwendet (siehe Angular \u2192 Routing ). Wir erweitern unsere B\u00fccher-App zun\u00e4chst um eine weitere Komponente home . ng g c home Routen konfigurieren \u00b6 In der app-routing.module.ts werden wir 4 Routen konfigurieren: /home zeigt die HomeComponent / wird auf die /home -Route umgeleitet, zeigt also ebenfalls auf die HomeComponent /books zeigt auf die BookListComponent /books/:isbn zeigt auf die BooksDetailsComponent f\u00fcr das entsprechende Buch mit der isbn des Parameterwertes app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { HomeComponent } from './home/home.component' ; import { BookDetailsComponent } from './book-details/book-details.component' ; import { BookListComponent } from './book-list/book-list.component' ; const routes : Routes = [ { path : '' , redirectTo : 'home' , pathMatch : 'full' }, { path : 'home' , component : HomeComponent }, { path : 'books' , component : BookListComponent }, { path : 'books/:isbn' , component : BookDetailsComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } app.component.html < router-outlet ></ router-outlet > Die app.component.html enth\u00e4lt nun nur noch das <router-outlet></router-outlet> -Element. Wenn wir nun http://localhost:4200 aufrufen, werden wir zu http://localhost:4200/home umgeleitet und es erscheint die View der HomeComponent ( home works! ). Wir k\u00f6nnen aber auch http://localhost:4200/books eingeben und es erscheint die View der BookListComponent , also die gesamte Liste unserer B\u00fccher. Parametrisierte Route auslesen \u00b6 Wenn wir z.B. http://localhost:4200/books/9783864906466 aufrufen, also eine ISBN \u00fcbergeben, bleibt die angezeigte Seite der BookDetailsComponent leer. Das liegt daran, dass die in der URL \u00fcbergebene ISBN noch nicht verwaltet wird, um das entsprechende Buch herauszusuchen und anzuzeigen. Dazu erweitern wir zun\u00e4chst den BookStoreService : Caution Achten Sie darauf, dass Sie nur den Teil hinzuf\u00fcgen, der noch nicht in Ihrer book-store.service.ts enthalten ist. Diese Datei ist durch das JSON schon recht lang. Es kommen nur die Zeilen 18-20 hinzu! shared/book-store.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Injectable } from '@angular/core' ; import { Book } from './book' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { books : Book []; constructor () { this . books = [ /* alle Eintr\u00e4ge */ ]; } getAll () : Book [] { return this . books ; } getSingle ( isbn : string ) : Book { return this . books . find ( book => ( book . isbn === isbn )); } } Wir m\u00fcssen nun noch die ISBN auslesen, die in der URL \u00fcbergeben wird. Das Auslesen von Parameterwerten aus URLs ist in Angular \u2192 Parameter an Routen beschrieben. Dazu wird book-details.component.ts wie folgt erweitert : ActivatedRoute wird importiert und dem Konstruktor injiziert, um mithilfe von route.snapshot.paramMap die aktuellen Werte der in der URL \u00fcbergebenen Parameter abzufragen. Der BookStoreService wird importiert und dem Konstruktor injiziert, um auf das Array aller B\u00fccher, insbesondere aber auf die getSingle(isbn: string) -Funktion zuzugreifen, die das Buch mit der \u00fcbergebenen isbn zur\u00fcckgibt. Daf\u00fcr entfallen einige Sachen aus der book-details.component.ts : Wir wechseln die Ansichten nicht mehr durch ein Ereignis, sondern \u00fcberlassen dies dem Router. Deshalb entfernen wir die @Output() -Eigenschaft showListEvent und die Methode showBookList() . Das ausgew\u00e4hlte Buch gelangt nun nicht mehr \u00fcber property binding in das Template, sondern \u00fcber die Eigenschaft this.book (die ihren Wert von der Methode getSingle() des BookStoreService erh\u00e4lt). Wir k\u00f6nnen deshalb auch den @Input() -Decorator von book: Book entfernen. book-details.component.ts (neu) import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } book-details.component.ts (alt) import { Component , EventEmitter , Input , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } In der book-details.component.html wird der Button entfernt, also der folgende Teil gel\u00f6scht: < button class = \"ui red button\" ( click )=\" showBookList ()\" > Zur\u00fcck zur Buchliste </ button > Success Jetzt wird die Detail-Ansicht eines jeden Buches angezeigt, wenn Sie eine existierende isbn \u00fcbergeben. Also z.B. http://localhost:4200/books/9783864906466 (oder http://localhost:4200/books/9783864903274 oder http://localhost:4200/books/978-3-86490-578-0 ). Bei einer nicht existierenden isbn (z.B. http://localhost:4200/books/123 ) bleibt die Seite leer. Routen verlinken \u00b6 Derzeit m\u00fcssen wir die Routen noch jeweils als URL in den Browser eingeben. Wir wollen uns nun ein Navigationsmen\u00fc erzeugen, in dem wir die jeweiligen Routen als Links hinterlegen und somit \u00fcber Klicks die jeweiligen Komponenten aufrufen. Das prinzipielle Vorgehen ist in Angular \u2192 Routen verlinken beschrieben. Unsere Navigationsleiste f\u00fcgen wir am besten in die AppComponent ein, damit sie immer sichtbar bleibt. app.component.html < div class = \"ui menu\" > < a routerLink = \"home\" class = \"item\" > Home </ a > < a routerLink = \"books\" class = \"item\" > B\u00fccher </ a > </ div > < router-outlet ></ router-outlet > Jetzt binden wir in unserer Listen-Ansicht aller B\u00fccher noch die isbn -Eigenschaft an die routerLink -Property, um ein konkretes Buch mit der entsprechenden isbn auszuw\u00e4hlen. Wir passen dazu die book-list.component.html wie folgt an: book-list.component.html 1 2 3 4 5 6 7 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" [ routerLink ]=\" b . isbn \" > </ app-book-list-item > </ div > Das click -Ereignis wird nun also nicht mehr ben\u00f6tigt und behandelt. Stattdessen binden wir mit property binding die isbn als Pfad an die Eigenschaft routerLink . Der Pfad ergibt sich somit aus der aktuellen Komponente ( /books ) und der isbn des Buches, auf das wir klicken. Daraus ergibt sich der Pfad /books/isbn ( isbn wird durch den konkreten String ersetzt). Wir erweitern noch das Template der HomeComponent um einen Button, mit dem wir zur B\u00fccherliste kommen: home.component.html 1 2 3 4 5 6 < h1 > Home </ h1 > < p > Herzlich willkommen zur B\u00fccher-App! </ p > < a routerLink = \"../books\" class = \"ui red button\" > B\u00fccherliste anzeigen < i class = \"right arrow icon\" ></ i > </ a > Der Pfad ../books ist releativ zur HomeComponent , also erst \"raus\" aus /home und dann nach /books . Aktive Links stylen und aufr\u00e4umen \u00b6 Den jeweils aktiven Men\u00fcpunkt werden wir nun noch farbig gestalten, damit wir am Men\u00fc erkennen, wo wir uns in unserer Anwendung gerade befinden. Wir gehen vor wie in Angular \u2192 Styles f\u00fcr aktive Routen beschrieben und nutzen die CSS-Klasse active des Semantic-UI-CSS-Frameworks . Wir f\u00fcgen also zwei Mal routerLinkActive=\"active\" in unsere app.component.html ein: app.component.html 1 2 3 4 5 < div class = \"ui menu\" > < a routerLink = \"home\" routerLinkActive = \"active\" class = \"item\" > Home </ a > < a routerLink = \"books\" routerLinkActive = \"active\" class = \"item\" > B\u00fccher </ a > </ div > < router-outlet ></ router-outlet > In unserer Navigationsleiste ist nun das jeweilige Element grau hinterlegt, je nachdem, wo wir uns befinden. Wir r\u00e4umen in unseren Komponenten noch ein wenig auf: in BookDetailsComponent haben wir bereits showListEvent , showBookList() , @Input() -Decorator und die entsprechenden Importe ( Input , Output und EventEmitter ) gel\u00f6scht in BookListComponent l\u00f6schen wir showDetailsEvent , showDetails() und die entsprechenden Importe ( Output und EventEmitter ) in AppComponent l\u00f6schen wir book , viewState , showList() , showDetails() und den Typ ViewState sowie den Import f\u00fcr Book book-details.component.ts import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } book-list.component.ts import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; import { BookStoreService } from '../shared/book-store.service' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; constructor ( private bs : BookStoreService ) { } ngOnInit () : void { this . books = this . bs . getAll (); } } app.component.ts import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { } Success Der sechste Teil unserer B\u00fccher-App ist erstellt! Wir haben unsere Anwendung um ein Routing erg\u00e4nzt. Wir k\u00f6nnen Routen konfigurieren, parametrisierte Routen auslesen, Routen verlinken und aktive Links stylen. Die Zust\u00e4nde unserer Anwendung werden nun \u00fcber lesbare URL-Pfade abgebildet. RouterOutlets sind Platzhalter f\u00fcr die zu ladenden Komponenten. Kindkomponenten werden in das RouterOutlet der Elternkomponente geladen. Routen lassen sich so verschachteln.","title":"B\u00fccher-App"},{"location":"books/#bucher-app","text":"Das folgende Beispiel ist dem Buch Ferdinand Malcher, Johannes Hoppe, Danny Koppenhagen: \"Angular: Grundlagen, fortgeschrittene Themen und Best Practices\" dpunkt.verlag, 2. Auflage, ISBN: 978-3-86490-646-6, 2019 Link entnommen (und nur unwesentlich ge\u00e4ndert). In der App soll eine Liste von B\u00fcchern angezeigt werden, f\u00fcr jedes einzelne Buch soll eine Detailansicht existieren und B\u00fccher k\u00f6nnen hinzugef\u00fcgt werden.","title":"B\u00fccher-App"},{"location":"books/#projekt-anlegen","text":"Wir gehen wie in beschrieben vor. Wir wollen unsere App book-app nennen. ng new book-app Wir werden gefragt, ob wir Routing verwenden m\u00f6chten (Antwort: y ) und welches StyleSheet-Format wir verwenden (Antwort: CSS ): ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS Nachdem das Projekt erstellt wurde, wechseln wir im Terminal in das Verzeichnis book-app cd book-app und rufen darin npm install auf, um alle in package.json definierten Abh\u00e4ngigkeiten und Module einzubinden. Danach kann die Anwendung durch Eingabe von ng serve gestartet werden. \u00d6ffnen Sie den Browser und geben Sie als URL http://localhost:4200/ ein. Es erscheint die Angular-Projekt-Startseite (siehe auch Erstes Angular-Projekt erstellen ). \u00d6ffnen Sie nun noch in Ihrer IDE (z.B. IntelliJ IDEA ) das Projekt book-app , um Ihre Implementierungen durchzuf\u00fchren. Zun\u00e4chst k\u00fcmmern wir uns allerdings erst noch um das Aussehen des Projektes - um moderne, einheitliche Styles.","title":"Projekt anlegen"},{"location":"books/#css-framework-semantic-ui-einbinden","text":"Es ist \u00fcblich, eines der bekannten Style-Frameworks (z.B. Bootstrap oder Material Design ) einzubinden. F\u00fcr die B\u00fccher-App soll daf\u00fcr Semantic UI verwendet werden. Geben Sie dazu im Terminal in dem book-app -Verzeichnis npm install semantic-ui-css ein. Durch diese Anweisung werden die ben\u00f6tigten Style-Dateien geladen und unter dem Ordner node_modules/semantic-ui-css gespeichert. Diese m\u00fcssen jetzt nur noch in das Projekt eingebunden werden. \u00d6ffnen Sie dazu in Ihrer IDE die Datei angular.json . Bei dieser Datei handelt es sich um eine JSON -Datei, die f\u00fcr die Konfiguration unserer Angular-Anwendung zust\u00e4ndig ist. In der angular.json -Datei \u00e4ndern wir unter \"projects\"\u2192\"book-app\"\u2192\"architect\"\u2192\"build\"\u2192\"options\"\u2192\"styles\" den Eintrag von \"styles\" : [ \"src/styles.css\" ] , auf \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , Die gleiche \u00c4nderung f\u00fchren wir in angular.json unter \"test\" (statt \"build\" ) durch, um die Styles auch beim Testen einzubeziehen. Also unter \"projects\"\u2192\"book-app\"\u2192\"architect\"\u2192\"test\"\u2192\"options\"\u2192\"styles\" ebenfalls nach \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , \u00e4ndern. Um zu testen, ob das Einbinden der Semantic-UI-Styles geklappt hat, \u00f6ffnen wir in der IDE die Datei app.component.html und l\u00f6schen darin alles bis auf <router-outlet></router-outlet> . Stattdessen geben wir davor ein (Listing zeigt auch <router-outlet></router-outlet> - also die dann vollst\u00e4ndige Datei app.component.html ): < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade B\u00fccher ... </ div > </ div > < router-outlet ></ router-outlet > Wir gestalten also das Template unserer App-Komponente als ein div im div . Beiden div s werden CSS-Klassen aus dem Semantic-UI-Framework zugeordnet (siehe z.B. Klasse loader ). Unsere Webseite sollte nun so aussehen: Success Der erste Teil unserer B\u00fccher-App ist erstellt! Wir haben eine Anwendung erstellt und diese aufgerufen. Wir haben ein CSS-Framework eingebunden und erste \u00c4nderungen am HTML-Code vorgenommen. Unter http://localhost:4200/ ist unsere Anwendung nun im Browser sichtbar und alle unseren zuk\u00fcnftigen \u00c4nderungen am Code werden automatisch (ohne erneuten Aufruf) der Seite dargestellt.","title":"CSS-Framework Semantic UI einbinden"},{"location":"books/#datenmodell-und-daten","text":"Wir wollen Details (Daten) \u00fcber B\u00fccher speichern und verwenden dazu die JavaScript Object Notation (JSON) . Zun\u00e4chst wird Angular jedoch das dazugeh\u00f6rige Datenmodell bekannt gemacht. Dies geschieht mithilfe eines Interfaces . Wir erstellen ein solches Interface mithilfe der Angular CLI im Terminal (Sie sind im book-app -Verzeichnis): ng g interface shared/book Die obige Anweisung erstellt eine Datei book.ts im Ordner src/app/shared . Der shared - Ordner wird automatisch angelegt. In der obigen Anweisung steht g f\u00fcr generate ( h\u00e4tte man auch schreiben k\u00f6nnen ). In der IDE \u00f6ffnen wir die Datei book.ts . Sie enth\u00e4lt nur die Interface-Deklaration ohne Inhalt: export interface Book { } Wir implementieren das Interface wie folgt: export interface Book { isbn : string ; title : string ; authors : string []; published : Date ; subtitle ?: string ; rating ?: number ; thumbnails ?: Thumbnail []; description ?: string ; } export interface Thumbnail { url : string ; title ?: string ; } Das bedeutet, dass unser Datenmodell so aussieht, dass die Details \u00fcber ein Buch folgende Daten beinhalten: isbn , title , authors , published , subtitle , rating , thumbnails , description . Die Fragezeichen hinter den Bezeichnern geben an, dass die jeweilige Eigenschaft optional ist, d.h. dass ihr kein Wert zugeordnet werden muss. Die Eigenschaft thumbnail ist vom Typ Thumbnail -Array. Dieser Typ ist kein Standard-TypeScript-Typ, sondern von uns definiert. Thumbnail definieren wir ebenfalls als Interface, bestehend aus 2 Eigenschaften url und (optional) title . Die Definition dieses Interfaces erfolgt ebenfalls direkt in book.ts . Wir haben also 2 Interfaces diefiniert: Book und Thumbnail . Die Daten werden zun\u00e4chst direkt in eine neu zu erstellende Komponente zum Anzeigen der B\u00fccher-Liste eingebunden:","title":"Datenmodell und Daten"},{"location":"books/#bucherliste-erstellen","text":"Zur Anzeige aller gespeicherten B\u00fccher erstellen wir eine neue Komponente book-list . Siehe dazu auch Angular \u2192 Eine neue Komponente erzeugen : ng generate component book-list Es ensteht ein neuer Ordner src/app/book-list , welcher die 4 Dateien: book-list.component.css book-list.component.html book-list.component.spec.ts book-list.component.ts enth\u00e4lt. In der IDE \u00f6ffnen wir zun\u00e4chst die book-list.component.html . Sie sieht so aus: < p > book-list works! </ p > Wir ersetzen den Inhalt vollst\u00e4ndig durch den folgenden HTML-Code: < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > </ a > </ div > Obiger Code enth\u00e4lt einige Strukturdirektiven (siehe Angular \u2192 *Strukturdirektiven )). So l\u00e4uft bspw. die *ngFor -Direktive in der zweiten Zeile durch die Liste books und erzeugt f\u00fcr jedes Buch aus der Liste books einen Hyperlink <a> . Diese existiert jedoch noch gar nicht, so dass unsere App sich derzeit nicht ausf\u00fchren l\u00e4sst. Die erste *ngIf -Direktive in der vierten Zeile pr\u00fcft zun\u00e4chst, ob das Array book.thumbnails \u00fcberhaupt existiert und wenn ja, ob dieses Array einen ersten Eintrag hat book.thumbnails[0] und wenn das der Fall ist, ob dieser erste Eintrag auch eine url enth\u00e4lt (siehe Interfaces Book und Thumbnail ). Wenn diese url existiert, wird durch ein Property-Binding (siehe Angular \u2192 [Property Binding] ) dem src -Attribut von <a> der Wert zugeordnet, der unter book.thumbnails[0].url im JSON gespeichert ist. Die Liste der Autoren eines Buches wird ebenfalls mithilfe der Strukturdirektive *ngFor durchlaufen. Au\u00dferdem findet die Hilfsvariable last dieser Strukturdirektive Anwendung (siehe Angular \u2192 *Strukturdirektiven )). Alle Autoren werden durch Komma getrennt. Nur nach dem letzten Autor wird kein Komma hinzugef\u00fcgt. Dies gelingt mithilfe der Strukturdirektive *ngIf und der Abfrage, ob es sich nicht um das letzte Element handelt - dann Komma. Wir ben\u00f6tigen jetzt f\u00fcr unsere Komponente noch die Liste der B\u00fccher - ein Book -Array. Dieses legen wir in der Datei book-list.component.ts an. Wir \u00f6ffnen diese Datei - sie sieht wie folgt aus: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { constructor () { } ngOnInit () : void { } } Die (TypeScript-)Klasse BookListComponent enth\u00e4lt zwei Methoden: den Konstruktor constructor() { } ngOnInit(): void { } ngOnInit() ist eine Methode aus dem Interface OnInit . Dabei handelt es sich um einen sogenannten Lifecycle-Hook (siehe Angular \u2192 Lifecycle-Hooks ). Die Methode ngOnInit() wird immer dann (automatisch) ausgef\u00fchrt, wenn die Komponente geladen wird. Wir ersetzen den bisherigen Code der Datei book-list.component.ts durch: import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; constructor () { } ngOnInit () : void { this . books = [ { isbn : '9783864906466' , title : 'Angular' , authors : [ 'Ferdinand Malcher' , 'Johannes Hoppe' , 'Danny Kopenhagen' ], published : new Date ( 2019 , 4 , 30 ), subtitle : 'Grundlagen, fortgeschrittene Techniken und Best Practices - mit NativeScript und NgRx' , rating : 5 , thumbnails : [{ url : 'https://ng-buch.de/cover2.jpg' , title : 'Buchcover' }], description : 'Die Autoren f\u00fchren Sie mit einem anspruchsvollen Beispielprojekt durch die Welt von Angular...' , }, { isbn : '9783864903274' , title : 'React' , authors : [ 'Oliver Zeigermann' , 'Nils Hartmann' ], published : new Date ( 2016 , 6 , 17 ), subtitle : 'Die praktische Einf\u00fchrung in React, React Router und Redux' , rating : 3 , thumbnails : [{ url : 'https://ng-buch.de/cover1.jpg' , title : 'Buchcover' }], description : 'React ist ein JavaScript-Framework zur Entwicklung von Benutzeroberfl\u00e4chen ...' , }, { isbn : '978-3-86490-578-0' , title : 'Effective Java' , authors : [ 'Joshua Bloch' ], published : new Date ( 2018 , 9 , 1 ), subtitle : 'Best Practices f\u00fcr die Java-Plattform' , rating : 3 , thumbnails : [{ url : 'https://www.dpunkt.de/common/images/cover_masterid/300/13216.jpg' , title : 'Buchcover' }], description : 'Seit der Vorauflage von \\\"Effective Java\\\" hat sich Java dramatisch ver\u00e4ndert...' , } ]; } } Somit existiert die Eigenschaft books f\u00fcr die Komponente nun (siehe books: Book[] ). Auf diese Eigenschaft kann innerhalb der Klasse mit this.books zugegriffen werden. Dies passiert auch in der ngOnInit() -Methode. Dort wird das Array mit Daten bef\u00fcllt (mit zun\u00e4chst 3 B\u00fcchern). Die Syntax entspricht der JavaScript Object Notation (JSON) . Damit unsere Komponente \u00fcberhaupt sichtbar ist, binden wir sie noch in unsere Root-Komponente ein. Der Selektor unserer book-list -Komponente ist app-book-list . Wir binden diesen Selektor als HTML-Element in app.component.html ein. app.component.html (alt) < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade B\u00fccher ... </ div > </ div > < router-outlet ></ router-outlet > app.component.html (neu) < app-book-list ></ app-book-list > < router-outlet ></ router-outlet > Die App ist nun ausf\u00fchrbar. Im Browser erscheint folgende Darstellung: Success Der zeite Teil unserer B\u00fccher-App ist erstellt! Wir haben zwei Interfaces ( Book und Thumbnail ) und eine neue Komponente ( book-list ) erstellt. Wir haben Direktiven verwendet ( *ngFor und *ngIf ), um durch Daten zu man\u00f6vrieren und diese entsprechend darszustellen. Wir haben Daten im JSON-Format gespeichert.","title":"B\u00fccherliste erstellen"},{"location":"books/#datenfluss-zwischen-komponenten","text":"In diesem Abschnitt wird der Datenfluss von Eltern- auf Kindkomponenten und von Kind- auf Elternkomponenten betrachtet. Letzteres erreicht man \u00fcber event binding (siehe Angular\u2192Event Binding ). Wir betrachten zun\u00e4chst den Datenfluss von Eltern- auf Kindkomponenten. Das grundlegende Prinzip dabei ist das property binding (siehe dazu Angular \u2192 [Property Bindings] ).","title":"Datenfluss zwischen Komponenten"},{"location":"books/#datenfluss-von-eltern-auf-kindkomponenten","text":"Wir legen uns dazu zun\u00e4chst eine weitere Komponente in unserer B\u00fccher-App an - die Komponente book-list-item . Sie ist daf\u00fcr zust\u00e4ndig, die Informationen \u00fcber ein einzelnes Buch im Detail anzuzeigen. Wir werden zu dieser Detailansicht gelangen, indem wir ausgehend von der Liste der B\u00fccher auf ein einzelnes Buch klicken - dieses wird dann im Detail angezeigt. Wechseln Sie im Terminal in den Ordner Ihrer B\u00fccher-App book-app und geben dort zum Erzeugen der neuen Komponente ein: ng g c book-list-item Im Ordner book-app/src/app entsteht eine neue Komponente (ein neuer Ordner) book-list-item mit den Dateien book-list-item.component.ts , book-list-item.component.html , book-list-item.component.css und book-list-item.component.spec.ts . Wir kopieren zun\u00e4chst den Teil aus der book-list.component.html in die book-list-item.component.html , der die Details eines Buches anzeigt. Im folgenden Tab sind jeweils die *.component.html gemeint. book-list (alt) < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > </ a > </ div > book-list-item < img class = \"ui tiny image\" * ngIf = \"book.thumbnails && book.thumbnails[0] && book.thumbnails[0].url\" [ src ]=\" book . thumbnails [ 0 ]. url \" /> < div class = \"content\" > < div class = \"header\" > {{ book.title }} </ div > < div * ngIf = \"book.subtitle\" class = \"description\" > {{ book.subtitle }} </ div > < div class = \"metadata\" > < span * ngFor = \"let author of book.authors; last as l\" > {{ author }} < span * ngIf = \"!l\" > , </ span > </ span > < br /> ISBN {{ book.isbn }} </ div > </ div > book-list (neu - zun\u00e4chst) < div class = \"ui middle aligned selection divided list\" > < a * ngFor = \"let book of books\" class = \"item\" > <!-- dieses Anchorelement (Hyperlink <a>) wird gleich ge\u00e4ndert aber die Direktive *ngFor bleibt --> </ a > </ div > Nachdem wir den oben gelb unterlegten Teil nach book-list-item.component.html geschoben haben, f\u00e4llt auf, dass die Variable book in der Komponente book-list-item (noch) unbekannt ist. Dies wird nun ge\u00e4ndert. Zun\u00e4chst \u00e4ndern das HTML-Element, das uns die Details eines Buches anzeigen soll von <a> nach <app-book-list-item> - das ist der Selektor unserer neuen Komponente. book-list.component.html 1 2 3 4 5 6 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" > </ app-book-list-item > </ div > In Zeile 2 erkennt man die Verwendung des Selektors app-book-list-item , hier erfolgt der \"Aufruf\" unserer neuen Komponente. In Zeile 3 wird die bereits bekannte Direktive *ngFor angewendet (siehe Angular\u2192*Strukturdirektiven ), mit der wir durch unser Array von B\u00fcchern ( Book[] ) laufen. In Zeile 4 findet nun das property binding statt (siehe Angular \u2192 [Property Bindings] )). Der Eigenschaft book wird jeweils der Wert der Variable b \u00fcbergeben. Das bedeutet, dass wir in der Elternkomponente book-list die Kindkomponente book-list-item aufrufen und in der Elternkomponente einer Eigenschaft der Kindkomponente book einen Wert zuweisen. Es erfolgt also ein Datenfluss von der Elternkoponente zur Kindkomponente unter Verwendung von property binding . Es fehlt nur noch zwei Sachen: die Eigenschaft book (vom Typ Book ) muss noch als Eigenschaft (Objektvariable) der Komponente book-list-tem deklariert werden. es muss mithilfe des Decorators @Input() aggeben werden, dass die Werte (Daten) f\u00fcr diese Eigenschaft \"in die Komponente hineinflie\u00dfen\". Beides erreichen wir durch \u00c4nderungen der Datei book-list-item.component.ts wie folgt: book-list-item.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , Input , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list-item' , templateUrl : './book-list-item.component.html' , styleUrls : [ './book-list-item.component.css' ] }) export class BookListItemComponent implements OnInit { @ Input () book : Book ; constructor () { } ngOnInit () : void { } } Wesentlich ist die Zeile 10. Dort sehen Sie die Deklaration der Eigenschaft book: Book und die Verwendung der Directive @Input() . Sowohl das Interface Book als auch die Directive @Input m\u00fcssen noch eingebunden werden (Zeilen 1 und 2). Lassen Sie dies am besten Ihre IDE erledigen. Gehen Sie mit der Maus \u00fcber die rot dargestellten Bezeichner ( Book und @Input() ) und w\u00e4hlen Sie jeweils den automatischen Korrekturvorschlag aus. Success Der dritte Teil unserer B\u00fccher-App ist erstellt! Leider hat sich in der Ansicht nichts ge\u00e4ndert. Zwar wissen wir jetzt, wie der Datenfluss von Eltern- auf Kindkomponenten erfolgt (n\u00e4mlich mit property binding und der Deklaration der Eigenschaft (property) mithilfe des @Input() -Decorators). Aber der Wechsel der Ansicht ist noch nicht realisiert. Dieser soll durch ein Ereignis ausgel\u00f6st werden, n\u00e4mlich wenn wir auf eines der B\u00fccher aus der Liste klicken. Die Behandlung von Ereignissen ( event binding ) ist Thema des n\u00e4chsten Abschnittes.","title":"Datenfluss von Eltern- auf Kindkomponenten"},{"location":"books/#datenfluss-von-kind-auf-elternkomponenten","text":"Der Datenfluss von Kind- auf Elternkomponenten kann mithilfe von event binding organisiert werden (siehe dazu Angular\u2192Eigene Ereignisse ). Wir werden eine BookDetailsComponent erzeugen. Diese zeigt die Details eines Buches. In unserer BookListComponent definieren wir ein Ereignis, das diese Detail-Ansicht aufruft und dabei das entsprechende Buch \u00fcbergibt. In der BookDetailsComponent definieren wir ein Ereignis, das die Listendarstellung aller B\u00fccher wieder aufruft. Wir erzeugen zun\u00e4chst die BookDetailsComponent : ng g c book-details Wir planen folgende Kommunikation zwischen den Komponenten (Abbildung ebenfalls aus eingangs erw\u00e4hntem Buch ): Wir erweitern zun\u00e4chst die Komponente AppComponent um zwei weitere Eigenschaften: book vom Typ Book (die Daten eines Buches sollen ja an die Komponente BookDetailsComponent mithilfe von property binding weitergegeben werden) und einen viewState , der zwischen den beiden Ansichten BookList und BookDetails umschalten soll. Dazu vereinbaren wir einen neuen Typ ViewState , der 2 verschiedene Werte annehmen kann list und details . Die neue app.component.ts sieht dann so aus: app.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { Component } from '@angular/core' ; import { Book } from './shared/book' ; type ViewState = 'list' | 'details' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { book : Book ; viewState : ViewState = 'list' ; showList () { this . viewState = 'list' ; } showDetails ( book : Book ) { this . book = book ; this . viewState = 'details' ; } } Neben den beiden Eigenschaften book und viewState ( viewState ist vom Typ ViewState - dieser wurde in Zeile 5 erstellt) wurde auch zwei Methoden hinzugef\u00fcgt: showList() und showDetails(book: Book) . showList() wird von der Kindkomponente BookDetailsComponent als Ereignis aufgerufen ( event binding ). showDetails() wird von der Kindkomponente BookListComponent als Ereignis aufgerufen und liefert als payload des Ereignisses die Informationen \u00fcber das Buch mit, auf das innerhalb der Liste geklickt wurde (siehe auch Angular\u2192Eigene Ereignisse ). Die beiden Methoden schalten jeweils zwischen den viewState s um. Im Template der AppComponent wird mittels der *ngIf -Direktive zwischen den Ansichten der beiden Komponenten BookDetailsComponent und BookListeComponent umgeschaltet, je nachdem, welcher Wert viewState aufweist: app.component.html 1 2 3 4 5 6 7 8 9 10 < app-book-list * ngIf = \"viewState === 'list'\" ( showDetailsEvent )=\" showDetails ($ event )\" ></ app-book-list > < app-book-details * ngIf = \"viewState === 'details'\" ( showListEvent )=\" showList ()\" [ book ]=\" book \" ></ app-book-details > < router-outlet ></ router-outlet > Die beiden Events showDetailsEvent und showListEvent der beiden Komponenten BookListComponent bzw. BookDetailsComponent sind noch nicht in den jeweiligen Komponenten angelegt, ebenso noch nicht die Eigenschaft book in der BookDetailsComponent . Das machen wir jetzt in beginnen mit der BookListComponent . In der BookListComponent soll ein eigenes Event ( showDetailsEvent ) definiert werden. Wir gehen dazu vor, wie in Angular\u2192Eigene Ereignisse beschrieben. Wichtig ist, dass wir einen payload des Events \u00fcbergeben, n\u00e4mlich das jeweilige Buch auf das geklickt wurde. Dieser payload wird in der Methode showDetails($event) der AppComponent verarbeitet. Wir \u00f6ffnen die book-list.component.ts und f\u00fcgen hinzu : Caution Achten Sie darauf, dass Sie nur den Teil hinzuf\u00fcgen, der noch nicht in Ihrer book-list.component.ts enthalten ist. Diese Datei ist durch das JSON schon recht lang. Es kommen nur die Zeilen 8 und 14-16 hinzu und in der ersten Zeile werden EventEmitter und Output aus @angular/core importiert! book-list.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ /* bleibt wie es ist */ }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor () { } ngOnInit () : void { /* bleibt wie es ist */ } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Im Template der BookListComponent kommt nur ein event binding hinzu. Wir binden das native DOM-Ereignis click an die Ereignisbehandlung showDetails() und \u00fcbergeben dabei als payload das entsprechende Buch b . Das bedeutet, dass jetzt jedes einzelne BookItem (es gibt f\u00fcr jedes Buch eine eigens BookItem - siehe *ngFor ) ein Click-Ereignis existiert. Klicken wir also auf einen Eintrag in unserer BookList , dann wird das showDetails() -Ereignis ausgel\u00f6st, das entsprechende Buch als payload \u00fcbergeben und an die AppComponent weitergereicht, die dann auf die BookDetails -Ansicht umschaltet. Die um diese eine Zeile (Zeile 5) erweiterte book-list.component.html sieht nun so: book-list.component.html 1 2 3 4 5 6 7 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" ( click )=\" showDetails ( b )\" > </ app-book-list-item > </ div > Reflexion Wir sehen in dem obigen kleinen Beispiel book-list.component.html sehr sch\u00f6n vier Konzepte: 1. die Komponente BookListComponent ruft die Komponente BookListItemComponent auf. Damit ist BookListComponent eine Elternkomponente der Kindkomponente BookListItemComponent (Zeile 2). 2. der Einsatz der Direktive *ngFor . F\u00fcr jeden einzelnen Eintrag aus dem Array books wird ein neues HTML-Element <app-book-list-item> erzeugt. 3. Ein property binding , bei der der Ausdruck \"b\" and die Eigenschaft book gebunden wird und 4. ein event binding , bei der wir die Ereignisbehandlung showDetails(b) an das native DOM-Element click binden. Jetzt k\u00fcmmern wir uns noch um unsere neue Komponente BookDetailsComponent . Zwei Konzepte kennen wir bereits: definieren wir uns eine Eigenschaft book , deren Wert wir als @Input() von der Elternkomponente AppComponent erhalten (siehe dazu Datenfluss von Eltern- auf Kindkomponenten ). definieren wir uns ein eigenes Ereignis, welches an die Elternkomponente AppComponent weitergereicht wird (siehe dazu book-list.component.ts oben) Es wird noch eine dritte Kleinigkeit eingef\u00fcgt: eine Methode getRating(number) , die f\u00fcr eine gegebene Zahl ein Array der \u00fcbergebenen L\u00e4nge zur\u00fcckgibt. Wir werden im Template sehen, was es damit auf sich hat. Die book-details.component.ts sieht dann wie folgt aus: book-details.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { Component , EventEmitter , Input , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } Das zugeh\u00f6rige Template ist recht umfangreich. Wir gehen auf einzelne Details ein, zeigen es aber zun\u00e4chst: book-details.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 < div * ngIf = \"book\" > < h1 > {{ book.title }} </ h1 > < h3 * ngIf = \"book.subtitle\" > {{ book.subtitle }} </ h3 > < div class = \"ui divider\" ></ div > < div class = \"ui grid\" > < div class = \"four wide column\" > < h4 > Autoren </ h4 > < ng-container * ngFor = \"let author of book.authors\" > {{ author }} < br > </ ng-container > </ div > < div class = \"four wide column\" > < h4 > ISBN </ h4 > {{ book.isbn }} </ div > < div class = \"four wide column\" > < h4 > Erschienen </ h4 > {{ book.published }} </ div > < div class = \"four wide column\" > < h4 > Rating </ h4 > < i class = \"yellow star icon\" * ngFor = \"let r of getRating(book.rating)\" ></ i > </ div > </ div > < h4 > Beschreibung </ h4 > < p > {{ book.description }} </ p > < div class = \"ui small images\" > < img * ngFor = \"let thumbnail of book.thumbnails\" [ src ]=\" thumbnail . url \" > </ div > < button class = \"ui red button\" ( click )=\" showBookList ()\" > Zur\u00fcck zur Buchliste </ button > </ div > Die Detailansicht sollte dann etwa so aussehen: Success Der vierte Teil unserer B\u00fccher-App ist erstellt! Wir wissen jetzt, wie wir Ereignisse behandeln und sogar eigene Ereignisse erstellen k\u00f6nnen und wie wir mit diesen eigenen Ereignissen und event bining Daten an die Elternklasse \u00fcbergeben k\u00f6nnen. Damit k\u00f6nnen wir jetzt sowohl von Eltern- nach Kindklassen als auch zur\u00fcck Daten transferieren und durch Ereignisse zwischen verschiedenen Komponenten hin- und herwechseln. F\u00fcr viele Komponenten und eine tiefe Verschachtelung ist die Komplexit\u00e4t jedoch mit diesen Konzepten zu hoch. Wir lernen zwei weitere Konzepte kennen, die uns helfen, diese Komplexit\u00e4t zu meistern: Services und Routing .","title":"Datenfluss von Kind- auf Elternkomponenten"},{"location":"books/#service-bookstoreservice","text":"Derzeit ist die Liste (genauer: das Array) unserer B\u00fccher statisch als JSON innerhalb der Komponente BookListComponent gespeichert (siehe in ngOnInit() this.books = [ ... ] ). Die BookListComponent verwaltet somit die B\u00fccher und stellt diese auch noch als Liste dar. Wir wollen die Darstellung unabh\u00e4ngig von der \"Datenspeicherung\" gestalten und die Datenverwaltung (Speicherung und Bereitstellung) in einen Service auslagern (siehe Angular\u2192Services ). Um einen Service mithilfe der CLI anzulegen (zu generieren), verwenden wir das Attribut service anstelle von component . Au\u00dferdem ist es guter Stil, Services in den shared -Ordner abzulegen, da ja alle Komponenten einen Service nutzen k\u00f6nnen. Wir erzeugen einen Service BookStoreService : ng g service shared/book-store Nach der Erzeugung sieht der Service zun\u00e4chst so aus: book-store.service.ts import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { constructor () { } } F\u00fcr Services gibt es keine Lifecycle-Hooks. Wir finden hier deshalb auch keine ngOnInit() -Methode. W\u00e4hrend Komponenten den Decorator @Component() aufweisen, wird f\u00fcr Services der Decorator @Injectable() verwendet. Mit diesem Decorator geben wir an, dass der Service weitere Abh\u00e4ngigkeiten einbinden kann. Dies geschieht typischerweise \u00fcber einen Parameter im Konstruktor - eine soganannte dependency injection (wenn \u00fcber den Konstruktor, dann constructor injection ). Auch wenn wir eine solche Abh\u00e4ngigkeit nicht einbinden, sollte der Decorator @Injectable() stets f\u00fcr einen Service angegeben werden. Dies liegt daran, dass wir diesen Decorator um die providedIn -Eigenschaft erweitern. Mit providedIn: 'root' geben wir an, dass der Service allen Komponenten (im gesamten Root-Modul) zur Verf\u00fcgung steht, er also von allen Komponenten genutzt werden kann. In unseren Service integrieren wir nun folgende Eigenschaften: das Book -Array books aus der BookListComponent und die Methode getAll() , die dieses Array zur\u00fcckgibt, also alle B\u00fccher aus dem Array books . book-store.service.ts import { Injectable } from '@angular/core' ; import { Book } from './book' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { books : Book []; constructor () { this . books = [ { isbn : '9783864906466' , /* das gesamte Array aus book-list.component.ts hier her bewegen */ }, } getAll () : Book [] { return this . books ; } } book-list.component.ts import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor () { } ngOnInit () : void { } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Es wurde also die gesamte Wertebelegung f\u00fcr this.books mit dem JSON von der Datei book-list.component.ts (dort aus ngOnInit() ) nach book-store.service.ts (hier in den Konstruktor constructor() - Liefecycle-hooks gibt es f\u00fcr Services ja nicht) verschoben. Dazu wurde dem Service die Eigenschaft books hinzugef\u00fcgt (Typ Book[] - das Interface Book muss dazu importiert werden). Au\u00dferdem wurde in dem Service die Methode getAll() implementiert. Nun kann der Service in der BookListComponent verwendet werden. Dazu werden der BookService importiert, der BookService mittels dependency injection ( constructor injection ) in die Komponente eingebunden und die Methode getAll() des Services aufgerufen, um die Eigenschaft this.books mit dem Book -Array zu initialisieren. book-list.component.ts import { Component , EventEmitter , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; import { BookStoreService } from '../shared/book-store.service' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; @ Output () showDetailsEvent = new EventEmitter < Book > (); constructor ( private bs : BookStoreService ) { } ngOnInit () : void { this . books = this . bs . getAll (); } showDetails ( book : Book ) { this . showDetailsEvent . emit ( book ); } } Beachten Sie, dass die dependency injection des Services dazu f\u00fchrt, dass bs eine Eigenschaft der BookListComponent ist, ohne dass diese Eigenschaft explizit deklariert wird. In ngOnInit() wird \u00fcber this.bs auf den Service zugegriffen. Die Anwendung sieht zwar genauso aus wie vorher, aber wir haben die BookListComponent davon entlastet, das B\u00fccher-Array speichern zu m\u00fcssen. Diesen Dienst haben wir in einen Service augelagert, der au\u00dferdem noch die Methode getAll() zur Verf\u00fcgung stellt, mit dem das gesamte B\u00fccher-Array zur\u00fcckgegeben wird. Success Der f\u00fcnfte Teil unserer B\u00fccher-App ist erstellt! Die Anwendung sieht zwar genauso aus wie vorher, aber wir haben die BookListComponent davon entlastet, das B\u00fccher-Array speichern zu m\u00fcssen. Diesen Dienst haben wir in einen Service augelagert, der au\u00dferdem noch die Methode getAll() zur Verf\u00fcgung stellt, mit dem das gesamte B\u00fccher-Array zur\u00fcckgegeben wird. Nun wollen wir mithilfe von Routing besser durch unsere Anwendung navigieren.","title":"Service BookStoreService"},{"location":"books/#routing","text":"Derzeit hat unsere App zwei Sichten: einerseits die Listenansicht aller B\u00fccher (Template der BookListComponent , wobei jede Zeile der Liste/jedes Buch durch das Template der BookListItemComponent dargestellt wird) und die Detailansicht eines Buches (Template der BookDetailsComponent ). Zwischen diesen Sichten ( views ) wechseln wir durch Nutzereignisse hin- und her. Von der Listenansicht auf die Detailansicht kommen wir durch Anklicken einer Buchzeile und zur\u00fcck kommen wir durch Klicken des Buttons \"Zur\u00fcck zur Buchliste\". Unsere URL bleibt jedoch immer gleich, n\u00e4mlich localhost:4200 . Ein direkter Zugriff auf die Detailansicht eines Buches ist nicht m\u00f6glich, sondern erfolgt immer \u00fcber die Listenansicht. Dies soll im folgenden ge\u00e4ndert werden. Zum Beispiel k\u00f6nnte die Detailansicht des Buches mit der ISBN 9783864906466 mithilfe der URL localhost:4200/books/9783864906466 erfolgen. Eine solche URL h\u00e4tte auch den Vorteil, dass man diese URL an andere versenden k\u00f6nnte, um auf ein konkretes Buch aufmerksam zu machen. Zur Erstellung solcher Pfade wird das Konzept des Routings in Angular verwendet (siehe Angular \u2192 Routing ). Wir erweitern unsere B\u00fccher-App zun\u00e4chst um eine weitere Komponente home . ng g c home","title":"Routing"},{"location":"books/#routen-konfigurieren","text":"In der app-routing.module.ts werden wir 4 Routen konfigurieren: /home zeigt die HomeComponent / wird auf die /home -Route umgeleitet, zeigt also ebenfalls auf die HomeComponent /books zeigt auf die BookListComponent /books/:isbn zeigt auf die BooksDetailsComponent f\u00fcr das entsprechende Buch mit der isbn des Parameterwertes app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { HomeComponent } from './home/home.component' ; import { BookDetailsComponent } from './book-details/book-details.component' ; import { BookListComponent } from './book-list/book-list.component' ; const routes : Routes = [ { path : '' , redirectTo : 'home' , pathMatch : 'full' }, { path : 'home' , component : HomeComponent }, { path : 'books' , component : BookListComponent }, { path : 'books/:isbn' , component : BookDetailsComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } app.component.html < router-outlet ></ router-outlet > Die app.component.html enth\u00e4lt nun nur noch das <router-outlet></router-outlet> -Element. Wenn wir nun http://localhost:4200 aufrufen, werden wir zu http://localhost:4200/home umgeleitet und es erscheint die View der HomeComponent ( home works! ). Wir k\u00f6nnen aber auch http://localhost:4200/books eingeben und es erscheint die View der BookListComponent , also die gesamte Liste unserer B\u00fccher.","title":"Routen konfigurieren"},{"location":"books/#parametrisierte-route-auslesen","text":"Wenn wir z.B. http://localhost:4200/books/9783864906466 aufrufen, also eine ISBN \u00fcbergeben, bleibt die angezeigte Seite der BookDetailsComponent leer. Das liegt daran, dass die in der URL \u00fcbergebene ISBN noch nicht verwaltet wird, um das entsprechende Buch herauszusuchen und anzuzeigen. Dazu erweitern wir zun\u00e4chst den BookStoreService : Caution Achten Sie darauf, dass Sie nur den Teil hinzuf\u00fcgen, der noch nicht in Ihrer book-store.service.ts enthalten ist. Diese Datei ist durch das JSON schon recht lang. Es kommen nur die Zeilen 18-20 hinzu! shared/book-store.service.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Injectable } from '@angular/core' ; import { Book } from './book' ; @ Injectable ({ providedIn : 'root' }) export class BookStoreService { books : Book []; constructor () { this . books = [ /* alle Eintr\u00e4ge */ ]; } getAll () : Book [] { return this . books ; } getSingle ( isbn : string ) : Book { return this . books . find ( book => ( book . isbn === isbn )); } } Wir m\u00fcssen nun noch die ISBN auslesen, die in der URL \u00fcbergeben wird. Das Auslesen von Parameterwerten aus URLs ist in Angular \u2192 Parameter an Routen beschrieben. Dazu wird book-details.component.ts wie folgt erweitert : ActivatedRoute wird importiert und dem Konstruktor injiziert, um mithilfe von route.snapshot.paramMap die aktuellen Werte der in der URL \u00fcbergebenen Parameter abzufragen. Der BookStoreService wird importiert und dem Konstruktor injiziert, um auf das Array aller B\u00fccher, insbesondere aber auf die getSingle(isbn: string) -Funktion zuzugreifen, die das Buch mit der \u00fcbergebenen isbn zur\u00fcckgibt. Daf\u00fcr entfallen einige Sachen aus der book-details.component.ts : Wir wechseln die Ansichten nicht mehr durch ein Ereignis, sondern \u00fcberlassen dies dem Router. Deshalb entfernen wir die @Output() -Eigenschaft showListEvent und die Methode showBookList() . Das ausgew\u00e4hlte Buch gelangt nun nicht mehr \u00fcber property binding in das Template, sondern \u00fcber die Eigenschaft this.book (die ihren Wert von der Methode getSingle() des BookStoreService erh\u00e4lt). Wir k\u00f6nnen deshalb auch den @Input() -Decorator von book: Book entfernen. book-details.component.ts (neu) import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } book-details.component.ts (alt) import { Component , EventEmitter , Input , OnInit , Output } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } In der book-details.component.html wird der Button entfernt, also der folgende Teil gel\u00f6scht: < button class = \"ui red button\" ( click )=\" showBookList ()\" > Zur\u00fcck zur Buchliste </ button > Success Jetzt wird die Detail-Ansicht eines jeden Buches angezeigt, wenn Sie eine existierende isbn \u00fcbergeben. Also z.B. http://localhost:4200/books/9783864906466 (oder http://localhost:4200/books/9783864903274 oder http://localhost:4200/books/978-3-86490-578-0 ). Bei einer nicht existierenden isbn (z.B. http://localhost:4200/books/123 ) bleibt die Seite leer.","title":"Parametrisierte Route auslesen"},{"location":"books/#routen-verlinken","text":"Derzeit m\u00fcssen wir die Routen noch jeweils als URL in den Browser eingeben. Wir wollen uns nun ein Navigationsmen\u00fc erzeugen, in dem wir die jeweiligen Routen als Links hinterlegen und somit \u00fcber Klicks die jeweiligen Komponenten aufrufen. Das prinzipielle Vorgehen ist in Angular \u2192 Routen verlinken beschrieben. Unsere Navigationsleiste f\u00fcgen wir am besten in die AppComponent ein, damit sie immer sichtbar bleibt. app.component.html < div class = \"ui menu\" > < a routerLink = \"home\" class = \"item\" > Home </ a > < a routerLink = \"books\" class = \"item\" > B\u00fccher </ a > </ div > < router-outlet ></ router-outlet > Jetzt binden wir in unserer Listen-Ansicht aller B\u00fccher noch die isbn -Eigenschaft an die routerLink -Property, um ein konkretes Buch mit der entsprechenden isbn auszuw\u00e4hlen. Wir passen dazu die book-list.component.html wie folgt an: book-list.component.html 1 2 3 4 5 6 7 < div class = \"ui middle aligned selection divided list\" > < app-book-list-item class = \"item\" * ngFor = \"let b of books\" [ book ]=\" b \" [ routerLink ]=\" b . isbn \" > </ app-book-list-item > </ div > Das click -Ereignis wird nun also nicht mehr ben\u00f6tigt und behandelt. Stattdessen binden wir mit property binding die isbn als Pfad an die Eigenschaft routerLink . Der Pfad ergibt sich somit aus der aktuellen Komponente ( /books ) und der isbn des Buches, auf das wir klicken. Daraus ergibt sich der Pfad /books/isbn ( isbn wird durch den konkreten String ersetzt). Wir erweitern noch das Template der HomeComponent um einen Button, mit dem wir zur B\u00fccherliste kommen: home.component.html 1 2 3 4 5 6 < h1 > Home </ h1 > < p > Herzlich willkommen zur B\u00fccher-App! </ p > < a routerLink = \"../books\" class = \"ui red button\" > B\u00fccherliste anzeigen < i class = \"right arrow icon\" ></ i > </ a > Der Pfad ../books ist releativ zur HomeComponent , also erst \"raus\" aus /home und dann nach /books .","title":"Routen verlinken"},{"location":"books/#aktive-links-stylen-und-aufraumen","text":"Den jeweils aktiven Men\u00fcpunkt werden wir nun noch farbig gestalten, damit wir am Men\u00fc erkennen, wo wir uns in unserer Anwendung gerade befinden. Wir gehen vor wie in Angular \u2192 Styles f\u00fcr aktive Routen beschrieben und nutzen die CSS-Klasse active des Semantic-UI-CSS-Frameworks . Wir f\u00fcgen also zwei Mal routerLinkActive=\"active\" in unsere app.component.html ein: app.component.html 1 2 3 4 5 < div class = \"ui menu\" > < a routerLink = \"home\" routerLinkActive = \"active\" class = \"item\" > Home </ a > < a routerLink = \"books\" routerLinkActive = \"active\" class = \"item\" > B\u00fccher </ a > </ div > < router-outlet ></ router-outlet > In unserer Navigationsleiste ist nun das jeweilige Element grau hinterlegt, je nachdem, wo wir uns befinden. Wir r\u00e4umen in unseren Komponenten noch ein wenig auf: in BookDetailsComponent haben wir bereits showListEvent , showBookList() , @Input() -Decorator und die entsprechenden Importe ( Input , Output und EventEmitter ) gel\u00f6scht in BookListComponent l\u00f6schen wir showDetailsEvent , showDetails() und die entsprechenden Importe ( Output und EventEmitter ) in AppComponent l\u00f6schen wir book , viewState , showList() , showDetails() und den Typ ViewState sowie den Import f\u00fcr Book book-details.component.ts import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; @ Component ({ selector : 'app-book-details' , templateUrl : './book-details.component.html' , styleUrls : [ './book-details.component.css' ] }) export class BookDetailsComponent implements OnInit { @ Input () book : Book ; @ Output () showListEvent = new EventEmitter < any > (); ngOnInit () { } getRating ( num : number ) { return new Array ( num ); } showBookList () { this . showListEvent . emit (); } } book-list.component.ts import { Component , OnInit } from '@angular/core' ; import { Book } from '../shared/book' ; import { BookStoreService } from '../shared/book-store.service' ; @ Component ({ selector : 'app-book-list' , templateUrl : './book-list.component.html' , styleUrls : [ './book-list.component.css' ] }) export class BookListComponent implements OnInit { books : Book []; constructor ( private bs : BookStoreService ) { } ngOnInit () : void { this . books = this . bs . getAll (); } } app.component.ts import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { } Success Der sechste Teil unserer B\u00fccher-App ist erstellt! Wir haben unsere Anwendung um ein Routing erg\u00e4nzt. Wir k\u00f6nnen Routen konfigurieren, parametrisierte Routen auslesen, Routen verlinken und aktive Links stylen. Die Zust\u00e4nde unserer Anwendung werden nun \u00fcber lesbare URL-Pfade abgebildet. RouterOutlets sind Platzhalter f\u00fcr die zu ladenden Komponenten. Kindkomponenten werden in das RouterOutlet der Elternkomponente geladen. Routen lassen sich so verschachteln.","title":"Aktive Links stylen und aufr\u00e4umen"},{"location":"css/","text":"CSS \u00b6 C ascading S tyle S heets werden verwendet, um dem HTML-Dokument einen ansprechenden Stil (Font, Farben, ...) zuzuweisen, das Layout des HTML-Dokumentes zu definieren (3-Spalten-Layout, 2-Spalten-Layout, Kopf- und Fu\u00dfzeile, ...) das Layout responsive zu gestalten, d.h. unterschiedliche Ansichten des HTML-Dokumentes zu definieren, je nach Bildschirmgr\u00f6\u00dfe (Mobile, Tablet, Desktop) Generell gilt, dass wir mit HTML ausschlie\u00dflich die Inhalte definieren, das Design jedoch mit CSS. Sehen wir uns dazu folgendes erstes Beispiel an: In obigem Beispiel werden f\u00fcr die HTML-Elemente, die in unserem HTML-Doument verwendet werden, unterschiedliche CSS-Eigenschaften definiert. Die generelle Syntax f\u00fcr CSS-Eigenschaften ist: selektor { eigenschaft : wert ; } So wird in obigem Beispiel f\u00fcr das HTML-Element body der Eigenschaft font-family der Wert verdana zugeordnet. Somit ist der gesamte Text in <body> in der Schriftart Verdana . Dies gilt auch f\u00fcr alle Elemente, die hierarchisch \"unter\" <body> angesiedelt sind, also alle <h1> -, <h3> -, <p> -, <span> - und <a> -Elemente. Die Eigenschaftsdefinitionen kaskadieren also nach unten - daher cascading style sheets. Da alle <p> -Elemente fett geschrieben werden, sind auch die darin enthaltenen Elemente fett, also <a> und <span> . Begriffsbezeichnungen bei CSS-Definitionen: Ort der CSS-Definitionen \u00b6 Es gibt drei \"Orte\", an denen CSS-Eigenschaften f\u00fcr ein HTML-Dokument definiert werden k\u00f6nnen: in einer externen CSS-Datei. Diese endet typischerweise mit der Dateiendung .css und wird im <head> des HTML-Dokumentes mithilfe von <link rel=\"stylesheet\" href=\"mystyle.css\"> (hier hei\u00dft die externe Datei mystyle.css ) eingebunden (siehe unten), innerhalb eines <style> -Elementes ebenfalls im <head> des HTML-Dokumentes (siehe unten), als style -Attribut eines HTML-Elementes (siehe unten). 3 Orte der CSS-Definitionen - HTML <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > <!-- 1. Einbinden einer externen CSS-Datei --> < link rel = \"stylesheet\" href = \"mystyle.css\" > < title > CSS-Einf\u00fchrung </ title > <!-- 2. Verwenden des <style>-Elementes --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > \u00dcberschrift </ h1 > <!-- 3. style-Attribut eines HTML-Elementes --> < p style = \"border: 1px solid blue;\" > Das ist ein Absatz. </ p > </ body > </ html > mystyle.css body { font-family : vardana ; } Im obigen Beispiel wird in der externen CSS-Datei mystyle.css definiert, dass der im gesamten Dokument verwendete Font Verdana sein soll. Im <style> -Element wird als Schriftfarbe f\u00fcr <h1> -\u00dcberschriften rot festgelegt, das gilt f\u00fcr alle <h1> -\u00dcberschriften des Dokumentes. Das style -Attribut des HTML-Elementes <p> legt f\u00fcr diesen Absatz fest, dass er blau umrandet sein soll. Das gilt nicht f\u00fcr alle <p> -Elemente, sondern nur f\u00fcr das Element mit dem style -Attribut. Eine recht gute \u00dcbersicht \u00fcber alle existierenden CSS-Eigenschaften bietet W3Schhols . Selektoren \u00b6 Bis jetzt haben wir in unseren Beispielen \"nur\" HTML-Elemente als Selektoren verwendet. Es gibt eine Vielzahl anderer M\u00f6glichkeiten, bestimmten HTML-Elementen CSS-Eigenschaften zuzuweisen. Nochmal zur Wiederholung: der generelle Aufbau einer CSS-Definition ist selektor { eigenschaft : wert ; } Wir werden nun die unterschiedlichen M\u00f6glichkeiten der Selektoren (und Operatoren \u00fcber diese Selektoren) betrachten. Wir betrachten zun\u00e4chst HTML-Elemente, IDs, Klassen und Attribute als Selektoren. Zu den IDs ist zu sagen, dass Sie jedem HTML-Element eine eindeutige id zuweisen k\u00f6nnen, z.B. <div id=\"main\"> . Jedes Element darf nur eine id besitzen und eine id darf in einem HTML-Dokument nur einmal vergeben - muss also eindeutig - sein. Klassen weisen Sie Elementen mit dem class -Attribut zu, also z.B. <div class=\"smallFont blueColor yellowBackground\"> . Klassennamen k\u00f6nnen Sie frei w\u00e4hlen (keine Leer- und Sonderzeichen!). Wenn Sie, wie im Beispiel, mehrere Klassen zuweisen, dann durch einen Leerschritt getrennt. Im Beispiel wurde dem <div> drei Klassen zugewiesen. Sie k\u00f6nnen einem Element beliebig viele Klassen zuweisen und eine Klasse kann beliebig vielen Elementen zugewiesen werden. In den CSS-Deklarationen wird mittels # auf die IDs zugegriffen und mittels . auf die jeweilige Klasse. Siehe die folgende Liste der m\u00f6glichen Selektoren unter Verwendung von Elementnamen, IDs, Klassen und Attributen: Selektor Beispiel Erl\u00e4uterung * * alle HTML-Elemente ausgew\u00e4hlt (Wildcard) element h1 alle <h1> -Elemente ausgew\u00e4hlt element element section h1 alle <h1> -Elemente innnerhalb eines <section> -Element ausgew\u00e4hlt (Nachfahren) element, element section, h1 alle <h1> -Elemente und alle <section> -Elemente ausgew\u00e4hlt element>element section>h1 alle <h1> -Elemente deren direkte Eltern ein <section> -Element sind (Kinder) element+element section+h1 alle <h1> -Elemente, die direkt nach einem <section> -Element stehen .class .container alle Elemente mit class=\"container\" , d.h. container muss eine zugeordnete Klasse sein .class1.class2 .container.top alle Elemente mit class=\"container top\" , d.h. container und top m\u00fcssen zugeordnete Klassen sein .class1 .class2 .container .top alle Elemente mit class=\"top\" , welche in Elementen mit class=\"container\" sind (Nachfahren) #id #main das Element mit id=\"main\" (id eindeutig - nur einmal vergeben) [attribute] [src] alle Elemente mit einem src -Attribut [attribute=value] [target=_blank] alle Elemente, die ein target -Attribut besitzen und dessen Wert muss genau _blank sein [attribute*=value] [src*=\"localhost\"] alle Elemente, die ein src -Attribut besitzen und dessen Wert enth\u00e4lt das Wort localhost [attribute^=value] [href^=\"https\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert beginnt mit dem Wort https [attribute$=value] [href$=\"php\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert endet mit dem Wort php Dar\u00fcber hinaus gibt es auch sogenannte Pseudo-Klassen und Pseudo-Elemente , die wir als Selektoren verwenden k\u00f6nnen. Wir betrachten zum besseren Verst\u00e4ndinis zun\u00e4chst ein Beispiel, um eine Idee davon zu bekommen. Angenommen, wir haben in unserem HTML-Dokument einen Hyperlink ( # refrenziert auf den Beginn derselben Seite): < a href = \"#\" > Neu laden </ a > So ein Hyperlink besitzt zus\u00e4tzliche Pseudo-Klassen link , visited , hover , active . Diese Klassen sind f\u00fcr bestimmte Zust\u00e4nde des Elementes aktiv. Die Pseudoklasse link ist aktiv f\u00fcr noch nicht angeklickte Hyperlinks, visited bei bereits angeklickten, hover (gibt es f\u00fcr alle Elemente) sobald man die Maus \u00fcber das Element h\u00e4lt und active f\u00fcr den Zeitpunkt, zu dem man gerade den Hyperlink anklickt. Pseudoklassen werden \u00fcber element:pseudoklasse angesprochen. Ein CSS k\u00f6nnte also z.B. so aussehen: a { /* alle links */ text-decoration : none ; } a : link { /* noch nicht angeklickt */ color : red ; } a : visited { /* bereits angeklickt */ color : darkgrey ; } a : hover { /* mouse over */ color : limegreen ; } a : active { /* wird gerade angeklickt */ color : lightblue ; } Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :link a:link alle <a> -Elemente, die noch nicht besucht (geklickt) wurden :visited a:visited alle <a> -Elemente, die bereits besucht (geklickt) wurden :hover img:hover das <img> -Element, \u00fcber dem die Maus verweilt (mouse over) :active a:active das <a> -Element, auf das gerade geklickt wird :empty p:empty alle <p> -Elemente, die keine Kinder haben :first-child p:first-child alle <p> -Elemente, die das jeweils erste Kind ihres Elternelmentes sind :first-of-type p:first-of-type alle <p> -Elemente, die das jeweils erste <p> -Element ihres Elternelementes sind :nth-child(n) p:nth-child(2) alle <p> -Elemente, die das jeweils zweite Kind ihres Elternelmentes sind :nth-of-type(n) p:nth-of-type(2) alle <p> -Elemente, die das jeweils zweite <p> -Element ihres Elternelementes sind :only-child p:only-child alle <p> -Elemente, die das jeweils einzige Kind ihres Elternelementes sind :only-of-type p:only-of-type alle <p> -Elemente, die das jeweils einzige <p> -Element ihres Elternelementes sind In den runden Klammern, in denen Zahlen angegeben werden k\u00f6nnen ( :nth-child(n) und :nth-of-type(n) ), k\u00f6nnen Sie anstelle der Zahl auch odd und even einsetzen. So lassen sich z.B. Tabellenzeilen abwechselnd in verschiedenen Hintergrundfarben anzeigen /* unterschiedliche Spaltenfarben */ td : nth-child ( even ) { background-color : lightgrey ; } td : nth-child ( odd ) { background-color : darkgrey ; } /* unterschidliche Zeilenfarben */ tr : nth-child ( even ) { background-color : white ; } tr : nth-child ( odd ) { background-color : grey ; } Neben den oben genannten Pseudoklassen gibt es auch noch deren Pendants: :last-child , :last-of-type , :nth-last-child(n) , :nth-last-of-type(n) . F\u00fcr <input> -Elemente gibt es zus\u00e4tzlich eine Reihe weiterer Pseudo-Klassen. Hier eine Auswahl an Pseudo-Klassen f\u00fcr <input> -Elemente: Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :checked input:checked alle checked <input> -Elemente :disabled input:disabled alle disabled <input> -Elemente :enabled input:enabled alle disabled <input> -Elemente :focus input:focus das <input> -Element, das Fokus hat :invalid input:invalid alle <input> -Elemente mit einem ung\u00fcltigen Wert :optional input:optional alle <input> -Elemente, die nicht \"required\" sind :read-only input:read-only alle <input> -Elemente mit einem \"readonly\"-Attribut :read-write input:read-write alle <input> -Elemente, die kein \"readonly\"-Attribut haben :required input:required alle <input> -Elemente mit einem \"required\"-Attribut :valid input:valid alle <input> -Elemente mit einem g\u00fcltigen Wert Pseudo-Elemente sind so \u00e4hnlich wie Pseudo-Klassen, werden aber \u00fcber :: angesprochen anstelle : bei Pseudo-Klassen. Hier ein Beispiel f\u00fcr ein Pseudo-Element: HTML < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > CSS mit Pseudo-Elementen p :: first-letter { font-size : 300 % ; } p :: first-line { font-weight : bold ; } Das Ergebnis sieht dann so aus: Der erste Buchstabe in einem Absatz ist um das Dreifache gr\u00f6\u00dfer als der Rest der Textes und die erste Zeile in diesem Absatz wird fettgedruckt. Auswahl an Pseudo-Elementen: Pseudo-Elemente Beispiel Erl\u00e4uterung des Beispiels ::after p::after f\u00fcge etwas hinter den Inhalt aller <p> -Elemente ein ::before p::before f\u00fcge etwas vor den Inhalt aller <p> -Elemente ein ::first-letter p::first-letter alle ersten Buchstaben aller <p> -Elemente ::first-line p::first-line alle ersten Zeilen aller <p> -Elemente ::selection p::selection alle vom Nutzer markierten (selektierten) Teile eines <p> -Elementes Box Model \u00b6 Wenn Sie die Breite und die H\u00f6he eines Elementes mithilfe der width - und height -Eigenschaft von CSS angeben wollen, dann m\u00fcssen Sie beachten, dass Sie damit \"nur\" die H\u00f6he und Breite des Inahltes dieses Elementes angeben. Zur Gesamtbreite und -h\u00f6he eines Elementes z\u00e4hlen aber auch noch: padding : der Abstand des Inhaltes zum Rahmen ( border ) des Elementes, border : der Rahmen des Elementes (falls es einen gibt) und margin : der Abstand des Elementes zu den Nachbarelementen. Zusammen mit dem Inhalt des Elementes wird dieser Zusammenhang Box Model genannt. Folgende Darstellung zeigt das Box Model: Das Box Model besagt, dass alle HTML-Elemente als eine rechteckige \"Box\" verstanden werden k\u00f6nnen und diese Box aus dem Inhalt, padding , border und margin besteht. Beispiel Box Model - HTML < body > < h3 > Box Model </ h3 > < img src = \"./images/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ body > Beispiel Box Model - CSS div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } Das Bild hat eine Breite von 350px (siehe style -Attribut von img ). Der Inhalt des div -Containers hat eine Breite von 320px . Der Abstand des Inhalts zum Rahmen ist links und rechts jeweils 10px und der Rahmen ist links und rechts jeweils 5px gro\u00df. Ergibt zusammen eine Breite von ( 320 + 10 + 10 + 5 + 5 = 350 ). Somit ist das div inklusive padding und border exakt so breit wie das Bild: Das hier beschriebene Box Model entspricht der CSS-Definition box-sizing: content-box; . Dies ist der Standard (muss also nicht angegeben werden). Daneben gibt es auch noch die M\u00f6glichkeit, anstelle von content-box den Wert border-box zu verwenden. Dann ist in der Angabe von width und height sowohl padding als auch border integriert - erweitern Sie obige CSS-Definition um * { box-sizing : border-box ; } Dann wird der Unterschied sichtbar. border-box kann aber zu Problemen bei der Verwendung anderer Frameworks f\u00fchren und sollte deshalb eher nicht verwendet werden. Die display -Eigenschaft \u00b6 Mithilfe der display -Eigenschaft k\u00f6nnen Block-Elemente als Inline-Elemente definiert werden und umgedreht. display:block definiert ein Element als Block-Element, display: inline definiert ein Element als Inline-Element. Au\u00dferdem gibt es noch die M\u00f6glichkeit, mithilfe von display: none; ein Element unsichtbar zu schalten. Dieses Element nimmt dann im Viewport , also dem sichtbaren Bereich der Webseite, keinen Platz ein (im Gegensatz zu einem Element, das mithilfe von visibility: hidden; auf unsichtbar gesetzt wird). Hier ein Beispiel zur Verwendung der display -Eigenschaft. Fahren Sie unter dem Reiter Result mit der Maus \u00fcber das orange umrandete div . Es gibt noch viele weitere Werte f\u00fcr display , auf die wir aber nicht n\u00e4her eingehen wollen. Eine \u00dcbersicht finden Sie z.B. hier . Layout gestalten mithilfe von CSS \u00b6 Wir werden f\u00fcr das Layout unserer Webseiten in Zukunft CSS-Frameworks, wie z.B. Bootstrap oder Materialize oder SemanticUI verwenden. F\u00fcr das Layout stellen diese Frameworks insbesondere ein Grid-Konzept zur Verf\u00fcgung, das recht einfach nutzbar ist und sogar f\u00fcr eine responsive Darstellung sorgt. Zun\u00e4chst wollen wir jedoch die Prinzipien verstehen, auf denen diese Frameworks (und deren Grid-Konzept) basieren. Mehrspaltig mithilfe von float \u00b6 Generell werden Container untereinander dargestellt, in der Reihenfolge ihres Auftretens im HTML. Betrachten wir ein einfaches Beispiel: < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100px;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > Untereinander definiert sind 3 Block-Elemente ( <p> -Elemente), die jeweils eine eigene id besitzen. Der erste Absatz enth\u00e4lt ein Bild mit der Breite 100px . Dies f\u00fchrt zu folgender Ansicht: Alle drei Block-Elemente sind also, wie erwartet, untereinander. Umflie\u00dfen lassen: float \u00b6 Angenommen, wir wollen nun, dass das Bild von Text umflossen wird, dass also der Absatz mit dem Bild neben den danach folgenden Abs\u00e4tzen erscheint. Dann kommt die CSS-Eigenschaft float ins Spiel. Wir k\u00f6nnen entscheiden, ob das Bild links sein soll und umflossen wird ( float: left; ) oder rechts sein und dort vom Text umflossen werden soll ( float: right; ). Wir f\u00fcgen exemplarisch folgende Eigenschaft (f\u00fcr die id p1 ) hinzu: # p1 { float : left ; margin-right : 15 px ; } Damit legen wir fest, dass der erste Absatz umflossen werden soll (und links bleibt - float: left; ). Mit der margin-right -Eigenschaft sorgen wir f\u00fcr einen Abstand zum unflie\u00dfenden Text. Es entsteht folgende Ansicht: Das hei\u00dft, dass alle folgenden Abs\u00e4tze den ersten Absatz umflie\u00dfen. Umflie\u00dfen stoppen: clear \u00b6 Das Umflie\u00dfen kann auch wieder gestoppt werden. Dies geschieht mithilfe der clear -Eigenschaft. Um float: left zu stoppen, wird clear: left verwendet und um float: right zu stoppen, wird clear: right verwendet. Sollte es mehrere Elemente mit einer float -Eigenschaft geben, kann zum Stoppen clear: both verwendet werden. Wenn wir nun also f\u00fcr den dritten Absatz definieren: # p3 { clear : left ; } , dann beginnt der dritte Absatz wieder am Beginn einer neuen Zeile unterhalb der beiden Abs\u00e4tze p1 und p2 . mehr als 2 Spalten \u00b6 Wenn wir nun alle 3 Abs\u00e4tze nebeneinander setzen wollen, dann definieren wir einfach f\u00fcr alle 3 Abs\u00e4tze float:left; . Damit alle 3 Abs\u00e4tze die gleiche Breite haben, geben wir noch f\u00fcr jeden Absatz an, dass er 33.33% des Viewports einnimmt ( width: 31.33% + padding:1% - links und rechts): # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } Beachten Sie dazu noch folgende \u00c4nderung beim <img> -Element. Wir \u00e4ndern die Breite des Bildes von 100px (feste Breite) auf 100% (relative Breite - relativ zum Elternelement, das ist <p id=\"p1\"> ). < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > Sch\u00f6ner - und \u00fcblicher, weil sp\u00e4ter auch so beim Grid-Konzept - ist es, den Elementen, die man nebeneinander anordnen m\u00f6chte, eine CSS-Klasse zuzuweisen, z.B. class=\"column\" und f\u00fcr diese Klasse dann die float -Eigenschaft mit zugeh\u00f6riger relativer Breite zu definieren. Au\u00dferdem f\u00fcgt man oft um die Spalten einen weiteren Container mit einer Klasse class=\"row\" (Beispiel) und kann dann f\u00fcr diese Klasse ( .row:after die clear -Eigenschaft definieren). Ein solches Beispiel nochmal hier: flexbox \u00b6 Wir werden sehen, dass das Grid-Konzept, das wir zuk\u00fcnftig verwenden werden, auf der float -Eigenschaft (zusammen mit width ) basiert. Ein Konzept, welches von der Komplexit\u00e4t \"zwischen\" float und dem Grid-Konzept liegt, ist flexbox . Mit flexbox ist das Nebeneinanderpositionieren von Containern recht einfach - insbesondere lassen sich auch recht leicht unterschiedliche Spaltenbreiten definieren- Wir gehen hier nicht weiter auf flexbox ein, sondern verweisen auf z.B. A Guide to Flexbox . Wertangaben in CSS \u00b6 Numerische Werte k\u00f6nnen in CSS absolut oder relativ angegeben werden, je nach verwendeter Einheit. Folgende Tabelle gibt eine \u00dcbersicht \u00fcber die unterschiedlichen Einheiten f\u00fcr numerische Werte. Einheit Angabetyp Bedeutung % relativ relativ entweder zur elementeigenen Gr\u00f6\u00dfe, zur Gr\u00f6\u00dfe des Elternelements oder zum allegemeinen Kontext cm absolut Zentimenter em relativ Schriftgr\u00f6\u00dfe des Elements (bei font-size aber Schriftgr\u00f6\u00dfe des Elternelements) ex relativ H\u00f6he des Kleinbuchstabens x im Element (bei font-size aber die Schriftgr\u00f6\u00dfe von x im Elternelement) in absolut inch (1 inch = 2,54 cm) mm absolut Milimeter pc absolut pica (1 pc = 12 Punkt) pt absolut Punkt (1 Punkt = 1/72 inch) px absolut und relativ absolut auf ein und dasselbe Ausgabeger\u00e4t bezogen und relativ von Ausgabeger\u00e4t zu Ausgabeger\u00e4t (Pixeldichte) Sie sollten absolute Angaben nur in Ausnahmef\u00e4llen verwenden. Wann immer es geht, ist eine relative Gr\u00f6\u00dfenangabe vorzuziehen. Somit werden am h\u00e4ufigsten % -Angaben und am zweith\u00e4ufigsten px -Angaben verwendet. em sieht man auch noch recht h\u00e4ufig. Von allen anderen Einheiten ist eher abzuraten. Custom Properties \u00b6 Sie k\u00f6nnen sich eigene Variablen f\u00fcr die Verwendung in CSS-Definitionen erstellen. Es ist \u00fcblich, solche Variablen in einem \"gro\u00dfen\" Scope zu definieren, da sie auf den definierten Scope beschr\u00e4nkt sind. D.h., dass man solche Variablen typischerweise f\u00fcr * (also alle Elemente) oder body definiert. Die Variablen beginnen stets mit -- , also z.B. --variablenname . Der Zugriff auf die Variablen erfolgt mit var() , also z.B. var(--variablenname) . Hier ein Beispiel f\u00fcr die Definition von HTW-Farben und -Font: * { -- htw-gruen : #76B900 ; -- htw-grau : #AFAFAF ; -- htw-orange : #FF5F00 ; -- htw-blau : #0082D1 ; -- htw-font : Verdana , Geneva , sans-serif ; } body { font-family : var ( -- htw - font ); } h1 { color : var ( -- htw - gruen ); } li a : hover { background-color : var ( -- htw - orange ); } . active { background-color : var ( -- htw - gruen ); } Gewichtung der Selektoren \u00b6 Insbesondere, wenn Sie noch CSS-Frameworks einbinden und/oder viele CSS-Definitionen haben, stellt sich die Frage, welche der Definitionen \u00fcberhaupt wirken. Eine gro\u00dfe Hilfe sind hier die Entwicklertools der Browser . Im folgenden Screenshot sehen Sie die Developer tools von Chrome. Im rechten unteren Fenster sind die definierten Styles angezeigt. Die nicht wirksamen Styledefinitionen sind durchgestrichen. Um zu ermitteln, welche Definition Anwendung findet, gibt es eine Gewichtung der Selektoren . Wichtig ist zu wissen, dass die Reihenfolge der Definitionen, egal ob im <style> -Element oder in externen CSS-Dateien keine Rolle spielt! Wir betrachten folgendes Beispiel, um die Gewichtung der Selektoren zu bestimmen: Wenn Sie sich zun\u00e4chst nur die CSS-Definitionen anschauen, dann sehen Sie, dass einem Link f\u00fcnf verschiedene Farben zugewiesen werden. Die Links sind aber rot. Es muss also aus einem bestimmten Grund die Definition # navigation a . link { color : red ; } am st\u00e4rksten wirken, d.h. der Selektor #navigation a.link hat in unserem Beispiel die st\u00e4rkste Gewichtung. Um die Gewichtung der Selektoren zu ermitteln, werden diese kategorisiert: Kategorie A : erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind Kategorie B : erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id -Attributen Kategorie C : Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen Kategorie D : Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente Bei der Reihenfolge der Sortierung gilt: A > B > C > D , also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2 . Betrachten wir unser Beispiel: a:link : 0 0 1 1 (eine Pseudoklasse (link) und ein Element (a)) .link : 0 0 1 0 (eine Klasse) #navigation a.link : 0 1 1 1 (Element mit id -Attribut, eine Klasse und eine Element) li a : 0 0 0 2 (zwei Elemente) #navigation li a : 0 1 0 2 (Element mit id -Attribut, zwei Elemente) Es gilt 0 1 1 1 > 0 1 0 2 > 0 0 1 1 > 0 0 1 0 > 0 0 0 2 und deshalb sind die Links rot. In unserem Beispiel kommt kein style -Attribut vor, deshalb ist bei keinem Selektor die Kategorie A besetzt. W\u00e4re bei einem Link im HTML beispielsweise: < li >< a href = \"startseite.html\" class = \"link\" style = \"color: orange;\" > Startseite </ a ></ li > dann w\u00e4re dieser Link orange. Weitere Informationen \u00fcber CSS \u00b6 Folien CSS","title":"CSS"},{"location":"css/#css","text":"C ascading S tyle S heets werden verwendet, um dem HTML-Dokument einen ansprechenden Stil (Font, Farben, ...) zuzuweisen, das Layout des HTML-Dokumentes zu definieren (3-Spalten-Layout, 2-Spalten-Layout, Kopf- und Fu\u00dfzeile, ...) das Layout responsive zu gestalten, d.h. unterschiedliche Ansichten des HTML-Dokumentes zu definieren, je nach Bildschirmgr\u00f6\u00dfe (Mobile, Tablet, Desktop) Generell gilt, dass wir mit HTML ausschlie\u00dflich die Inhalte definieren, das Design jedoch mit CSS. Sehen wir uns dazu folgendes erstes Beispiel an: In obigem Beispiel werden f\u00fcr die HTML-Elemente, die in unserem HTML-Doument verwendet werden, unterschiedliche CSS-Eigenschaften definiert. Die generelle Syntax f\u00fcr CSS-Eigenschaften ist: selektor { eigenschaft : wert ; } So wird in obigem Beispiel f\u00fcr das HTML-Element body der Eigenschaft font-family der Wert verdana zugeordnet. Somit ist der gesamte Text in <body> in der Schriftart Verdana . Dies gilt auch f\u00fcr alle Elemente, die hierarchisch \"unter\" <body> angesiedelt sind, also alle <h1> -, <h3> -, <p> -, <span> - und <a> -Elemente. Die Eigenschaftsdefinitionen kaskadieren also nach unten - daher cascading style sheets. Da alle <p> -Elemente fett geschrieben werden, sind auch die darin enthaltenen Elemente fett, also <a> und <span> . Begriffsbezeichnungen bei CSS-Definitionen:","title":"CSS"},{"location":"css/#ort-der-css-definitionen","text":"Es gibt drei \"Orte\", an denen CSS-Eigenschaften f\u00fcr ein HTML-Dokument definiert werden k\u00f6nnen: in einer externen CSS-Datei. Diese endet typischerweise mit der Dateiendung .css und wird im <head> des HTML-Dokumentes mithilfe von <link rel=\"stylesheet\" href=\"mystyle.css\"> (hier hei\u00dft die externe Datei mystyle.css ) eingebunden (siehe unten), innerhalb eines <style> -Elementes ebenfalls im <head> des HTML-Dokumentes (siehe unten), als style -Attribut eines HTML-Elementes (siehe unten). 3 Orte der CSS-Definitionen - HTML <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > <!-- 1. Einbinden einer externen CSS-Datei --> < link rel = \"stylesheet\" href = \"mystyle.css\" > < title > CSS-Einf\u00fchrung </ title > <!-- 2. Verwenden des <style>-Elementes --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > \u00dcberschrift </ h1 > <!-- 3. style-Attribut eines HTML-Elementes --> < p style = \"border: 1px solid blue;\" > Das ist ein Absatz. </ p > </ body > </ html > mystyle.css body { font-family : vardana ; } Im obigen Beispiel wird in der externen CSS-Datei mystyle.css definiert, dass der im gesamten Dokument verwendete Font Verdana sein soll. Im <style> -Element wird als Schriftfarbe f\u00fcr <h1> -\u00dcberschriften rot festgelegt, das gilt f\u00fcr alle <h1> -\u00dcberschriften des Dokumentes. Das style -Attribut des HTML-Elementes <p> legt f\u00fcr diesen Absatz fest, dass er blau umrandet sein soll. Das gilt nicht f\u00fcr alle <p> -Elemente, sondern nur f\u00fcr das Element mit dem style -Attribut. Eine recht gute \u00dcbersicht \u00fcber alle existierenden CSS-Eigenschaften bietet W3Schhols .","title":"Ort der CSS-Definitionen"},{"location":"css/#selektoren","text":"Bis jetzt haben wir in unseren Beispielen \"nur\" HTML-Elemente als Selektoren verwendet. Es gibt eine Vielzahl anderer M\u00f6glichkeiten, bestimmten HTML-Elementen CSS-Eigenschaften zuzuweisen. Nochmal zur Wiederholung: der generelle Aufbau einer CSS-Definition ist selektor { eigenschaft : wert ; } Wir werden nun die unterschiedlichen M\u00f6glichkeiten der Selektoren (und Operatoren \u00fcber diese Selektoren) betrachten. Wir betrachten zun\u00e4chst HTML-Elemente, IDs, Klassen und Attribute als Selektoren. Zu den IDs ist zu sagen, dass Sie jedem HTML-Element eine eindeutige id zuweisen k\u00f6nnen, z.B. <div id=\"main\"> . Jedes Element darf nur eine id besitzen und eine id darf in einem HTML-Dokument nur einmal vergeben - muss also eindeutig - sein. Klassen weisen Sie Elementen mit dem class -Attribut zu, also z.B. <div class=\"smallFont blueColor yellowBackground\"> . Klassennamen k\u00f6nnen Sie frei w\u00e4hlen (keine Leer- und Sonderzeichen!). Wenn Sie, wie im Beispiel, mehrere Klassen zuweisen, dann durch einen Leerschritt getrennt. Im Beispiel wurde dem <div> drei Klassen zugewiesen. Sie k\u00f6nnen einem Element beliebig viele Klassen zuweisen und eine Klasse kann beliebig vielen Elementen zugewiesen werden. In den CSS-Deklarationen wird mittels # auf die IDs zugegriffen und mittels . auf die jeweilige Klasse. Siehe die folgende Liste der m\u00f6glichen Selektoren unter Verwendung von Elementnamen, IDs, Klassen und Attributen: Selektor Beispiel Erl\u00e4uterung * * alle HTML-Elemente ausgew\u00e4hlt (Wildcard) element h1 alle <h1> -Elemente ausgew\u00e4hlt element element section h1 alle <h1> -Elemente innnerhalb eines <section> -Element ausgew\u00e4hlt (Nachfahren) element, element section, h1 alle <h1> -Elemente und alle <section> -Elemente ausgew\u00e4hlt element>element section>h1 alle <h1> -Elemente deren direkte Eltern ein <section> -Element sind (Kinder) element+element section+h1 alle <h1> -Elemente, die direkt nach einem <section> -Element stehen .class .container alle Elemente mit class=\"container\" , d.h. container muss eine zugeordnete Klasse sein .class1.class2 .container.top alle Elemente mit class=\"container top\" , d.h. container und top m\u00fcssen zugeordnete Klassen sein .class1 .class2 .container .top alle Elemente mit class=\"top\" , welche in Elementen mit class=\"container\" sind (Nachfahren) #id #main das Element mit id=\"main\" (id eindeutig - nur einmal vergeben) [attribute] [src] alle Elemente mit einem src -Attribut [attribute=value] [target=_blank] alle Elemente, die ein target -Attribut besitzen und dessen Wert muss genau _blank sein [attribute*=value] [src*=\"localhost\"] alle Elemente, die ein src -Attribut besitzen und dessen Wert enth\u00e4lt das Wort localhost [attribute^=value] [href^=\"https\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert beginnt mit dem Wort https [attribute$=value] [href$=\"php\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert endet mit dem Wort php Dar\u00fcber hinaus gibt es auch sogenannte Pseudo-Klassen und Pseudo-Elemente , die wir als Selektoren verwenden k\u00f6nnen. Wir betrachten zum besseren Verst\u00e4ndinis zun\u00e4chst ein Beispiel, um eine Idee davon zu bekommen. Angenommen, wir haben in unserem HTML-Dokument einen Hyperlink ( # refrenziert auf den Beginn derselben Seite): < a href = \"#\" > Neu laden </ a > So ein Hyperlink besitzt zus\u00e4tzliche Pseudo-Klassen link , visited , hover , active . Diese Klassen sind f\u00fcr bestimmte Zust\u00e4nde des Elementes aktiv. Die Pseudoklasse link ist aktiv f\u00fcr noch nicht angeklickte Hyperlinks, visited bei bereits angeklickten, hover (gibt es f\u00fcr alle Elemente) sobald man die Maus \u00fcber das Element h\u00e4lt und active f\u00fcr den Zeitpunkt, zu dem man gerade den Hyperlink anklickt. Pseudoklassen werden \u00fcber element:pseudoklasse angesprochen. Ein CSS k\u00f6nnte also z.B. so aussehen: a { /* alle links */ text-decoration : none ; } a : link { /* noch nicht angeklickt */ color : red ; } a : visited { /* bereits angeklickt */ color : darkgrey ; } a : hover { /* mouse over */ color : limegreen ; } a : active { /* wird gerade angeklickt */ color : lightblue ; } Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :link a:link alle <a> -Elemente, die noch nicht besucht (geklickt) wurden :visited a:visited alle <a> -Elemente, die bereits besucht (geklickt) wurden :hover img:hover das <img> -Element, \u00fcber dem die Maus verweilt (mouse over) :active a:active das <a> -Element, auf das gerade geklickt wird :empty p:empty alle <p> -Elemente, die keine Kinder haben :first-child p:first-child alle <p> -Elemente, die das jeweils erste Kind ihres Elternelmentes sind :first-of-type p:first-of-type alle <p> -Elemente, die das jeweils erste <p> -Element ihres Elternelementes sind :nth-child(n) p:nth-child(2) alle <p> -Elemente, die das jeweils zweite Kind ihres Elternelmentes sind :nth-of-type(n) p:nth-of-type(2) alle <p> -Elemente, die das jeweils zweite <p> -Element ihres Elternelementes sind :only-child p:only-child alle <p> -Elemente, die das jeweils einzige Kind ihres Elternelementes sind :only-of-type p:only-of-type alle <p> -Elemente, die das jeweils einzige <p> -Element ihres Elternelementes sind In den runden Klammern, in denen Zahlen angegeben werden k\u00f6nnen ( :nth-child(n) und :nth-of-type(n) ), k\u00f6nnen Sie anstelle der Zahl auch odd und even einsetzen. So lassen sich z.B. Tabellenzeilen abwechselnd in verschiedenen Hintergrundfarben anzeigen /* unterschiedliche Spaltenfarben */ td : nth-child ( even ) { background-color : lightgrey ; } td : nth-child ( odd ) { background-color : darkgrey ; } /* unterschidliche Zeilenfarben */ tr : nth-child ( even ) { background-color : white ; } tr : nth-child ( odd ) { background-color : grey ; } Neben den oben genannten Pseudoklassen gibt es auch noch deren Pendants: :last-child , :last-of-type , :nth-last-child(n) , :nth-last-of-type(n) . F\u00fcr <input> -Elemente gibt es zus\u00e4tzlich eine Reihe weiterer Pseudo-Klassen. Hier eine Auswahl an Pseudo-Klassen f\u00fcr <input> -Elemente: Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :checked input:checked alle checked <input> -Elemente :disabled input:disabled alle disabled <input> -Elemente :enabled input:enabled alle disabled <input> -Elemente :focus input:focus das <input> -Element, das Fokus hat :invalid input:invalid alle <input> -Elemente mit einem ung\u00fcltigen Wert :optional input:optional alle <input> -Elemente, die nicht \"required\" sind :read-only input:read-only alle <input> -Elemente mit einem \"readonly\"-Attribut :read-write input:read-write alle <input> -Elemente, die kein \"readonly\"-Attribut haben :required input:required alle <input> -Elemente mit einem \"required\"-Attribut :valid input:valid alle <input> -Elemente mit einem g\u00fcltigen Wert Pseudo-Elemente sind so \u00e4hnlich wie Pseudo-Klassen, werden aber \u00fcber :: angesprochen anstelle : bei Pseudo-Klassen. Hier ein Beispiel f\u00fcr ein Pseudo-Element: HTML < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > CSS mit Pseudo-Elementen p :: first-letter { font-size : 300 % ; } p :: first-line { font-weight : bold ; } Das Ergebnis sieht dann so aus: Der erste Buchstabe in einem Absatz ist um das Dreifache gr\u00f6\u00dfer als der Rest der Textes und die erste Zeile in diesem Absatz wird fettgedruckt. Auswahl an Pseudo-Elementen: Pseudo-Elemente Beispiel Erl\u00e4uterung des Beispiels ::after p::after f\u00fcge etwas hinter den Inhalt aller <p> -Elemente ein ::before p::before f\u00fcge etwas vor den Inhalt aller <p> -Elemente ein ::first-letter p::first-letter alle ersten Buchstaben aller <p> -Elemente ::first-line p::first-line alle ersten Zeilen aller <p> -Elemente ::selection p::selection alle vom Nutzer markierten (selektierten) Teile eines <p> -Elementes","title":"Selektoren"},{"location":"css/#box-model","text":"Wenn Sie die Breite und die H\u00f6he eines Elementes mithilfe der width - und height -Eigenschaft von CSS angeben wollen, dann m\u00fcssen Sie beachten, dass Sie damit \"nur\" die H\u00f6he und Breite des Inahltes dieses Elementes angeben. Zur Gesamtbreite und -h\u00f6he eines Elementes z\u00e4hlen aber auch noch: padding : der Abstand des Inhaltes zum Rahmen ( border ) des Elementes, border : der Rahmen des Elementes (falls es einen gibt) und margin : der Abstand des Elementes zu den Nachbarelementen. Zusammen mit dem Inhalt des Elementes wird dieser Zusammenhang Box Model genannt. Folgende Darstellung zeigt das Box Model: Das Box Model besagt, dass alle HTML-Elemente als eine rechteckige \"Box\" verstanden werden k\u00f6nnen und diese Box aus dem Inhalt, padding , border und margin besteht. Beispiel Box Model - HTML < body > < h3 > Box Model </ h3 > < img src = \"./images/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ body > Beispiel Box Model - CSS div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } Das Bild hat eine Breite von 350px (siehe style -Attribut von img ). Der Inhalt des div -Containers hat eine Breite von 320px . Der Abstand des Inhalts zum Rahmen ist links und rechts jeweils 10px und der Rahmen ist links und rechts jeweils 5px gro\u00df. Ergibt zusammen eine Breite von ( 320 + 10 + 10 + 5 + 5 = 350 ). Somit ist das div inklusive padding und border exakt so breit wie das Bild: Das hier beschriebene Box Model entspricht der CSS-Definition box-sizing: content-box; . Dies ist der Standard (muss also nicht angegeben werden). Daneben gibt es auch noch die M\u00f6glichkeit, anstelle von content-box den Wert border-box zu verwenden. Dann ist in der Angabe von width und height sowohl padding als auch border integriert - erweitern Sie obige CSS-Definition um * { box-sizing : border-box ; } Dann wird der Unterschied sichtbar. border-box kann aber zu Problemen bei der Verwendung anderer Frameworks f\u00fchren und sollte deshalb eher nicht verwendet werden.","title":"Box Model"},{"location":"css/#die-display-eigenschaft","text":"Mithilfe der display -Eigenschaft k\u00f6nnen Block-Elemente als Inline-Elemente definiert werden und umgedreht. display:block definiert ein Element als Block-Element, display: inline definiert ein Element als Inline-Element. Au\u00dferdem gibt es noch die M\u00f6glichkeit, mithilfe von display: none; ein Element unsichtbar zu schalten. Dieses Element nimmt dann im Viewport , also dem sichtbaren Bereich der Webseite, keinen Platz ein (im Gegensatz zu einem Element, das mithilfe von visibility: hidden; auf unsichtbar gesetzt wird). Hier ein Beispiel zur Verwendung der display -Eigenschaft. Fahren Sie unter dem Reiter Result mit der Maus \u00fcber das orange umrandete div . Es gibt noch viele weitere Werte f\u00fcr display , auf die wir aber nicht n\u00e4her eingehen wollen. Eine \u00dcbersicht finden Sie z.B. hier .","title":"Die display-Eigenschaft"},{"location":"css/#layout-gestalten-mithilfe-von-css","text":"Wir werden f\u00fcr das Layout unserer Webseiten in Zukunft CSS-Frameworks, wie z.B. Bootstrap oder Materialize oder SemanticUI verwenden. F\u00fcr das Layout stellen diese Frameworks insbesondere ein Grid-Konzept zur Verf\u00fcgung, das recht einfach nutzbar ist und sogar f\u00fcr eine responsive Darstellung sorgt. Zun\u00e4chst wollen wir jedoch die Prinzipien verstehen, auf denen diese Frameworks (und deren Grid-Konzept) basieren.","title":"Layout gestalten mithilfe von CSS"},{"location":"css/#mehrspaltig-mithilfe-von-float","text":"Generell werden Container untereinander dargestellt, in der Reihenfolge ihres Auftretens im HTML. Betrachten wir ein einfaches Beispiel: < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100px;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > Untereinander definiert sind 3 Block-Elemente ( <p> -Elemente), die jeweils eine eigene id besitzen. Der erste Absatz enth\u00e4lt ein Bild mit der Breite 100px . Dies f\u00fchrt zu folgender Ansicht: Alle drei Block-Elemente sind also, wie erwartet, untereinander.","title":"Mehrspaltig mithilfe von float"},{"location":"css/#umflieen-lassen-float","text":"Angenommen, wir wollen nun, dass das Bild von Text umflossen wird, dass also der Absatz mit dem Bild neben den danach folgenden Abs\u00e4tzen erscheint. Dann kommt die CSS-Eigenschaft float ins Spiel. Wir k\u00f6nnen entscheiden, ob das Bild links sein soll und umflossen wird ( float: left; ) oder rechts sein und dort vom Text umflossen werden soll ( float: right; ). Wir f\u00fcgen exemplarisch folgende Eigenschaft (f\u00fcr die id p1 ) hinzu: # p1 { float : left ; margin-right : 15 px ; } Damit legen wir fest, dass der erste Absatz umflossen werden soll (und links bleibt - float: left; ). Mit der margin-right -Eigenschaft sorgen wir f\u00fcr einen Abstand zum unflie\u00dfenden Text. Es entsteht folgende Ansicht: Das hei\u00dft, dass alle folgenden Abs\u00e4tze den ersten Absatz umflie\u00dfen.","title":"Umflie\u00dfen lassen: float"},{"location":"css/#umflieen-stoppen-clear","text":"Das Umflie\u00dfen kann auch wieder gestoppt werden. Dies geschieht mithilfe der clear -Eigenschaft. Um float: left zu stoppen, wird clear: left verwendet und um float: right zu stoppen, wird clear: right verwendet. Sollte es mehrere Elemente mit einer float -Eigenschaft geben, kann zum Stoppen clear: both verwendet werden. Wenn wir nun also f\u00fcr den dritten Absatz definieren: # p3 { clear : left ; } , dann beginnt der dritte Absatz wieder am Beginn einer neuen Zeile unterhalb der beiden Abs\u00e4tze p1 und p2 .","title":"Umflie\u00dfen stoppen: clear"},{"location":"css/#mehr-als-2-spalten","text":"Wenn wir nun alle 3 Abs\u00e4tze nebeneinander setzen wollen, dann definieren wir einfach f\u00fcr alle 3 Abs\u00e4tze float:left; . Damit alle 3 Abs\u00e4tze die gleiche Breite haben, geben wir noch f\u00fcr jeden Absatz an, dass er 33.33% des Viewports einnimmt ( width: 31.33% + padding:1% - links und rechts): # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } Beachten Sie dazu noch folgende \u00c4nderung beim <img> -Element. Wir \u00e4ndern die Breite des Bildes von 100px (feste Breite) auf 100% (relative Breite - relativ zum Elternelement, das ist <p id=\"p1\"> ). < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > Sch\u00f6ner - und \u00fcblicher, weil sp\u00e4ter auch so beim Grid-Konzept - ist es, den Elementen, die man nebeneinander anordnen m\u00f6chte, eine CSS-Klasse zuzuweisen, z.B. class=\"column\" und f\u00fcr diese Klasse dann die float -Eigenschaft mit zugeh\u00f6riger relativer Breite zu definieren. Au\u00dferdem f\u00fcgt man oft um die Spalten einen weiteren Container mit einer Klasse class=\"row\" (Beispiel) und kann dann f\u00fcr diese Klasse ( .row:after die clear -Eigenschaft definieren). Ein solches Beispiel nochmal hier:","title":"mehr als 2 Spalten"},{"location":"css/#flexbox","text":"Wir werden sehen, dass das Grid-Konzept, das wir zuk\u00fcnftig verwenden werden, auf der float -Eigenschaft (zusammen mit width ) basiert. Ein Konzept, welches von der Komplexit\u00e4t \"zwischen\" float und dem Grid-Konzept liegt, ist flexbox . Mit flexbox ist das Nebeneinanderpositionieren von Containern recht einfach - insbesondere lassen sich auch recht leicht unterschiedliche Spaltenbreiten definieren- Wir gehen hier nicht weiter auf flexbox ein, sondern verweisen auf z.B. A Guide to Flexbox .","title":"flexbox"},{"location":"css/#wertangaben-in-css","text":"Numerische Werte k\u00f6nnen in CSS absolut oder relativ angegeben werden, je nach verwendeter Einheit. Folgende Tabelle gibt eine \u00dcbersicht \u00fcber die unterschiedlichen Einheiten f\u00fcr numerische Werte. Einheit Angabetyp Bedeutung % relativ relativ entweder zur elementeigenen Gr\u00f6\u00dfe, zur Gr\u00f6\u00dfe des Elternelements oder zum allegemeinen Kontext cm absolut Zentimenter em relativ Schriftgr\u00f6\u00dfe des Elements (bei font-size aber Schriftgr\u00f6\u00dfe des Elternelements) ex relativ H\u00f6he des Kleinbuchstabens x im Element (bei font-size aber die Schriftgr\u00f6\u00dfe von x im Elternelement) in absolut inch (1 inch = 2,54 cm) mm absolut Milimeter pc absolut pica (1 pc = 12 Punkt) pt absolut Punkt (1 Punkt = 1/72 inch) px absolut und relativ absolut auf ein und dasselbe Ausgabeger\u00e4t bezogen und relativ von Ausgabeger\u00e4t zu Ausgabeger\u00e4t (Pixeldichte) Sie sollten absolute Angaben nur in Ausnahmef\u00e4llen verwenden. Wann immer es geht, ist eine relative Gr\u00f6\u00dfenangabe vorzuziehen. Somit werden am h\u00e4ufigsten % -Angaben und am zweith\u00e4ufigsten px -Angaben verwendet. em sieht man auch noch recht h\u00e4ufig. Von allen anderen Einheiten ist eher abzuraten.","title":"Wertangaben in CSS"},{"location":"css/#custom-properties","text":"Sie k\u00f6nnen sich eigene Variablen f\u00fcr die Verwendung in CSS-Definitionen erstellen. Es ist \u00fcblich, solche Variablen in einem \"gro\u00dfen\" Scope zu definieren, da sie auf den definierten Scope beschr\u00e4nkt sind. D.h., dass man solche Variablen typischerweise f\u00fcr * (also alle Elemente) oder body definiert. Die Variablen beginnen stets mit -- , also z.B. --variablenname . Der Zugriff auf die Variablen erfolgt mit var() , also z.B. var(--variablenname) . Hier ein Beispiel f\u00fcr die Definition von HTW-Farben und -Font: * { -- htw-gruen : #76B900 ; -- htw-grau : #AFAFAF ; -- htw-orange : #FF5F00 ; -- htw-blau : #0082D1 ; -- htw-font : Verdana , Geneva , sans-serif ; } body { font-family : var ( -- htw - font ); } h1 { color : var ( -- htw - gruen ); } li a : hover { background-color : var ( -- htw - orange ); } . active { background-color : var ( -- htw - gruen ); }","title":"Custom Properties"},{"location":"css/#gewichtung-der-selektoren","text":"Insbesondere, wenn Sie noch CSS-Frameworks einbinden und/oder viele CSS-Definitionen haben, stellt sich die Frage, welche der Definitionen \u00fcberhaupt wirken. Eine gro\u00dfe Hilfe sind hier die Entwicklertools der Browser . Im folgenden Screenshot sehen Sie die Developer tools von Chrome. Im rechten unteren Fenster sind die definierten Styles angezeigt. Die nicht wirksamen Styledefinitionen sind durchgestrichen. Um zu ermitteln, welche Definition Anwendung findet, gibt es eine Gewichtung der Selektoren . Wichtig ist zu wissen, dass die Reihenfolge der Definitionen, egal ob im <style> -Element oder in externen CSS-Dateien keine Rolle spielt! Wir betrachten folgendes Beispiel, um die Gewichtung der Selektoren zu bestimmen: Wenn Sie sich zun\u00e4chst nur die CSS-Definitionen anschauen, dann sehen Sie, dass einem Link f\u00fcnf verschiedene Farben zugewiesen werden. Die Links sind aber rot. Es muss also aus einem bestimmten Grund die Definition # navigation a . link { color : red ; } am st\u00e4rksten wirken, d.h. der Selektor #navigation a.link hat in unserem Beispiel die st\u00e4rkste Gewichtung. Um die Gewichtung der Selektoren zu ermitteln, werden diese kategorisiert: Kategorie A : erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind Kategorie B : erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id -Attributen Kategorie C : Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen Kategorie D : Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente Bei der Reihenfolge der Sortierung gilt: A > B > C > D , also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2 . Betrachten wir unser Beispiel: a:link : 0 0 1 1 (eine Pseudoklasse (link) und ein Element (a)) .link : 0 0 1 0 (eine Klasse) #navigation a.link : 0 1 1 1 (Element mit id -Attribut, eine Klasse und eine Element) li a : 0 0 0 2 (zwei Elemente) #navigation li a : 0 1 0 2 (Element mit id -Attribut, zwei Elemente) Es gilt 0 1 1 1 > 0 1 0 2 > 0 0 1 1 > 0 0 1 0 > 0 0 0 2 und deshalb sind die Links rot. In unserem Beispiel kommt kein style -Attribut vor, deshalb ist bei keinem Selektor die Kategorie A besetzt. W\u00e4re bei einem Link im HTML beispielsweise: < li >< a href = \"startseite.html\" class = \"link\" style = \"color: orange;\" > Startseite </ a ></ li > dann w\u00e4re dieser Link orange.","title":"Gewichtung der Selektoren"},{"location":"css/#weitere-informationen-uber-css","text":"Folien CSS","title":"Weitere Informationen \u00fcber CSS"},{"location":"html/","text":"HTML \u00b6 Einleitung \u00b6 HTML steht f\u00fcr H yper T ext M arkup L anguage. HTML ist eine sogenannte Auszeichnungssprache . Das bedeutet, dass Textelementen sogenannte Tags (HTML-Elemente) zugeordnet werden, um dem Text, der von einem solchen Tag umschlossen wird, eine Bedeutung zuzuweisen - der Text wird ausgezeichnet. Beispiel: < h1 > Gro\u00dfe \u00dcberschrift </ h1 > Im obigen Beispiel wurde der Text Gro\u00dfe \u00dcberschrift durch das HTML-Element h1 ausgezeichnet. Die Bedeutung dieses Elementes ist, dass es sich bei dem ausgezeichneten Text um eine \u00dcberschrift handelt. Es gibt 6 HTML-Elemente, die \u00dcberschriften charakterisieren: h1 , h2 , h3 , h4 , h5 , h6 . Die Nummern geben die Gr\u00f6\u00dfe der \u00dcberschrift an: h1 ist die gr\u00f6\u00dfte \u00dcberschrift, h6 die kleinste. Klicken Sie im folgenden Fenster auf den Reiter \"Result\" , um die Unterschiede zu sehen: Hierarchische Anordnung der HTML-Elemente \u00b6 HTML-Elemente bestehen - bis auf wenige Ausnahmen - aus einem Start-Tag <tag> und einem Ende-Tag </tag> (tag steht hier f\u00fcr den Namen eines beliebigen Elementes). Wird ein neues HTML-Element el2 innerhalb eines anderen HTML-Elementes el1 ge\u00f6ffnet, so muss el2 auch geschlossen werden, bevor el1 geschlossen wird. Success < el1 > diese Anordnung der < el2 > Elemente ist korrekt </ el2 > </ el1 > Failure < el1 > diese Anordnung der < el2 > Elemente ist falsch </ el1 > </ el2 > Es gibt nur wenige HTML-Elemente, die nicht aus einem Start- und einem Ende-Tag bestehen, sondern sogenannte stand alone Tags sind. Ein typisches Beispiel ist der Zeilenumbruch <br> . Um einerseits zu symbolisieren, dass es sich um Start- und Ende-Tag in einem handelt, insbesondere aber, um XHTML -konform zu sein, geben wir f\u00fcr solche stand-alone Tags den Slash vor der schlie\u00dfenden spitzen Klammer an, d.h. wir schreiben <br /> . Grundger\u00fcst einer HTML-Seite \u00b6 Prinzipiell besteht eine HTML-Seite aus einem <head> - und einem <body> -Bereich. Im <head> -Bereich k\u00f6nnen Metadaten \u00fcber die Seite definiert werden. Der <body> -Bereich definiert den sichtbaren Bereich der Seite, also das, was im Browser dargestellt wird. Eingeschlossen werden der <head> - und der <body> -Bereich von einem <html> -Element. <!DOCTYPE html> < html > < head > < title > Seitentitel </ title > </ head > < body > < h1 > Das ist eine gro\u00dfe \u00dcberschrift </ h1 > < p > Das ist ein Absatz. </ p > </ body > </ html > Das obige Beispiel zeigt ein Grundger\u00fcst einer HTML-Seite. <!DOCTYPE html> gibt dem Browser an, dass es sich um eine HTML-Datei handelt, die vom Browser \"gerendert\" , d.h. dargestellt wird. Der <head> -Bereich enth\u00e4lt in diesem Beispiel nur ein <title> -Element. Dieser Titel wird im Browser im Reiter (Tab) gezeigt. Au\u00dferdem wird der Titel in der Ergebnisliste einer Suchmaschine verwendet. Das <body> -Element, also der im Browser dargestellte Bereich, enth\u00e4lt eine \u00dcberschrift ( <h1> ) und einen Absatz ( <p> ). Aufgabe: Erstellen Sie eine Datei index.html und f\u00fcgen Sie obigen HTML-Code ein. Rufen Sie die Datei im Browser auf. Metadaten im Head \u00b6 Das <head> -Element ist der Container f\u00fcr (Meta-)Daten \u00fcber das Webdokument. Das <head> -Element kommt in das <html> -Element und vor das <body> -Element. Die Metadaten werden nicht dargestellt. Typische HTML-Elemente f\u00fcr Metadaten sind: <title> : Titel des Dokumentes (im Tab und in der Such-Ergebnisliste, <style> : f\u00fcr Format-Angaben (CSS), <meta> : f\u00fcr die Festlegung von Zeichenkodierungen, Schl\u00fcsselw\u00f6rter, Autor usw., <link> : zum Einbinden externer CSS-Dateien, <script> : zum Definieren von Client-seitigen JavaScript-Funktionen, <base> : zum Festlegen, der URL, von der aus alle Pfadangaben relativ sind. Beispiel Metadaten < head > < meta charset = \"UTF-8\" > < meta name = \"description\" content = \"meta data\" > < meta name = \"keywords\" content = \"HTML, head, title, meta, link, style\" > < meta name = \"author\" content = \"J\u00f6rn Freiheit\" > < meta http-equiv = \"refresh\" content = \"30\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"mystyle.css\" > < style > body { background-color : #29e0e6 ;} h1 { color : #ff6a3b ;} ul { color : #0000ff ;} </ style > < script > function myFunction () { document . getElementById ( \"demo\" ). innerHTML = \"Hallo FIW!\" ; } </ script > < base href = \"localhost/Webtech20\" target = \"_blank\" > < title > Metadaten </ title > </ head > Block- und Inline-Elemente \u00b6 Generell wird zwischen zwei Arten von HTML-Elementen unterschieden: Blockelemente Inline-Elemente Blockelemente verwenden die gesamte Breite der Browseransicht (des sogenannten Viewports ). Das bedeutet, dass ein Blockelement stets in einer neuen Zeile beginnt und neben einem Blockelement kein weiteres Element ist (sondern in einer neuen Zeile beginnt). Inline-Elemente nehmen genau so viel Breite ein, wie n\u00f6tig (Breite des Inhalts) und beginnen nicht in einer neuen Zeile und enden auch nicht mit einem Zeilenumbruch. Beispiele f\u00fcr Inline- und Blockelemente (Reiter \"Result\" w\u00e4hlen, um Ergebnis zu sehen): Eine \u00dcbersicht \u00fcber alle HTML-Elemente mit Erl\u00e4uterungen findet sich hier . kleine \u00dcbungsaufgabe: Erweitern Sie Ihre Datei index.html und f\u00fcgen Sie mindestens folgende Elemente ein: 2 verschiedene \u00dcberschriften ( h1 , ..., h6 ) eine nummerierte Liste (ordered list - ol ) mit 3 Eintr\u00e4gen (list items - li ) eine Strichpunktliste (unordered list - ul ) mit 3 Eintr\u00e4gen ( li ) eine Tabelle ( table ); diese besteht aus einem Tabellenkopf (table head - thead ) und einem Tabellenk\u00f6rper (table body - tbody ) der thead enth\u00e4lt eine Zeile (table row - tr ) als Tabellen\u00fcberschrift, wobei jede einzelne \u00dcberschrift (eine Spalte) als th definiert wird der tbody enth\u00e4lt mehrere Zeilen ( tr ); jede Zeile enth\u00e4lt so viele Dateneintr\u00e4ge (table data - td ) wie es Spalten gibt einen Hyperlink (anchor - a ), der ein Verweis auf die HTW-Seite enth\u00e4lt ein Bild (image - img ) Rufen Sie die Datei im Browser auf. Einige ausgew\u00e4hlte Elemente \u00b6 Hyperlinks (Anchorelement) \u00b6 Das HTML-Element f\u00fcr Hyperlinks ist <a> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > Das Beispiel erstellt einen Hyperlink. Auf der Webseite sichtbar ist der Inhalt des Elementes, n\u00e4mlich HTW Berlin . Wird auf den Link geklickt, so \u00f6ffnet sich die Webseite der HTW ( www.htw-berlin.de ) in einem neuen Browser-Reiter ( target=\"_blank\" ). Weitere Beispiele: < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > Das Anchorelement ist ein Inline-Element. Bilder (Image) \u00b6 Das HTML-Element f\u00fcr Bilder ist <img> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> Das Beispiel zeigt das FIW-Logo auf der Webseite an. Es ist in der Datei fiw.jpg gespeichert, welche im Ordner Logos liegt. Der Ordner Logos befindet sich auf der gleichen Ordnerebene wie der Ordner, der die HTML-Datei enth\u00e4lt. Diesen Ordner muss man deshalb zun\u00e4chst mithilfe von .. verlassen. Das Attribut alt wird verwendet, um einen alternatioven Text anzugeben, der angezeigt wird, falls das Bild nicht geladen werden kann. Wichtig ist das alt -Attribut aber insbesondere f\u00fcr die Barrierefreiheit. Ein Screenreader liest diesen Alternativtext vor. Sollte es sich bei dem Bild nur um ein dekoratives Element handeln (also nicht wirklich einen sinnvollen Inhalt haben), sollte man aus Gr\u00fcnden der Barrierfreiheit daf\u00fcr alt=\"\" angeben, dann \u00fcberspringt der Screenreader dieses Bild. Es sei erw\u00e4hnt, dass es auch sowohl das height - als auch das width -Attribut f\u00fcr <img> gibt, um die H\u00f6he bzw. die Breite des Bildes zu setzen. Dies sollte aber besser CSS \u00fcberlassen werden. Beachten Sie auch, dass es sich bei dem <img> -Element um ein stand alone Element handelt. Wir beenden das Element deshalb mit /> , um XML-konform zu sein. Das <img> -Element ist ein Inline-Element. Tabellen \u00b6 Tabellen ( <table> ) bestehen aus einen Tabellenkopf ( <thead> ) und einem Tabellenk\u00f6rper ( <tbody> ). Der Tabellenkopf enth\u00e4lt eine Tabellenzeile ( <tr> ) mit beliebig vielen Eintr\u00e4gen, den jeweiligen Spalten\u00fcberschriften ( <th> ). Der Tabellenk\u00f6rper enth\u00e4lt beliebig viele Zeilen ( <tr> ), die in jeder Spalten Dateneintr\u00e4ge ( <td> ) enthalten. Ein Beispiel f\u00fcr eine Tabelle: < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > Das Formatieren der Tabellen (Rahmen, rechtsb\u00fcndig usw.) sollte stets CSS \u00fcberlassen werden. Listen \u00b6 Es gibt nummerierte Listen ( ordered list <ol> ) und nicht-nummerierte Listen ( unordered list <ul> ). Die Eintr\u00e4ge in einer Liste sind die list items <li> . Listen k\u00f6nnen auch ineinander verschachtelt werden. Dabei ist nur zu beachten, dass Listen immer nur list items enthalten sollen und die list items dann selbst wieder eine neue Liste enthalten k\u00f6nnen. ordered list < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > unordered list < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > verschachtelte Liste < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > Container-Elemente \u00b6 Einige Elemente dienen nur der besseren Strukturierung des HTML-Codes und der besseren \"Ansprechbarkeit\" im CSS (d.h. f\u00fcr diese Elemente k\u00f6nnen dann eigene CSS-Eigenschaften zugewisen werden). Vor HTML 5 wurde daf\u00fcr das Element <div> verwendet. Es existiert noch immer. Mit HTML 5 wurden aber weitere Container-Elemente hinzugef\u00fcgt: <main> - f\u00fcr den Hauptinhalt, sollte genau einmal im Dokument vorkommen <section> - f\u00fcr gr\u00f6\u00dfere Abschnitte (Teile); kann z.B. article enthalten <article> - f\u00fcr Abschnitte (z.B. Blog-Eintr\u00e4ge) in main <aside> - f\u00fcr z.B. News an der Seite <footer> - f\u00fcr die Fu\u00dfzeile (mit Impressum, Copyright, usw.) <header> - f\u00fcr die Kopfzeile (mit Logo, Navigation usw.) <nav> - f\u00fcr das Navigationsmen\u00fc Container-Elemente sind nicht \"sichtbar\", jedoch Block-Elemente. Es ist empfehlenswert, die eigene Webseite mit solchen Container-Elementen zu strukturieren, um erstens einen besseren \u00dcberblick \u00fcber die Seite zu bewahren und insbesondere gezielter die Formatierungseigenschaften von CSS verwenden zu k\u00f6nnen. Dies schlie\u00dft das Layout ein. Eingabe- bzw. Steuerelemente \u00b6 Es gibt viele Steuerelemente in HTML und die Auswahl wird kontinuierlich gr\u00f6\u00dfer. Steuerelemente werden mit dem HTML-Element <input> definiert. Der Typ des Steuerelementes wird mit Attribut type definiert. Beispiele: < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> Probieren Sie am besten diese Beispiele aus und schauen Sie sich die Darstellung an. Beachten Sie auch, dass die Elemente in den unterschiedlichen Browsern unterschiedlich dargestellt werden. Attribute \u00b6 Wir haben in den obigen Beispielen bereits Attribute gesehen. In <a> wurden z.B. die Attribute href und target verwendet und in <img> die Attribute src und alt . Attribute werden innerhalb der spitzen Klammern des Begin-Tags angegeben und haben die Form: attribut = \"wert\" Das hei\u00dft, auf der linken Seite steht das Attribut und auf der rechten Seite der Wert des Attributs in doppelten Hochkommata. Es gibt Attribute, die ohne Wert verwendet werden k\u00f6nnen, z.B. checked f\u00fcr ein Eingabeelement <input> , z.B. < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > Um XML-konform zu sein, sollte man eigentlich besser <input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked=\"checked\" /> verwenden, macht aber niemand. Das Attribut checked ist ein Beispiel f\u00fcr ein Attribut, das speziell f\u00fcr ein HTML-Element zur Verf\u00fcgung steht (hier f\u00fcr <input> ). Die meisten Attribute existieren speziell f\u00fcr HTML-Elemente. Dar\u00fcber hinaus gibt es noch sogenannte globale Attribute, die f\u00fcr alle HTML-Elemente verwendet werden k\u00f6nnen. Beispiele solcher Attribute sind globales Attribut Erl\u00e4uterung id weist dem Element eine id zu; eine id sollte innerhalb eines HTML-Dokumentes eindeutig sein class weist dem Element eine oder mehrere Klassen zu, deren Eigenschaften in CSS definiert werden k\u00f6nnen hidden setzt das Element auf unsichtbar, es wird nicht angezeigt title weist einem Element textuelle Informationen zu, die bei l\u00e4ngerem Mouseover angezeigt werden (tooltip) Weitere Informationen \u00fcber HTML \u00b6 Folien HTML um das untenstehende Beispiel auszuf\u00fchren, ben\u00f6tigen Sie die Datei fiw.jpg , die Sie in einem Logos -Ordner ablegen sollten, um wenig \u00c4nderungsaufwand bei der folgenden HTML-Datei zu haben alle Beispiele in einem <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > HTML Einf\u00fchrung </ title > </ head > < body > < h3 > Hyperlinks </ h3 > < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > < h3 > Bilder </ h3 > < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> < h3 > Tabelle </ h3 > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > < h3 > Listen </ h3 > < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > < h3 > Eingabeelemente </ h3 > < input type = \"checkbox\" name = \"SG\" value = \"AI\" /> AI < br > < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> </ body > </ html > HTTP \u00b6 HTTP steht f\u00fcr Hypertext Transfer Protocol. Es wurde von Tim Berners Lee zusammen mit HTML, dem ersten Webserver und dem ersten Browser Anfang der 1990er Jahre am CERN entwickelt. Die Idee von HTTP ist einfach: der Nutzer stellt unter Eingabe einer URL (die Adresse des Webservers) eine Anfrage ( request ) an den Webserver. Der Webserver antwortet darauf mit einer response . Diese enth\u00e4lt einige Metadaten und die angefragte Webseite (im HTML-Format), wenn die Anfrage ordnungsgem\u00e4\u00df beantwortet werden kann. HTTP-Anfragemethoden \u00b6 F\u00fcr die Anfrage des Browsers an den Webserver stellt HTTP verschiedene Anfragemethoden zur Verf\u00fcgung. Diese unterscheiden sich in ihrer Bedeutung dahingehend, was mit der angefragten Ressource (den Daten oder der Webseite) geschehen soll. Anfragemethode Erl\u00e4uterung `GET` ist die einfachste und meistverwendete Anfragemethode; dient dazu, eine Ressource (typischerweise eine HTML-Datei) vom Webserver anzufordern; z.B. `GET /index.html` fordert die `index.html` vom Webserver an. `POST` fordert ebenfalls eine Ressource vom Webserver an; der Unterschied zwischen `GET` und `POST` besteht beim Mitsenden von Daten, z.B. Suchanfragen oder Login-Daten. W\u00e4hrend beim `GET` die \u00fcbermittelten Daten in die URL geschrieben werden, werden diese bei einem `POST` in den HTTP-Header eingef\u00fcgt. Das hei\u00dft, dass beim `GET` die an den Webserver \u00fcbergebenen Daten sichtbar sind, beim `POST` nicht. F\u00fcr die \u00dcbertragung sensibler Daten sollte also `POST` verwendet werden. `HEAD` fragt nur den Response-Header ab, nicht die Daten selbst. So kann z.B. bei einem Download zun\u00e4chst die Gr\u00f6\u00dfe der Datei abgefragt werden, bevor man die Datei selbst (mit `GET` oder `POST`) herunterl\u00e4dt. Neben diesen \"HTTP-Standardmethoden\" gibt es noch spezielle Anfragemethoden, die beim einfachen Surfen keine Rolle spielen, f\u00fcr uns in der Webprogrammierung jedoch von Bedeutung sind. Wir werden diese im Zusammenhang mit dem Programmierparadigma REST ( Representational State Transfer ) verwenden. Sie unterscheiden sich dahingehend, wie mit den angeforderten Ressourcen umgegangen wird, also ob sie unver\u00e4ndert bleiben, angelegt oder ge\u00e4ndert werden. Anfragemethode Erl\u00e4uterung `GET` l\u00e4sst die angefragte Ressource unver\u00e4ndert und ruft sie nur ab `POST` erstellt eine neue Ressource oder ver\u00e4ndert sie; wir werden `POST`zum Erstellen verwenden `PUT` sehr \u00e4hnlich zu `POST`, aber `POST` ist ein wenig genereller. Wird mit `PUT` eine neue Ressource angelegt, so wird der Name in der URL angegeben, w\u00e4hrend bei `POST` der Name durch den Server vergeben kann; wir werden `PUT`zum \u00c4ndern verwenden `DELETE` l\u00f6scht die angegebene Ressource vom Server Wichtig ist zu beachten, dass HTTP ein zustandsloses Protokoll ist. Das bedeutet, dass die Anfragen prinzipiell unabh\u00e4ngig voneinander sind und dass es keine Anfragehostorie gibt. Wird soetwas ben\u00f6tigt, wie z.B. beim Online-Einkauf, dann muss dies \u00fcber andere Mechanismen (z.B. Anmelden/Registrieren) realisiert werden. HTTP-Statusmeldungen \u00b6 HTTP sieht verschiedene Meldungen des Servers an den Client vor. Diese werden im Response-Header versendet. Hier ein paar Beispiele: HTTP Statusmeldung Erl\u00e4uterung `200 OK` Request wurde vollst\u00e4ndig und erfolgreich bearbeitet `201 Created` Request wurde bearbeitet und die neue Ressource wurde erstellt `301 Moved Permanently` die angeforderte Ressource wurde an eine andere URL bewegt `400 Bad Request` Der Request kann nicht bearbeitet werden, da er (syntaktische) Fehler enth\u00e4lt. `401 Unauthorized` Request ist ok, aber der Zugriff auf die Ressource ist nicht autorisiert `404 Not Found` die angegebene Ressource existiert nicht `500 Internal Server Error` der Webserver ist down bzw. hat einen Fehler URLs \u00b6 URL steht f\u00fcr Uniform Resource Locator und ist eine Adresse, die auf eine Ressource auf einem Server zeigt sowie das Protokoll, mit dem auf diese Adresse zugegriffen wird. Der allgemeine Aufbau einer URL sieht so aus: <schema>:<ressourcen-adresse> <schema> k\u00f6nnen verschiedene Protokolle sein, z.B. http , https , ftp , mailto , news , file usw. F\u00fcr die Zugriffe auf Webservern wierden http bzw. https verwendet. Die <ressourcen-adresse> kann unterschiedlich komplex sein. Der allgemeine Fall f\u00fcr den Zugriff auf eine Ressource auf einem Webserver kann so aussehen: //user:password@www.example.org:80/index.html?key1=value1&key2=value2 Darin m\u00f6chte ein Nutzer user mit dem Passwort password auf den Server (host) www.example.org \u00fcber den Port 80 auf die Ressource index.html zugreifen (mit GET) und \u00fcbergibt dabei 2 Werte, n\u00e4mlich value1 f\u00fcr den Schl\u00fcssel (die Variable) key1 und value2 f\u00fcr den Schl\u00fcssel key2 . In den meisten F\u00e4llen wird weder user noch password angegeben, oft auch nicht der Port und viele Anfragen auch ohne angeh\u00e4ngte Schl\u00fcssel-Werte-Paare. Die URL darf bestimmte Zeichen nicht enthalten, z.B. Leerzeichen, Klammern usw. Diese werden maskiert , d.h. in sogenante Prozentdarstellung umgewandelt. Ein Leerzeichen wird in %20 umgewandelt, ein Punkt in %2E usw. Daraus ergeben sich manchmal etwas \"kryptische\" URLs (siehe z.B. https://www.w3schools.com/tags/ref_urlencode.ASP ). Domain Name Service (DNS) \u00b6 Prinzipiell sind die Rechner im Internet durch IP-Adressen adressiert. IPv4 -Adressen bestehen aus vier Zahlenbl\u00f6cken (jeweils im Bereich von 0 bis 255), die durch einen Punkt getrennt sind. IPv4 -Adressen werden in 32 Bit gespeichert. Es gibt somit theoretisch 2^32 = 4.294.967.296 verschiedene Adressen, d.h. gut 4 Mrd adressierbare Rechner im Internet. Da dies nicht ausreicht, wurde in Version 6 des IP-Protokolls eine neue Dressierbarkeit eingef\u00fchrt, in dem nun 128 Bit f\u00fcr die Speicherung einer Adresse zur Verf\u00fcgung stehen. Eine IPv6 -Adresse besteht aus acht Bl\u00f6cken, welche durch Doppelpunkte getrennt sind. Jeder Block besteht aus 4 Hexadezimalstellen. Damit man sich zum Surfen im World Wide Web nicht IP-Adressen merken muss, wurden Webservern Namen zugeordnet. Somit muss man nicht die IP-Adressen in das Adressfeld als URL eingeben, sondern kann sprechende Namen verwenden, wie z.B. htw-berlin.de . de ist dabei eine sogenannte Top-Level-Domain und htw-berlin eine Subdomain. Den DNS kann man sich wie ein Telefonbuch vorstellen, in dem f\u00fcr eine sprechende Adresse die zuegh\u00f6rige IP-Adresse steht. Die Anfrage wird dann per TCP/IP an die IP-Adresse geschickt. Abfrage nach dem Root-DNS-Server f\u00fcr die Domain htw-berlin.de : % dig htw-berlin.de @a.root-servers.net ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.root-servers.net ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 38694 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 6 , ADDITIONAL: 13 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. ;; ADDITIONAL SECTION: s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Query time: 140 msec ;; SERVER: 198 .41.0.4#53 ( 198 .41.0.4 ) ;; WHEN: Tue Sep 29 08 :44:58 CEST 2020 ;; MSG SIZE rcvd: 412 Die Domain htw-berlin.de wird von mehreren DNS verwaltet: s.de.net , n.de.net , a.nic.de , ... (siehe AUTHORITY SECTION). Beispielsweise leitet der Root-DNS-Server a.nic.de die Aufl\u00f6sung der Domain an die beiden DNS infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) und dns-2.dfn.de weiter: % dig htw-berlin.de @a.nic.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.nic.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 1455 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 2 , ADDITIONAL: 2 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. htw-berlin.de. 86400 IN NS dns-2.dfn.de. ;; ADDITIONAL SECTION: infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Query time: 2 msec ;; SERVER: 194 .0.0.53#53 ( 194 .0.0.53 ) ;; WHEN: Tue Sep 29 08 :45:47 CEST 2020 ;; MSG SIZE rcvd: 106 Die aktuelle IP-Adresse des Servers htw-berlin.de ist 141.45.66.214 : % dig htw-berlin.de @dns-2.dfn.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @dns-2.dfn.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 21529 ;; flags: qr aa rd ; QUERY: 1 , ANSWER: 1 , AUTHORITY: 0 , ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; ANSWER SECTION: htw-berlin.de. 28800 IN A 141 .45.66.214 ;; Query time: 11 msec ;; SERVER: 193 .174.75.54#53 ( 193 .174.75.54 ) ;; WHEN: Tue Sep 29 08 :46:53 CEST 2020 ;; MSG SIZE rcvd: 58 Die IP-Adresse der Domain (und die verantwortlichen DNS) h\u00e4tte man auch mit nslookup herausbekommen: % nslookup -q = any htw-berlin.de Server: 141 .45.2.100 Address: 141 .45.2.100#53 htw-berlin.de origin = infoblox1.htw-berlin.de mail addr = net-rz.htw-berlin.de serial = 2009121336 refresh = 10800 retry = 3600 expire = 2419200 minimum = 900 Name: htw-berlin.de Address: 141 .45.66.214 htw-berlin.de mail exchanger = 50 mail1.rz.htw-berlin.de. htw-berlin.de text = \"ZOOM_verify_stchLGrGQgO-9ACdBPKPRw\" htw-berlin.de text = \"v=spf1 ip4:141.45.10.64/26 ip4:141.45.70.64/26 ~all\" htw-berlin.de nameserver = dns-2.dfn.de. htw-berlin.de nameserver = infobloxv.htw-berlin.de.","title":"HTML"},{"location":"html/#html","text":"","title":"HTML"},{"location":"html/#einleitung","text":"HTML steht f\u00fcr H yper T ext M arkup L anguage. HTML ist eine sogenannte Auszeichnungssprache . Das bedeutet, dass Textelementen sogenannte Tags (HTML-Elemente) zugeordnet werden, um dem Text, der von einem solchen Tag umschlossen wird, eine Bedeutung zuzuweisen - der Text wird ausgezeichnet. Beispiel: < h1 > Gro\u00dfe \u00dcberschrift </ h1 > Im obigen Beispiel wurde der Text Gro\u00dfe \u00dcberschrift durch das HTML-Element h1 ausgezeichnet. Die Bedeutung dieses Elementes ist, dass es sich bei dem ausgezeichneten Text um eine \u00dcberschrift handelt. Es gibt 6 HTML-Elemente, die \u00dcberschriften charakterisieren: h1 , h2 , h3 , h4 , h5 , h6 . Die Nummern geben die Gr\u00f6\u00dfe der \u00dcberschrift an: h1 ist die gr\u00f6\u00dfte \u00dcberschrift, h6 die kleinste. Klicken Sie im folgenden Fenster auf den Reiter \"Result\" , um die Unterschiede zu sehen:","title":"Einleitung"},{"location":"html/#hierarchische-anordnung-der-html-elemente","text":"HTML-Elemente bestehen - bis auf wenige Ausnahmen - aus einem Start-Tag <tag> und einem Ende-Tag </tag> (tag steht hier f\u00fcr den Namen eines beliebigen Elementes). Wird ein neues HTML-Element el2 innerhalb eines anderen HTML-Elementes el1 ge\u00f6ffnet, so muss el2 auch geschlossen werden, bevor el1 geschlossen wird. Success < el1 > diese Anordnung der < el2 > Elemente ist korrekt </ el2 > </ el1 > Failure < el1 > diese Anordnung der < el2 > Elemente ist falsch </ el1 > </ el2 > Es gibt nur wenige HTML-Elemente, die nicht aus einem Start- und einem Ende-Tag bestehen, sondern sogenannte stand alone Tags sind. Ein typisches Beispiel ist der Zeilenumbruch <br> . Um einerseits zu symbolisieren, dass es sich um Start- und Ende-Tag in einem handelt, insbesondere aber, um XHTML -konform zu sein, geben wir f\u00fcr solche stand-alone Tags den Slash vor der schlie\u00dfenden spitzen Klammer an, d.h. wir schreiben <br /> .","title":"Hierarchische Anordnung der HTML-Elemente"},{"location":"html/#grundgerust-einer-html-seite","text":"Prinzipiell besteht eine HTML-Seite aus einem <head> - und einem <body> -Bereich. Im <head> -Bereich k\u00f6nnen Metadaten \u00fcber die Seite definiert werden. Der <body> -Bereich definiert den sichtbaren Bereich der Seite, also das, was im Browser dargestellt wird. Eingeschlossen werden der <head> - und der <body> -Bereich von einem <html> -Element. <!DOCTYPE html> < html > < head > < title > Seitentitel </ title > </ head > < body > < h1 > Das ist eine gro\u00dfe \u00dcberschrift </ h1 > < p > Das ist ein Absatz. </ p > </ body > </ html > Das obige Beispiel zeigt ein Grundger\u00fcst einer HTML-Seite. <!DOCTYPE html> gibt dem Browser an, dass es sich um eine HTML-Datei handelt, die vom Browser \"gerendert\" , d.h. dargestellt wird. Der <head> -Bereich enth\u00e4lt in diesem Beispiel nur ein <title> -Element. Dieser Titel wird im Browser im Reiter (Tab) gezeigt. Au\u00dferdem wird der Titel in der Ergebnisliste einer Suchmaschine verwendet. Das <body> -Element, also der im Browser dargestellte Bereich, enth\u00e4lt eine \u00dcberschrift ( <h1> ) und einen Absatz ( <p> ). Aufgabe: Erstellen Sie eine Datei index.html und f\u00fcgen Sie obigen HTML-Code ein. Rufen Sie die Datei im Browser auf.","title":"Grundger\u00fcst einer HTML-Seite"},{"location":"html/#metadaten-im-head","text":"Das <head> -Element ist der Container f\u00fcr (Meta-)Daten \u00fcber das Webdokument. Das <head> -Element kommt in das <html> -Element und vor das <body> -Element. Die Metadaten werden nicht dargestellt. Typische HTML-Elemente f\u00fcr Metadaten sind: <title> : Titel des Dokumentes (im Tab und in der Such-Ergebnisliste, <style> : f\u00fcr Format-Angaben (CSS), <meta> : f\u00fcr die Festlegung von Zeichenkodierungen, Schl\u00fcsselw\u00f6rter, Autor usw., <link> : zum Einbinden externer CSS-Dateien, <script> : zum Definieren von Client-seitigen JavaScript-Funktionen, <base> : zum Festlegen, der URL, von der aus alle Pfadangaben relativ sind. Beispiel Metadaten < head > < meta charset = \"UTF-8\" > < meta name = \"description\" content = \"meta data\" > < meta name = \"keywords\" content = \"HTML, head, title, meta, link, style\" > < meta name = \"author\" content = \"J\u00f6rn Freiheit\" > < meta http-equiv = \"refresh\" content = \"30\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"mystyle.css\" > < style > body { background-color : #29e0e6 ;} h1 { color : #ff6a3b ;} ul { color : #0000ff ;} </ style > < script > function myFunction () { document . getElementById ( \"demo\" ). innerHTML = \"Hallo FIW!\" ; } </ script > < base href = \"localhost/Webtech20\" target = \"_blank\" > < title > Metadaten </ title > </ head >","title":"Metadaten im Head"},{"location":"html/#block-und-inline-elemente","text":"Generell wird zwischen zwei Arten von HTML-Elementen unterschieden: Blockelemente Inline-Elemente Blockelemente verwenden die gesamte Breite der Browseransicht (des sogenannten Viewports ). Das bedeutet, dass ein Blockelement stets in einer neuen Zeile beginnt und neben einem Blockelement kein weiteres Element ist (sondern in einer neuen Zeile beginnt). Inline-Elemente nehmen genau so viel Breite ein, wie n\u00f6tig (Breite des Inhalts) und beginnen nicht in einer neuen Zeile und enden auch nicht mit einem Zeilenumbruch. Beispiele f\u00fcr Inline- und Blockelemente (Reiter \"Result\" w\u00e4hlen, um Ergebnis zu sehen): Eine \u00dcbersicht \u00fcber alle HTML-Elemente mit Erl\u00e4uterungen findet sich hier . kleine \u00dcbungsaufgabe: Erweitern Sie Ihre Datei index.html und f\u00fcgen Sie mindestens folgende Elemente ein: 2 verschiedene \u00dcberschriften ( h1 , ..., h6 ) eine nummerierte Liste (ordered list - ol ) mit 3 Eintr\u00e4gen (list items - li ) eine Strichpunktliste (unordered list - ul ) mit 3 Eintr\u00e4gen ( li ) eine Tabelle ( table ); diese besteht aus einem Tabellenkopf (table head - thead ) und einem Tabellenk\u00f6rper (table body - tbody ) der thead enth\u00e4lt eine Zeile (table row - tr ) als Tabellen\u00fcberschrift, wobei jede einzelne \u00dcberschrift (eine Spalte) als th definiert wird der tbody enth\u00e4lt mehrere Zeilen ( tr ); jede Zeile enth\u00e4lt so viele Dateneintr\u00e4ge (table data - td ) wie es Spalten gibt einen Hyperlink (anchor - a ), der ein Verweis auf die HTW-Seite enth\u00e4lt ein Bild (image - img ) Rufen Sie die Datei im Browser auf.","title":"Block- und Inline-Elemente"},{"location":"html/#einige-ausgewahlte-elemente","text":"","title":"Einige ausgew\u00e4hlte Elemente"},{"location":"html/#hyperlinks-anchorelement","text":"Das HTML-Element f\u00fcr Hyperlinks ist <a> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > Das Beispiel erstellt einen Hyperlink. Auf der Webseite sichtbar ist der Inhalt des Elementes, n\u00e4mlich HTW Berlin . Wird auf den Link geklickt, so \u00f6ffnet sich die Webseite der HTW ( www.htw-berlin.de ) in einem neuen Browser-Reiter ( target=\"_blank\" ). Weitere Beispiele: < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > Das Anchorelement ist ein Inline-Element.","title":"Hyperlinks (Anchorelement)"},{"location":"html/#bilder-image","text":"Das HTML-Element f\u00fcr Bilder ist <img> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> Das Beispiel zeigt das FIW-Logo auf der Webseite an. Es ist in der Datei fiw.jpg gespeichert, welche im Ordner Logos liegt. Der Ordner Logos befindet sich auf der gleichen Ordnerebene wie der Ordner, der die HTML-Datei enth\u00e4lt. Diesen Ordner muss man deshalb zun\u00e4chst mithilfe von .. verlassen. Das Attribut alt wird verwendet, um einen alternatioven Text anzugeben, der angezeigt wird, falls das Bild nicht geladen werden kann. Wichtig ist das alt -Attribut aber insbesondere f\u00fcr die Barrierefreiheit. Ein Screenreader liest diesen Alternativtext vor. Sollte es sich bei dem Bild nur um ein dekoratives Element handeln (also nicht wirklich einen sinnvollen Inhalt haben), sollte man aus Gr\u00fcnden der Barrierfreiheit daf\u00fcr alt=\"\" angeben, dann \u00fcberspringt der Screenreader dieses Bild. Es sei erw\u00e4hnt, dass es auch sowohl das height - als auch das width -Attribut f\u00fcr <img> gibt, um die H\u00f6he bzw. die Breite des Bildes zu setzen. Dies sollte aber besser CSS \u00fcberlassen werden. Beachten Sie auch, dass es sich bei dem <img> -Element um ein stand alone Element handelt. Wir beenden das Element deshalb mit /> , um XML-konform zu sein. Das <img> -Element ist ein Inline-Element.","title":"Bilder (Image)"},{"location":"html/#tabellen","text":"Tabellen ( <table> ) bestehen aus einen Tabellenkopf ( <thead> ) und einem Tabellenk\u00f6rper ( <tbody> ). Der Tabellenkopf enth\u00e4lt eine Tabellenzeile ( <tr> ) mit beliebig vielen Eintr\u00e4gen, den jeweiligen Spalten\u00fcberschriften ( <th> ). Der Tabellenk\u00f6rper enth\u00e4lt beliebig viele Zeilen ( <tr> ), die in jeder Spalten Dateneintr\u00e4ge ( <td> ) enthalten. Ein Beispiel f\u00fcr eine Tabelle: < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > Das Formatieren der Tabellen (Rahmen, rechtsb\u00fcndig usw.) sollte stets CSS \u00fcberlassen werden.","title":"Tabellen"},{"location":"html/#listen","text":"Es gibt nummerierte Listen ( ordered list <ol> ) und nicht-nummerierte Listen ( unordered list <ul> ). Die Eintr\u00e4ge in einer Liste sind die list items <li> . Listen k\u00f6nnen auch ineinander verschachtelt werden. Dabei ist nur zu beachten, dass Listen immer nur list items enthalten sollen und die list items dann selbst wieder eine neue Liste enthalten k\u00f6nnen. ordered list < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > unordered list < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > verschachtelte Liste < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol >","title":"Listen"},{"location":"html/#container-elemente","text":"Einige Elemente dienen nur der besseren Strukturierung des HTML-Codes und der besseren \"Ansprechbarkeit\" im CSS (d.h. f\u00fcr diese Elemente k\u00f6nnen dann eigene CSS-Eigenschaften zugewisen werden). Vor HTML 5 wurde daf\u00fcr das Element <div> verwendet. Es existiert noch immer. Mit HTML 5 wurden aber weitere Container-Elemente hinzugef\u00fcgt: <main> - f\u00fcr den Hauptinhalt, sollte genau einmal im Dokument vorkommen <section> - f\u00fcr gr\u00f6\u00dfere Abschnitte (Teile); kann z.B. article enthalten <article> - f\u00fcr Abschnitte (z.B. Blog-Eintr\u00e4ge) in main <aside> - f\u00fcr z.B. News an der Seite <footer> - f\u00fcr die Fu\u00dfzeile (mit Impressum, Copyright, usw.) <header> - f\u00fcr die Kopfzeile (mit Logo, Navigation usw.) <nav> - f\u00fcr das Navigationsmen\u00fc Container-Elemente sind nicht \"sichtbar\", jedoch Block-Elemente. Es ist empfehlenswert, die eigene Webseite mit solchen Container-Elementen zu strukturieren, um erstens einen besseren \u00dcberblick \u00fcber die Seite zu bewahren und insbesondere gezielter die Formatierungseigenschaften von CSS verwenden zu k\u00f6nnen. Dies schlie\u00dft das Layout ein.","title":"Container-Elemente"},{"location":"html/#eingabe-bzw-steuerelemente","text":"Es gibt viele Steuerelemente in HTML und die Auswahl wird kontinuierlich gr\u00f6\u00dfer. Steuerelemente werden mit dem HTML-Element <input> definiert. Der Typ des Steuerelementes wird mit Attribut type definiert. Beispiele: < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> Probieren Sie am besten diese Beispiele aus und schauen Sie sich die Darstellung an. Beachten Sie auch, dass die Elemente in den unterschiedlichen Browsern unterschiedlich dargestellt werden.","title":"Eingabe- bzw. Steuerelemente"},{"location":"html/#attribute","text":"Wir haben in den obigen Beispielen bereits Attribute gesehen. In <a> wurden z.B. die Attribute href und target verwendet und in <img> die Attribute src und alt . Attribute werden innerhalb der spitzen Klammern des Begin-Tags angegeben und haben die Form: attribut = \"wert\" Das hei\u00dft, auf der linken Seite steht das Attribut und auf der rechten Seite der Wert des Attributs in doppelten Hochkommata. Es gibt Attribute, die ohne Wert verwendet werden k\u00f6nnen, z.B. checked f\u00fcr ein Eingabeelement <input> , z.B. < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > Um XML-konform zu sein, sollte man eigentlich besser <input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked=\"checked\" /> verwenden, macht aber niemand. Das Attribut checked ist ein Beispiel f\u00fcr ein Attribut, das speziell f\u00fcr ein HTML-Element zur Verf\u00fcgung steht (hier f\u00fcr <input> ). Die meisten Attribute existieren speziell f\u00fcr HTML-Elemente. Dar\u00fcber hinaus gibt es noch sogenannte globale Attribute, die f\u00fcr alle HTML-Elemente verwendet werden k\u00f6nnen. Beispiele solcher Attribute sind globales Attribut Erl\u00e4uterung id weist dem Element eine id zu; eine id sollte innerhalb eines HTML-Dokumentes eindeutig sein class weist dem Element eine oder mehrere Klassen zu, deren Eigenschaften in CSS definiert werden k\u00f6nnen hidden setzt das Element auf unsichtbar, es wird nicht angezeigt title weist einem Element textuelle Informationen zu, die bei l\u00e4ngerem Mouseover angezeigt werden (tooltip)","title":"Attribute"},{"location":"html/#weitere-informationen-uber-html","text":"Folien HTML um das untenstehende Beispiel auszuf\u00fchren, ben\u00f6tigen Sie die Datei fiw.jpg , die Sie in einem Logos -Ordner ablegen sollten, um wenig \u00c4nderungsaufwand bei der folgenden HTML-Datei zu haben alle Beispiele in einem <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > HTML Einf\u00fchrung </ title > </ head > < body > < h3 > Hyperlinks </ h3 > < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > < h3 > Bilder </ h3 > < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> < h3 > Tabelle </ h3 > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > < h3 > Listen </ h3 > < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > < h3 > Eingabeelemente </ h3 > < input type = \"checkbox\" name = \"SG\" value = \"AI\" /> AI < br > < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> </ body > </ html >","title":"Weitere Informationen \u00fcber HTML"},{"location":"html/#http","text":"HTTP steht f\u00fcr Hypertext Transfer Protocol. Es wurde von Tim Berners Lee zusammen mit HTML, dem ersten Webserver und dem ersten Browser Anfang der 1990er Jahre am CERN entwickelt. Die Idee von HTTP ist einfach: der Nutzer stellt unter Eingabe einer URL (die Adresse des Webservers) eine Anfrage ( request ) an den Webserver. Der Webserver antwortet darauf mit einer response . Diese enth\u00e4lt einige Metadaten und die angefragte Webseite (im HTML-Format), wenn die Anfrage ordnungsgem\u00e4\u00df beantwortet werden kann.","title":"HTTP"},{"location":"html/#http-anfragemethoden","text":"F\u00fcr die Anfrage des Browsers an den Webserver stellt HTTP verschiedene Anfragemethoden zur Verf\u00fcgung. Diese unterscheiden sich in ihrer Bedeutung dahingehend, was mit der angefragten Ressource (den Daten oder der Webseite) geschehen soll. Anfragemethode Erl\u00e4uterung `GET` ist die einfachste und meistverwendete Anfragemethode; dient dazu, eine Ressource (typischerweise eine HTML-Datei) vom Webserver anzufordern; z.B. `GET /index.html` fordert die `index.html` vom Webserver an. `POST` fordert ebenfalls eine Ressource vom Webserver an; der Unterschied zwischen `GET` und `POST` besteht beim Mitsenden von Daten, z.B. Suchanfragen oder Login-Daten. W\u00e4hrend beim `GET` die \u00fcbermittelten Daten in die URL geschrieben werden, werden diese bei einem `POST` in den HTTP-Header eingef\u00fcgt. Das hei\u00dft, dass beim `GET` die an den Webserver \u00fcbergebenen Daten sichtbar sind, beim `POST` nicht. F\u00fcr die \u00dcbertragung sensibler Daten sollte also `POST` verwendet werden. `HEAD` fragt nur den Response-Header ab, nicht die Daten selbst. So kann z.B. bei einem Download zun\u00e4chst die Gr\u00f6\u00dfe der Datei abgefragt werden, bevor man die Datei selbst (mit `GET` oder `POST`) herunterl\u00e4dt. Neben diesen \"HTTP-Standardmethoden\" gibt es noch spezielle Anfragemethoden, die beim einfachen Surfen keine Rolle spielen, f\u00fcr uns in der Webprogrammierung jedoch von Bedeutung sind. Wir werden diese im Zusammenhang mit dem Programmierparadigma REST ( Representational State Transfer ) verwenden. Sie unterscheiden sich dahingehend, wie mit den angeforderten Ressourcen umgegangen wird, also ob sie unver\u00e4ndert bleiben, angelegt oder ge\u00e4ndert werden. Anfragemethode Erl\u00e4uterung `GET` l\u00e4sst die angefragte Ressource unver\u00e4ndert und ruft sie nur ab `POST` erstellt eine neue Ressource oder ver\u00e4ndert sie; wir werden `POST`zum Erstellen verwenden `PUT` sehr \u00e4hnlich zu `POST`, aber `POST` ist ein wenig genereller. Wird mit `PUT` eine neue Ressource angelegt, so wird der Name in der URL angegeben, w\u00e4hrend bei `POST` der Name durch den Server vergeben kann; wir werden `PUT`zum \u00c4ndern verwenden `DELETE` l\u00f6scht die angegebene Ressource vom Server Wichtig ist zu beachten, dass HTTP ein zustandsloses Protokoll ist. Das bedeutet, dass die Anfragen prinzipiell unabh\u00e4ngig voneinander sind und dass es keine Anfragehostorie gibt. Wird soetwas ben\u00f6tigt, wie z.B. beim Online-Einkauf, dann muss dies \u00fcber andere Mechanismen (z.B. Anmelden/Registrieren) realisiert werden.","title":"HTTP-Anfragemethoden"},{"location":"html/#http-statusmeldungen","text":"HTTP sieht verschiedene Meldungen des Servers an den Client vor. Diese werden im Response-Header versendet. Hier ein paar Beispiele: HTTP Statusmeldung Erl\u00e4uterung `200 OK` Request wurde vollst\u00e4ndig und erfolgreich bearbeitet `201 Created` Request wurde bearbeitet und die neue Ressource wurde erstellt `301 Moved Permanently` die angeforderte Ressource wurde an eine andere URL bewegt `400 Bad Request` Der Request kann nicht bearbeitet werden, da er (syntaktische) Fehler enth\u00e4lt. `401 Unauthorized` Request ist ok, aber der Zugriff auf die Ressource ist nicht autorisiert `404 Not Found` die angegebene Ressource existiert nicht `500 Internal Server Error` der Webserver ist down bzw. hat einen Fehler","title":"HTTP-Statusmeldungen"},{"location":"html/#urls","text":"URL steht f\u00fcr Uniform Resource Locator und ist eine Adresse, die auf eine Ressource auf einem Server zeigt sowie das Protokoll, mit dem auf diese Adresse zugegriffen wird. Der allgemeine Aufbau einer URL sieht so aus: <schema>:<ressourcen-adresse> <schema> k\u00f6nnen verschiedene Protokolle sein, z.B. http , https , ftp , mailto , news , file usw. F\u00fcr die Zugriffe auf Webservern wierden http bzw. https verwendet. Die <ressourcen-adresse> kann unterschiedlich komplex sein. Der allgemeine Fall f\u00fcr den Zugriff auf eine Ressource auf einem Webserver kann so aussehen: //user:password@www.example.org:80/index.html?key1=value1&key2=value2 Darin m\u00f6chte ein Nutzer user mit dem Passwort password auf den Server (host) www.example.org \u00fcber den Port 80 auf die Ressource index.html zugreifen (mit GET) und \u00fcbergibt dabei 2 Werte, n\u00e4mlich value1 f\u00fcr den Schl\u00fcssel (die Variable) key1 und value2 f\u00fcr den Schl\u00fcssel key2 . In den meisten F\u00e4llen wird weder user noch password angegeben, oft auch nicht der Port und viele Anfragen auch ohne angeh\u00e4ngte Schl\u00fcssel-Werte-Paare. Die URL darf bestimmte Zeichen nicht enthalten, z.B. Leerzeichen, Klammern usw. Diese werden maskiert , d.h. in sogenante Prozentdarstellung umgewandelt. Ein Leerzeichen wird in %20 umgewandelt, ein Punkt in %2E usw. Daraus ergeben sich manchmal etwas \"kryptische\" URLs (siehe z.B. https://www.w3schools.com/tags/ref_urlencode.ASP ).","title":"URLs"},{"location":"html/#domain-name-service-dns","text":"Prinzipiell sind die Rechner im Internet durch IP-Adressen adressiert. IPv4 -Adressen bestehen aus vier Zahlenbl\u00f6cken (jeweils im Bereich von 0 bis 255), die durch einen Punkt getrennt sind. IPv4 -Adressen werden in 32 Bit gespeichert. Es gibt somit theoretisch 2^32 = 4.294.967.296 verschiedene Adressen, d.h. gut 4 Mrd adressierbare Rechner im Internet. Da dies nicht ausreicht, wurde in Version 6 des IP-Protokolls eine neue Dressierbarkeit eingef\u00fchrt, in dem nun 128 Bit f\u00fcr die Speicherung einer Adresse zur Verf\u00fcgung stehen. Eine IPv6 -Adresse besteht aus acht Bl\u00f6cken, welche durch Doppelpunkte getrennt sind. Jeder Block besteht aus 4 Hexadezimalstellen. Damit man sich zum Surfen im World Wide Web nicht IP-Adressen merken muss, wurden Webservern Namen zugeordnet. Somit muss man nicht die IP-Adressen in das Adressfeld als URL eingeben, sondern kann sprechende Namen verwenden, wie z.B. htw-berlin.de . de ist dabei eine sogenannte Top-Level-Domain und htw-berlin eine Subdomain. Den DNS kann man sich wie ein Telefonbuch vorstellen, in dem f\u00fcr eine sprechende Adresse die zuegh\u00f6rige IP-Adresse steht. Die Anfrage wird dann per TCP/IP an die IP-Adresse geschickt. Abfrage nach dem Root-DNS-Server f\u00fcr die Domain htw-berlin.de : % dig htw-berlin.de @a.root-servers.net ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.root-servers.net ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 38694 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 6 , ADDITIONAL: 13 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. ;; ADDITIONAL SECTION: s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Query time: 140 msec ;; SERVER: 198 .41.0.4#53 ( 198 .41.0.4 ) ;; WHEN: Tue Sep 29 08 :44:58 CEST 2020 ;; MSG SIZE rcvd: 412 Die Domain htw-berlin.de wird von mehreren DNS verwaltet: s.de.net , n.de.net , a.nic.de , ... (siehe AUTHORITY SECTION). Beispielsweise leitet der Root-DNS-Server a.nic.de die Aufl\u00f6sung der Domain an die beiden DNS infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) und dns-2.dfn.de weiter: % dig htw-berlin.de @a.nic.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.nic.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 1455 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 2 , ADDITIONAL: 2 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. htw-berlin.de. 86400 IN NS dns-2.dfn.de. ;; ADDITIONAL SECTION: infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Query time: 2 msec ;; SERVER: 194 .0.0.53#53 ( 194 .0.0.53 ) ;; WHEN: Tue Sep 29 08 :45:47 CEST 2020 ;; MSG SIZE rcvd: 106 Die aktuelle IP-Adresse des Servers htw-berlin.de ist 141.45.66.214 : % dig htw-berlin.de @dns-2.dfn.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @dns-2.dfn.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 21529 ;; flags: qr aa rd ; QUERY: 1 , ANSWER: 1 , AUTHORITY: 0 , ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; ANSWER SECTION: htw-berlin.de. 28800 IN A 141 .45.66.214 ;; Query time: 11 msec ;; SERVER: 193 .174.75.54#53 ( 193 .174.75.54 ) ;; WHEN: Tue Sep 29 08 :46:53 CEST 2020 ;; MSG SIZE rcvd: 58 Die IP-Adresse der Domain (und die verantwortlichen DNS) h\u00e4tte man auch mit nslookup herausbekommen: % nslookup -q = any htw-berlin.de Server: 141 .45.2.100 Address: 141 .45.2.100#53 htw-berlin.de origin = infoblox1.htw-berlin.de mail addr = net-rz.htw-berlin.de serial = 2009121336 refresh = 10800 retry = 3600 expire = 2419200 minimum = 900 Name: htw-berlin.de Address: 141 .45.66.214 htw-berlin.de mail exchanger = 50 mail1.rz.htw-berlin.de. htw-berlin.de text = \"ZOOM_verify_stchLGrGQgO-9ACdBPKPRw\" htw-berlin.de text = \"v=spf1 ip4:141.45.10.64/26 ip4:141.45.70.64/26 ~all\" htw-berlin.de nameserver = dns-2.dfn.de. htw-berlin.de nameserver = infobloxv.htw-berlin.de.","title":"Domain Name Service (DNS)"},{"location":"javascript/","text":"JavaScript \u00b6 JavaScript wurde 1995 von Brendan Eich entwickelt. Er arbeitete damals bei Netscape und entwickelte mit dem damals sogenannten LiveScript eine Skriptsprache f\u00fcr den damaligen Netscape-Browser. Ein damaliger Browser \"verstand\" HTML und CSS. HTML sah f\u00fcr Nutzerinteraktionen nur das Klicken auf Hyperlinks vor. Andere Nutzerinteraktionen waren nicht vorgesehen. Mithilfe von JavaScript wurde eine Schnittstelle geschaffen, um durch Nutzerinteraktionen den HTML-Code zu manipulieren, ohne dass ein weiteres Nachladen vom Webserver notwendig wurde. Mit der Einf\u00fchrung von JavaScript wurden die F\u00e4higkeiten von Browsern erweiteret, indem nun nicht mehr nur HTML und CSS interpretiert wurde, sondern auch JavaScript - alles Client-seitig, also durch den Browser selbst. JavaScript ist eine sogenannte Skriptsprache , d.h. der Quellcode wird nicht compiliert und dann der \u00fcbersetzte Byte- oder Maschinencode ausgef\u00fchrt, sondern der Quellcode wird durch einen Interpreter interpretiert. Allerdings wird f\u00fcr Optimierungen JavaScript - insbesondere serverseitig in Node.js - durch sogenannte Engines doch in Maschinencode \u00fcbersetzt, welcher ausgef\u00fchrt wird. Die bekannteste dieser Engines ist die Google-Engine V8 . Die Technologie der Compilierung wird als Just-in-time-Kompilierung (JIT) bezeichnet. JavaScript kennt (im Gegensatz zu TypeScript) keine Klassen. Das Objektmodell von JavaScript basiert auf Prototypen . Eigenschaften und Methoden k\u00f6nnen zur Laufzeit den Objekten hinzugef\u00fcgt werden. Neben diesem dynamischen Objektmodell ist auch die Typisierung in JavaScript dynamisch. Der Typ einer Variable h\u00e4ngt vom Wert ab. Mit dem Wert kann sich auch der Typ der Variable \u00e4ndern. Client-seitig haben HTML, CSS und JavaScript folgende Bedeutung (und wir sollten auch auf eine solche strikte Trennung achten): HTML f\u00fcr die Inhalte, CSS f\u00fcr das Layout, JavaScript f\u00fcr das interaktive Verhalten unserer Webseite. JavaScript in unseren Webseiten \u00b6 Zun\u00e4chst \u00fcberlegen wir uns, wie wir das auch schon f\u00fcr CSS getan hatten, wo wir den JavaScript-Code in unseren Webseiten einf\u00fcgen k\u00f6nnen. Prinzipiell wird JavaScript-Code in einem HTML-Dokument innerhalb eines <script></script> -Elementes eingef\u00fcgt. Im Gegensatz zu CSS (wo wir die Definitionen innerhalb des <style></style> -Elementes angegeben haben, welches immer im <head> positioniert wird), ist es egal, ob das <script> -Element im <head> oder <body> angelegt wird. Sie k\u00f6nnen innerhalb eines HTML-Dokumentes auch mehrere <script> -Elemente haben und Sie k\u00f6nnen dann auch sowohl im <head> als auch im <body> positioniert sein. Wie bei CSS, ist es auch f\u00fcr JavaScript \u00fcblich, den Code in externe (. js )-Dateien auszulagern und diese dann in das HTML-Dokument einzubinden. Dies geschieht aber nicht \u00fcber ein <link> -Element, sondern ebenfalls \u00fcber das <script> -Element. Das folgende Beispiel zeigt die Verwendung des <script> -Eelementes zum Einbinden von JavaScript: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } </ script > </ head > < body > < script src = \"myScript.js\" ></ script > < h1 > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } </ script > </ body > </ html > Ein gutes Vorgehen ist es, JavaScript am Ende des <body> -Elementes einzubinden, damit die Seite zun\u00e4chst dargestellt wird und erst dann der JavaScript-Code geladen wird. Das laden des JavaScript-Codes w\u00fcrde ansonsten die Darstellung der Webseite verz\u00f6gern. Document Object Model (DOM) \u00b6 Wir betrachten JavaScript zun\u00e4chst nur aus client-seitiger Sicht, d.h. f\u00fcr die Verwendung im Browser. Der Browser stellt HTML dar, welches durch CSS in ein ansprechendes Layout gestzt wurde. Es stellt sich die Frage, inwieweit JavaScript \u00fcberhaupt noch eine Erweiterung dieses Konzeptes darstellen kann. Die Antwort liegt darin, dass ohne JavaScript eine Webseite im Browser v\u00f6llig statisch ist, d.h. es gibt nur eine M\u00f6glichkeit, neue Inhalte zu laden oder \u00fcberhaupt etwas an der Webseite zu \u00e4ndern und das ist, diese neuen Inhalte oder \u00c4nderungen von einem Webserver zu laden. Jede Nutzerinteraktion f\u00fchrt so immer zu einem Request-Response-Prozess mit einem Webserver. Das wird durch JavaScript ge\u00e4ndert. Auf Nutzerinteraktionen kann durch JavaScript lokal, d.h. auf dem Client bleibend, reagiert werden. Die Schnittstelle zwischen JavaScript und HTML/CSS ist das sogenannte Document Objekct Model (DOM) . Das DOM stellt ein Interface (eine Schnittstelle) dar, um HTML-Dokumente \"manipulieren\" zu k\u00f6nnen. Damit ist haupts\u00e4chlich gemeint, dass HTML-Elemente eines HTML-Dokumentes ge\u00e4ndert, hinzugef\u00fcgt und gel\u00f6scht werden k\u00f6nnen. Zum \u00c4ndern der HTML-Elemente z\u00e4hlen das \u00c4ndern des Inhalts der Elemente und das \u00c4ndern von Attributen und deren Werten. Die Idee ist, dass ein HTML-Dokument als ein Baum aufgefasst wird, dessen hierarchische Beziehungen durch das HTML-Dokument (und dessen hierarchischer Struktur) vorgegeben werden und in dem alle HTML-Elemente, alle Attribute und alle Inhalte als Objekte angesehen werden. Wir schauen uns dazu ein einfaches Beispiel an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > </ head > < body > < div class = \"container\" > < h1 > \u00dcberschrift </ h1 > < ul > < li > < a href = \"http://www.htw-berlin.de\" > HTW Berlin </ a > < a href = \"http://fiw.htw-berlin.de\" > FIW </ a > </ li > </ ul > </ div > </ body > </ html > Ein HTML-Dokument besteht aus HTML-Elementen, welche Attribute haben k\u00f6nnen und Inhalte. Im obigen Beispiel hat z.B. das <meta> -Element im <head> ein Attribut, n\u00e4mlich charset . Der Wert dieses Attributes ist ein Text, n\u00e4mlich UTF-8 . Der Inhalt eines <a> -Elementes ist auch ein Text. Im obigen Beispiel haben wir zwei <a> -Elemente. Das eine hat den Inhalt (Text) HTW Berlin und das andere FIW . Wir k\u00f6nnen somit zwischen drei Arten von \"Objekten\" in einem HTML-Dokument unterscheiden: Elemente Attribute Texte Wenn wir diese Artefakte tats\u00e4chlich als Objekte auffassen und au\u00dferdem die hierarchische Beziehung zwischen diesen Objekten ber\u00fccksichtigen, dann l\u00e4sst sich ein Baum aufspannen, der aus solchen Objekten besteht. F\u00fcr obiges Beispiel sieht der Baum dann so aus: Wir interpretieren die Objekte also als Knoten ( Node ) eines Baumes. Einen solchen Baum, der ein HTML-Dokument eindeutig repr\u00e4sentiert, nennen wir Document Object Model (DOM) (auch HTML-DOM ). Ein solcher DOM ist der Ausgangspunkt f\u00fcr die Manipulation des HTML-Dokumentes, denn JavaScript ist in der Lage, jeden beliebigen Knoten innerhalb dieses Baumes anzusprechen und bspw. zu \u00e4ndern oder zu l\u00f6schen. Au\u00dferdem kann auch jede beliebige Position eindeutig bestimmt werden, um z.B. ein Element hinzuzuf\u00fcgen. Wir schauen uns im Folgenden an, welche Funktionen JavaScript zur Verf\u00fcgung stehen, um Positionen in diesem Baum eindeutig zu lokalisieren. DOM-Funktionen (Lokalisation von Elementen) \u00b6 Ausgangspunkt (die Wurzel) eines jeden HTML-DOM ist document (siehe obige Abbildung). Von document aus k\u00f6nnen wir uns beliebig durch den Baum bewegen. Die wohl meist verwendete Funktion zur Lokalisation eines Elementes im DOM ist getElementById() . In unserem obigen Beispiel haben wir nur ein Element mit einer id (einem id -Attribut) und das ist <ul> . Wir k\u00f6nnten gezielt nach diesem Element fragen: document . getElementById ( 'ul1' ) und erhalten als R\u00fcckgabe das Element mit der id=\"ul1\" , also das <ul> -Element (welches wir z.B. in einer Variable speichern k\u00f6nnten). Weitere Funktionen zur Lokalisation von Elementen sind document . getElementsByTagName ( name ) document . getElementsByClassName ( name ) Beide Funktionen liefern uns jeweils ein Array von Elementen zur\u00fcck. Die Funktion document.getElementsByTagName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die den Tag name haben, also z.B. alle <p> -Elemente, wenn document.getElementsByTagName('p') aufgerufen wird. Die Funktion document.getElementsByClassName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die der Klasse name zugeordnet sind, also z.B. alle Elemente mit der Klasse form-group , wenn document.getElementsByClassName('form-group') aufgerufen wird. Mit diesen Funktionen kann man Elemente mitten im DOM lokalisieren. Daneben gibt es noch weitere Funktionen, die jeweils von einem solchen Element ausgehend \"benachbarte\" Knoten lokalisieren. Betrachten wir z.B. diesen Ausschnitt aus einem HTML-Code: < main id = \"main\" > < h3 id = \"headline\" > DOM </ h3 > < img id = \"ball1\" src = \"ball.png\" /> < img id = \"ball2\" src = \"ball.png\" /> < img id = \"ball3\" src = \"ball.png\" /> < img id = \"ball4\" src = \"ball.png\" /> </ main > Der dazugeh\u00f6rige DOM (vereinfacht) ist in der folgenden Abbildung dargestellt sowie die Funktionen, mit denen die umgebenden Elemente lokalisiert werden k\u00f6nnen: F\u00fcr die Funktionen getElementById() und getElementsByTagName() betrachten wir ein erstes einfaches Beispiel: In dem obigen JSFiddle k\u00f6nnen Sie die Wirkungsweise ausprobieren. Wir zeigen hier aber nochmal den vollst\u00e4ndigen Code, damit Sie ihn sich kopieren und wir ihn besser erl\u00e4utern k\u00f6nnen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < style > * { padding : 5 px ; margin : 5 px ; } </ style > </ head > < body > < h1 onmouseover = \"changeColor()\" > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } function changeColor () { var h1arr = document . getElementsByTagName ( 'h1' ); h1arr [ 0 ]. style . color = \"red\" ; } </ script > </ body > </ html > Den <head> k\u00f6nnen wir ignorieren, auch das <style> -Element darin. Wichtig sind: wir haben 2 leere <div> -Elemente mit den Ids id=\"demo1\" und id=\"demo2\" (Zeilen 16 und 18 ) wir haben einen <button> mit dem Attribut onclick . Dieses Attribut bindet einen Ereignis-Listener an den Button. Wird das Click -Ereignis ausgel\u00f6st, wird die JavaScript-Funktion myFunction1() aufgerufen (Zeile 15 ) die JavaScript-Funktion myFunction1() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo1\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich \"Hallo FIW!\" wir haben au\u00dferdem ein einzeiliges Eingabefeld mit der Id id=\"input1\" (Zeile 17 ). Diesem Eingabefeld ist au\u00dferdem das Attribut onkeyup zugeordnet. Dieses Attribut meldet sich bei einem Ereignis an, das ausgel\u00f6st wird, wenn innerhalb des Eingabefeldes eine Taste wieder losgelassen wird - es wird dann das KeyUp -Ereignis ausgel\u00f6st. Durch das Ausl\u00f6sen dieses Ereignisses wird die JavaScript-Funktion myFunction2() aufgerufen. die JavaScript-Funktion myFunction2() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo2\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich den Wert ( value ), der in das Eingabefeld mit der id=\"input1\" eingegeben wurde (Zeilen 24-26 ) der \u00dcberschrift <h1> (Zeile 14 ) wurde das Attribut onmouseover zugeordnet. Damit wird das MouseOver -Ereignis abgefragt. Wird die Maus \u00fcber die \u00dcberschrift bewegt, wird dieses Ereignis ausgel\u00f6st und die Funktion changeColor() aufgerufen diese Funktion lokalisiert zun\u00e4chst alle Elemente mit dem Tag h1 und speichert sie in das Array h1arr (Zeile 29 ). Unsere \u00dcberschrift ist die erste (und einzige) \u00dcberschrift <h1> im Dokument. Wir greifen deshalb mit dem Index 0 auf dieses Element im h1arr -Array zu und \u00e4ndern die Schriftfarbe auf \"red\" (Zeile 30 ) Dieses erste Beispiel zeigt mehrere interssante Punkte: neben den Funktionen zur Lokalisation von Elemeneten gibt es auch Ereignisse, an die man sich anmelden und auf die reagiert werden kann und es gibt Funktionen, die den Inhalt und den Style von Elementen \u00e4ndern Wir schauen uns zun\u00e4chst Ereignisse an, auf die reagiert werden kann. HTML-Ereignisse \u00b6 HTML-Ereignisse \"passieren\" f\u00fcr HTML-Elemente in den allermeisten F\u00e4llen durch Nutzerinteraktionen (Maustaste dr\u00fccken, Fenster vergr\u00f6\u00dfern, Tatstatureingabe etc.). Mit JavaScript k\u00f6nnen wir auf diese Ereignisse reagieren. Eine einfache Form, ein HTML-Element an ein solches Ereignis anzumelden (so dass darauf reagiert werden kann), ist \u00fcber Attribute. Angenommen ein solches Ereignis hei\u00dft Event , dann hei\u00dft das Attribut onEvent (es kann auch alles klein geschrieben werden). Die generelle Syntax ist wie folgt: < element onEvent = \"JavaScript-Code\" /> Der JavaScript-Code muss nicht zwingend der Aufruf einer JavaScript-Funktion, sondern kann auch eine direkte JavaScript-Anweisung sein. Hier eine Liste der \u00fcblichsten HTML-Ereignisse. Die Bedeutung ist aus den Namen selbsterkl\u00e4rend, deshalb werden die meisten Ereignisse hier nicht weiter beschrieben: Mausereignisse (MouseEvent): mousedown , mouseup , click , dblclick , mousemove , mouseover , mousewheel , mouseout , contextmenu Tastaturereignisse (KeyboardEvent): keydown , keypress , keyup Formularereignisse: focus , blur , change , input , submit Fensterereignisse: scroll , resize , hashchange , load , unload Wir zeigen einige Beispiele: In diesem Beispiel werden die Ereignisse focus , blur und input behandelt. Um das blur -Ereignis auszul\u00f6sen, muss das <input> -Element den Focus verlieren. In diesem Beispiel wird das change -Ereignis behandelt. Der Inhalt des Absatzes <p> mit der id=\"radio\" wird bei jedem change -Event erweitert. Es wird also nicht innerHTML v\u00f6llig neu gesetzt, sondern mithilfe von += wird der entsprechende String angeh\u00e4ngt. Das soll insbesondere zeigen, dass das change -Ereignisses wirklich nur ausgel\u00f6st wird, wenn der Wert wechselt. Beachten Sie auch, dass getElementsByName() verwendet wird. Den Radiobuttons wurde jeweils name=\"colors\" zugewiesen. Sie bilden damit auch eine Radiobutton-Group (es kann immer nur ein Radiobutton daraus ausgew\u00e4hlt werden). In diesem Beispiel werden das mouseover - und das mouseout -Event behandelt. Beachten Sie auch die \u00dcbergabe von this an die JavaScript-Funktionen. Damit wird das <div> -Element \u00fcbergeben. Wir m\u00fcssen es innerhalb der Funktionen deshalb nicht mehr explizit mit getElementById() oder \u00e4hnliches holen. In diesem Beispiel wird JavaScript nicht als Funktion, sondern direkt in den Ereignis-Attributen aufgerufen. Noch ein einfaches Beispiel mit den Ereignissen mousedown , mouseup , mouseenter und mouseleave . Noch ein letztes Beispiel, das wir nicht in JSFiddle zeigen, da es daraum geht, die Gr\u00f6\u00dfe des Browsers zu \u00e4ndern (Ereignis resize - die JavaScript-Funktion hei\u00dft auch resize() , aber dieser Name ist frei gew\u00e4hlt): <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body onresize = \"resize()\" > < h2 > Gr\u00f6\u00dfe des Browserfensters \u00e4ndern! </ h2 > < p id = \"demo\" ></ p > < script > function resize () { var w = window . outerWidth ; var h = window . outerHeight ; var txt = \"Fenstergr\u00f6\u00dfe: Breite=\" + w + \", H\u00f6he=\" + h ; document . getElementById ( \"demo\" ). innerHTML = txt ; } </ script > </ body > </ html > Wir haben uns nun einige Beispiele angesehen, wie wir HTML-Elemente \u00e4ndern k\u00f6nnen. Prinzipiell geht es mit den Eigenschaften: node.innerHTML = - Inhalt eines Elements \u00e4ndern node.attribute = - Attribut eines Elements \u00e4ndern node.style. property = - Style/Formatierung \u00e4ndern node.classList.add() - CSS-Klassen zum Element hinzuf\u00fcgen node.classList.remove() - CSS-Klassen vom Element entfernen Elemente hinzuf\u00fcgen und l\u00f6schen \u00b6 Nun wollen wir den DOM insofern manipulieren, als dass wir zun\u00e4chst Objekte hinzuf\u00fcgen. Die wichtigsten Funktionen daf\u00fcr sind: document.createElement('tag') - Element erzeugen document.createTextNode(\"text\") - Textelement erzeugen node.appendChild(childNode) - Element childNode dem Knoten node als direktes (letztes) Kind hinzuf\u00fcgen node.removeChild(childNode) - Kind childNode des Elementes node l\u00f6schen node.replaceChild(newNode, oldNode) - Kind oldNode des Knotens node durch newNode ersetzen node.insertBefore(newNode, oldNode) - Kind newNode des Knotens node vor das Kind oldNode des Knotens node einf\u00fcgen Create \u00b6 Wir betrachten wieder ein einfaches Beispiel: Im HTML-Code sehen wir ein <input> -Element und eine Liste <ul> , die bereits 2 Listitems <li> enth\u00e4lt. Dem <input> -Element wurde ein change -Listener hinzugef\u00fcgt. Sobald sich der Wert in dem <input> -Element ge\u00e4ndert hat, wird dieses Ereignis ausgel\u00f6st und die Funktion addItem() aufgerufen. Dieser Funktion wird das <input> -Element als Parameter \u00fcbergeben. In dieser Funktion wird zuerst ein Textknoten erzeugt ( let textNode = document.createTextNode(text); ) Der text ist der Wert value des <input> -Elementes. Au\u00dferdem wird ein <li> -Knoten (Objekt) erzeugt ( let liNode = document.createElement('li'); ). An diesen <li> -Knoten wird der Textknoten angeh\u00e4ngt ( liNode.appendChild(textNode); ). Danach wird an die <ul> -Liste der <li> -Knoten (mit dem Textknoten) angeh\u00e4ngt ( ulNode.appendChild(liNode); ). Das neue List-item erscheint sofort als letztes Kind in der Liste. Im folgenden Beispiel passiert das gleiche, nur wird das neu erzeugte List-Item nicht hinten an die Liste angeh\u00e4ngt, sondern vorne eingef\u00fcgt: Tats\u00e4chlich \u00e4ndert sich daf\u00fcr nur die letzte Anweisung in der Funktion. Aus ulNode.appendChild(liNode); wird ulNode.insertBefore(liNode, ulNode.childNodes[0]); . Mit ulNode.childNodes[0] greifen wir auf das erste Kind des ulNode zu. Das h\u00e4tten wir auch durch ulNode.firstChild haben k\u00f6nnen. Clone \u00b6 Eine weitere M\u00f6glichkeit, ein Element zu erzeugen, ist durch clonen eines anderen Knotens (Elementes). Der Vorteil des Clonens besteht darin, dass ein gesamter Unterbaum eines Elementes mitkopiert werden kann. Die Syntax f\u00fcr das Clonen eines Knotens node ist nod.cloneNode(deep) . Wenn deep true ist, werden auch alle Kindelemente geklont, wenn false , dann nur das Element selbst. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } </ script > </ body > </ html > Im obigen Beispiel verwenden wir Bootstrap und f\u00fcr das <img> -Element einige Bootstrap-Klassen (haupts\u00e4chlich, damit es in der Mitte ist). Wenn wir auf das Bild Doppelklicken ( dblclick ), wird die Funktion cloneFunc() aufgerufen, der wir das img -Objekt \u00fcbergeben. In der Funktion clonen wir das Bild (hier ist es egal, ob deep clone oder nicht, da das img -Element keine Kindknoten hat). Der Clone wird dem div -Element als Kind hinzugef\u00fcgt. Durch jeden Doppelklick auf das Bild wird ein weiterer Clone dem <div> -Element hinzugef\u00fcgt. addEventListener \u00b6 Eigentlich ist die Verwendung der Attribute onEvent nicht optimal, da die Trennung zwischen HTML und JavaScript nicht gro\u00df genug ist. Wir erinnern uns, wir wollen eine Trennung in die Zust\u00e4ndigkeiten: HTML f\u00fcr den Inhalt, CSS f\u00fcr das Layout und JavaScript f\u00fcr das Verhalten. Besser ist es, die Event-Listener ebenfalls durch JavaScript hinzuzuf\u00fcgen und nicht durch HTML-Attribute. Wir erweitern unser obiges Clone-Beispiel zun\u00e4chst wie folgt (hinzugekommener Code hervorgehoben): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } </ script > </ body > </ html > In Zeile 17 melden wir unseren geklonten Knoten an den Event-Listener f\u00fcr das click -Ereignis an. Wird auf das Bild geklickt, dann wird die Funktion removeFunc() aufgerufen. Beachten Sie, dass der erste Parameter der addEventListener() -Funktion das Ereignis click ist (und nicht das HTML-Attribut onClick ) und dass der zweite Parameter die Referenz auf die Funktion removeFunc ist, nicht der Aufruf der Funktion. W\u00fcrden wir dort anstelle von removeFunc removeFunc() schreiben, entspr\u00e4che das dem Aufruf der Funktion und diese w\u00fcrde bei Aufruf der Funktion addEventListener() sofort ausgef\u00fchrt. Beachten Sie au\u00dferdem, dass bei der Funktionsdefinition von removeFunc() das ausgel\u00f6ste Event event als Parameter \u00fcbergeben wird. Dies passiert automatisch (also immer). Wenn wir den Parameter benennen, dann k\u00f6nnen wir auf dieses Ereignis zugreifen. Das machen wir auch, n\u00e4mlich in Zeile 24 , wo wir das target des Events abfragen, also das das Ereignis ausl\u00f6sende Element (unser jeweiliges <img> ). Die console.log() -Aufrufe sind jeweils nur zum Debuggen bzw. Inspizieren. Es gibt zwei JavaScript-Funktionen zum L\u00f6schen eines Elementes: parent.removeChild(child) - das Elternelement parent ruft die Funktion auf und l\u00f6scht das \u00fcbergebene Kind child node.remove() - ein Knoten (Element) ruft f\u00fcr sich selbst die remove() -Funktion auf und l\u00f6scht sich also selbst Wir haben im obigen Abschnitt die erste Variante gew\u00e4hlt, um zu zeigen, wie der Elternknoten ermittelt werden kann. Man h\u00e4tte aber auch auf Zeile 26 verzeichten und in Zeile 28 einfach obj.remove() schreiben k\u00f6nnen. Beispiel vollst\u00e4ndig mit JavaScript erzeugt \u00b6 Das soeben gezeigte Beispiel soll nun exemplarisch vollst\u00e4ndig durch JavaScript erzeugt werden. Wir verwenden genau ein Event-Attribut, n\u00e4mlich onload , das wir dem body zuweisen. Das load -Event wird aufgerufen, sobald die Seite vollst\u00e4ndig geladen ist. Ist die (leere) Seite vollst\u00e4ndig geladen, wird die Funktion createAllElements() aufgerufen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < script > function cloneFunc ( event ) { let obj = event . target ; let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } function createAllElements () { let imgNode = document . createElement ( 'img' ); imgNode . src = \"./images/fiw.jpg\" ; imgNode . classList . add ( \"rounded\" , \"mx-auto\" , \"d-block\" ); imgNode . style . width = \"150px\" ; imgNode . alt = \"fiw\" ; imgNode . addEventListener ( \"dblclick\" , cloneFunc ); let divNode = document . createElement ( 'div' ); divNode . id = \"div1\" ; let scriptNode = document . getElementsByTagName ( 'script' )[ 0 ]; document . body . insertBefore ( imgNode , scriptNode ); document . body . insertBefore ( divNode , scriptNode ); } </ script > </ body > </ html > Hervorgehoben sind wieder die Zeilen, in dennen sich etwas ge\u00e4ndert hat. Zeile 10 : Der <body> enth\u00e4lt nun nur noch ein <script> -Element. Ansonsten keine weiteren HTML-Elemente. Zeile 12 : Der Funktion cloneFunc() kann nun nicht mehr das img -Objekt selbst \u00fcbergeben werden (da wir in addEventListener() nur die Referenz auf die Funktion \u00fcbergeben). Deswegen verwenden wir auch hier wieder das automatisch \u00fcbergebene event und ermitteln das target des ausgel\u00f6sten Ereignisses (Zeile 14 ). Zeilen 31-46 : Die Funktion createAllElements() erzeugt zun\u00e4chst ein img -Knoten mit allen erforderlichen Attributen. Au\u00dferdem wird dieser Knoten auch noch an das dblclick -Ereignis angemeldet und die Referenz auf die Funktion cloneFunc als Event-Handler \u00fcbergeben. In Zeile 44 wird dieser img -Knoten dem <body> hinzugef\u00fcgt, und zwar vor dem <script> -Element. Au\u00dferdem wird noch unser <div> mit der id=\"div1\" erzeugt und ebenfalls vor dem <script> -Element (und hinter das <img> -Element) eingef\u00fcgt. Es entsteht die exakt gleiche Webseite wie in dem Beispiel davor (siehe Beispiel aus addEventListener ). JavaScript - Sprachelemente \u00b6 var , let und const \u00b6 Mithilfe der Schl\u00fcsselw\u00f6rter var , let und const k\u00f6nnen in JavaScript Variablen deklariert werden. Wenn Sie eine Variable mit var deklarieren, dann ist diese Variable innerhalb der gesamten Funktion, in der Sie die Variable deklarieren, g\u00fcltig. Dagegen hat let nur eine Blockg\u00fcltigkeit , d.h. eine mit let deklarierte Variable ist nur in dem Anweisungsblock g\u00fcltig, in dem sie deklariert wurde. Eine mit let deklarierte Variable verh\u00e4lt sich also wie eine in Java deklarierte Variable. const wird zur Deklaration von Konstanten verwendet. Es ist zu bachten: Falls es sich bei der mit const deklarierten Konstante um eine Referenzvariable handelt (also auf ein Objekt oder Array zeigt), dann kann diese Variable ihre Referenz zwar nicht mehr \u00e4ndern, das jeweilige Objekt, auf das die Variable (konstant) zeigt, kann sich aber schon \u00e4ndern. Globale Variablen, also Variablen, die von allen Funktionen geteilt werden (in allen Funktionen genutzt werden k\u00f6nnen), werden au\u00dferhalb der Funktionen deklariert. Man sollte nur sehr selten globale Variablen einsetzen, da sie in allen anderen Funktionen (auch externen) \u00fcberschrieben werden k\u00f6nnen. Bl\u00f6derweise ist eine Variable auch dann global, wenn sie ohne eines der genannten Schl\u00fcsselw\u00f6rter ( var , let und const ) innerhalb einer Funktion \"deklariert\" wurde. Das geschieht meistens durch eine Wertzuweisung in der Annahme, dass die Variable bereits deklariert wurde. Eine solche unbeabsichtigte Erstellung einer globalen Variable sollte vermieden werden - die absichtliche erst recht. Wenn globale Variable, dann die Deklaration au\u00dferhalb aller Funktionen. Objekte \u00b6 Objekte in JavaScript werden in JavaScript Object Notation beschrieben. Wir werden darauf noch genauer eingehen , zeigen hier aber schonmal ein einfaches Beispiel zur Einf\u00fchrung: let person = { vorname : \"Maria\" , nachname : \"Musterfrau\" }; Es wurde eine person definiert mit 2 Feldern vorname und nachname und diesen Feldern wurden Werte zugewiesen. Der Zugriff auf die Felder erfolgt mittels Punkt-Notation, also person.vorname und person.nachname . Sie k\u00f6nnen die Werte auch einfach \u00fcberschreiben, z.B. person.nachname = \"Schmidt\" . Sie k\u00f6nnen das Objekt auch um weitere Eigenschaften erweitern, z.B. person.alter = 42 . Neben der \u00fcblichen Punktnotation ist auch zu erw\u00e4hnen, dass die Eigenschaften auch Schl\u00fcssel eines assoziativen Arrays sind, d.h. Sie k\u00f6nnen auf die Werte auch wie folgt zugreifen: person [ \"vorname\" ] // Maria person [ \"nachname\" ] // Schmidt person [ \"alter\" ] // 42 Mithilfe von delete k\u00f6nnen Eigenschaften gel\u00f6scht werden, z.B. delete person.alter; . Ab dann ist person.alter undefined . Objekteigenschaften k\u00f6nnen auch Funktionen sein, z.B. person . name = function (){ return this . vorname + \" \" + this . nachname }; Der Aufruf erfolgt dann \u00fcber person.name(); Arrays \u00b6 Arrays in JavaScript werden fast genauso behandelt wie in Java. Hier ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body > < h2 > JavaScript Arrays </ h2 > < p id = \"demo\" ></ p > < script > let sgs = [ \"FIW\" , \"AI\" , \"IMI\" , \"WI\" ]; let lange = sgs . length ; text = \"<ul>\" ; for ( let i = 0 ; i < sgs . length ; i ++ ) { text += \"<li>\" + sgs [ i ] + \"</li>\" ; } text += \"</ul>\" ; document . getElementById ( \"demo\" ). innerHTML = text ; </ script > </ body > </ html > In Zeile 12 wird das Array sgs (soll Studieng\u00e4nge hei\u00dfen - immer sprechende Namen verwenden ;-) definiert. Es enth\u00e4lt lauter Strings. In JavaScript k\u00f6nnen die Elemente eines Arrays von verschiedenen Typen sein. In Zeile 16 definieren wir die for -Schleife, mit der wir durch das Array laufen (ist genau so numerisch indiziert, wie wir das von Java kennen). Wir greifen \u00fcber die Index-Schreibweise sgs[i] auf alle Elemente des Arrays zu (Zeile 17 ). Das Array kann auch aus Objekten bestehen. Angenommen, das Array sieht so aus: var staedte = [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"images/stockholm.png\" }, { \"jahr\" : 852 , \"stadt\" : \"Madrid\" , \"link\" : \"http://de.wikipedia.org/wiki/Madrid\" , \"bild\" : \"images/madrid.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"images/mainz.png\" } ]; Dann sind die Elemente des Arrays numerisch indiziert. JavaScript ist dynamisch typisiert \u00b6 Im Gegensatz zu z.B. Java ist JavaScript nicht statisch, sondern dynamisch typisiert. Der Wert einer Variablen bestimmt deren Typ. Beispiel: var number = 16 ; // number var name = \"Johnson\" ; // string var cars = [ \"Saab\" , \"Volvo\" , \"BMW\" ]; // object (Array) var obj = { firstName : \"John\" , lastName : \"Doe\" }; // object var func = new Function (); // function var correct = true ; // boolean var x ; // now x is undefined var x = 5 ; // now x is a Number var x = \"John\" ; // now x is a String typeof kann verwendet werden, ob zu \u00fcberpr\u00fcfen, ob eine Variable \u00fcberhaupt definiert ist und/oder von welchem Typ sie ist. Es liefert folgende Resultate: undefined boolean function number object string symbol Beispiel: < div id = \"myDiv\" ></ div > < script > var x ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // undefined x = \"12\" ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // string x = 12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = 12.12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = true ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // boolean x = function (){ alert ( \"Funktion\" );}; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Function ( \"alert('Funktion')\" ); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Object (); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // object </ script > Funktionen \u00b6 Die Definition von Funktionen in JavaScript erfolgt \u00fcber das Schl\u00fcsselwort function . Wir haben oben bereits mehrere Beispiele f\u00fcr Funktionen gezeigt. Hier ein weiteres: < p id = \"demo\" ></ p > < script > function myFunction ( a , b ) { return a * b ; } document . getElementById ( \"demo\" ). innerHTML = myFunction ( 4 , 3 ); </ script > Es wird eine Funktion myFunction() definiert, der 2 Parameter a und b \u00fcbergeben werden. Die Funktion berechnet das Produkt aus a und b und gibt dieses mithilfe von return zur\u00fcck. Der zur\u00fcckgegebene Wert wird als Inhalt des Absatzes <p> mit der id=\"demo\" verwendet. myFunction(4, 3); ist der Aufruf der Funktion. Au\u00dferdem k\u00f6nnen Funktionen als anonyme Funktionen deklariert werden. Es ist m\u00f6glich, dass eine Variable auf eine (anonyme) Funktion zeigt. Diese Variable kann dann wie die Funktion selbst verwendet werden. Beispiel: var x = function ( a , b ) { return a * b }; Die Funktion kann nun \u00fcber z.B. x(4,3); aufgerufen werden. Eine weitere (aber selten verwendete) M\u00f6glichkeit, eine Funktion zu definieren, ist die Verwendung des Function() -Konstruktors. Beispiel: var myFunction = new Function ( \"a\" , \"b\" , \"return a * b\" ); Diese Funktion kann dann (wie oben mit x ) mit myFunction(4,3); aufgerufen werden. Aber, wie gesagt, das ist eher un\u00fcblich, denn es ist \u00e4quivalent zu: var myFunction = function ( a , b ) { return a * b }; mit dem Aufruf myFunction(4,3); . Die Verwendung des Function() -Konstruktors zeigt aber, dass jede Funktion vom Typ function ist. In JavaScript gibt es also einen Typ function . W\u00fcrde man f\u00fcr das Beispiel mit x z.B. typeof(x) aufrufen, ist das Resultat function . Variable Anzahl von Parametern \u00b6 Die Anzahl der Parameter kann, muss aber nicht in der Funktionsdefinition angegeben werden. Es geht immer (auch wenn eine feste Anzahl von Parametern angegeben wurde): function summe () { var i , sum = 0 ; for ( i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ]; } return sum ; } Diese Funktion kann jetzt mit beliebig vielen Parametern aufgerufen werden: summe ( 1 , 2 , 3 , 4 , 5 , 6 ); summe ( 1 , 2 , 3 ); Arrow-Funktionen \u00b6 Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ; Callback-Funktionen \u00b6 Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden. Promises \u00b6 Eine Promise ist das Ergebnis einer asynchronen Operation. Es gibt vier Status einer Promis (uns interessiert in der Regel nur resolved oder rejected ): Status Erkl\u00e4rung pending die Promise wartet noch auf die Beendigung der asynchronen Operation settled die asynchrone Operation wurde beendet resolved die asynchrone Operation wurde erfolgreich beendet rejected die asynchrone Operation ist fehlgeschlagen Um das Prinzip einer Promise zu erl\u00e4utern, schauen wir uns ein Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } Die Funktion getAll() gibt eine Promise zur\u00fcck. Diese wird mit dem Konstruktor erzeugt. Dem Konstruktor wird eine Callback-Funktion \u00fcbergeben. Hier ist diese Funktion die Anfrage an die Datenbank connection.query() . Diese Funktion ist asynchron, d.h. sie wird ausgef\u00fchrt, ohne dass andere Funktionsaufrufe stoppen m\u00fcssen. Man kann auch sagen, dass die Promise die asynchrone Funktion kapselt . Die asynchrone Funktion enth\u00e4lt ebenfalls eine Callback-Funktion. Hier wurden als Parameternamen der Callback-Funktion error und results gew\u00e4hlt. Der erste Parameter wirft einen Fehler, wenn die asynchrone Funktion fehlschl\u00e4gt, der zweite Parameter enth\u00e4lt die Daten bei Erfolg. Mit reject gibt man den Fehler zur\u00fcck (im Fehlerfall) und mit resolve die Daten (im Erfolgsfall). return new Promise() Wir merken uns also: die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Wie kann eine solche Promise nun verwendet werden? Dazu schauen wir uns erneut das Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function listAction ( request , response ) { model . getAll (). then ( movies => response . send ( view ( movies )), error => response . send ( error ), ); } Der entscheidende Punkt ist, dass ein Promise-Objekt eine then -Methode besitzt. Dieser then -Methode k\u00f6nnen wiederum zwei Callback-Funktionen \u00fcbergeben werden. Die erste Funktion wird durch die resolve -Funktion der Promise aufgerufen, die zweite Funktion, falls die Promise die reject -Funktion aufruft. Werden der resolve - und der reject -Funktion Argumente \u00fcbergeben (so wie oben resolve(results) und reject(error) ), dann k\u00f6nnen diese Argumente in der jeweiligen Callback-Funktion ausgewertet werden ( results \u2192 movies bzw. error \u2192 error ). Die then -Funktion selbst gibt \u00fcbrigens wieder ein Promise -Objekt zur\u00fcck. Somit k\u00f6nnen mehrere Promises verkettet werden.","title":"JavaScript"},{"location":"javascript/#javascript","text":"JavaScript wurde 1995 von Brendan Eich entwickelt. Er arbeitete damals bei Netscape und entwickelte mit dem damals sogenannten LiveScript eine Skriptsprache f\u00fcr den damaligen Netscape-Browser. Ein damaliger Browser \"verstand\" HTML und CSS. HTML sah f\u00fcr Nutzerinteraktionen nur das Klicken auf Hyperlinks vor. Andere Nutzerinteraktionen waren nicht vorgesehen. Mithilfe von JavaScript wurde eine Schnittstelle geschaffen, um durch Nutzerinteraktionen den HTML-Code zu manipulieren, ohne dass ein weiteres Nachladen vom Webserver notwendig wurde. Mit der Einf\u00fchrung von JavaScript wurden die F\u00e4higkeiten von Browsern erweiteret, indem nun nicht mehr nur HTML und CSS interpretiert wurde, sondern auch JavaScript - alles Client-seitig, also durch den Browser selbst. JavaScript ist eine sogenannte Skriptsprache , d.h. der Quellcode wird nicht compiliert und dann der \u00fcbersetzte Byte- oder Maschinencode ausgef\u00fchrt, sondern der Quellcode wird durch einen Interpreter interpretiert. Allerdings wird f\u00fcr Optimierungen JavaScript - insbesondere serverseitig in Node.js - durch sogenannte Engines doch in Maschinencode \u00fcbersetzt, welcher ausgef\u00fchrt wird. Die bekannteste dieser Engines ist die Google-Engine V8 . Die Technologie der Compilierung wird als Just-in-time-Kompilierung (JIT) bezeichnet. JavaScript kennt (im Gegensatz zu TypeScript) keine Klassen. Das Objektmodell von JavaScript basiert auf Prototypen . Eigenschaften und Methoden k\u00f6nnen zur Laufzeit den Objekten hinzugef\u00fcgt werden. Neben diesem dynamischen Objektmodell ist auch die Typisierung in JavaScript dynamisch. Der Typ einer Variable h\u00e4ngt vom Wert ab. Mit dem Wert kann sich auch der Typ der Variable \u00e4ndern. Client-seitig haben HTML, CSS und JavaScript folgende Bedeutung (und wir sollten auch auf eine solche strikte Trennung achten): HTML f\u00fcr die Inhalte, CSS f\u00fcr das Layout, JavaScript f\u00fcr das interaktive Verhalten unserer Webseite.","title":"JavaScript"},{"location":"javascript/#javascript-in-unseren-webseiten","text":"Zun\u00e4chst \u00fcberlegen wir uns, wie wir das auch schon f\u00fcr CSS getan hatten, wo wir den JavaScript-Code in unseren Webseiten einf\u00fcgen k\u00f6nnen. Prinzipiell wird JavaScript-Code in einem HTML-Dokument innerhalb eines <script></script> -Elementes eingef\u00fcgt. Im Gegensatz zu CSS (wo wir die Definitionen innerhalb des <style></style> -Elementes angegeben haben, welches immer im <head> positioniert wird), ist es egal, ob das <script> -Element im <head> oder <body> angelegt wird. Sie k\u00f6nnen innerhalb eines HTML-Dokumentes auch mehrere <script> -Elemente haben und Sie k\u00f6nnen dann auch sowohl im <head> als auch im <body> positioniert sein. Wie bei CSS, ist es auch f\u00fcr JavaScript \u00fcblich, den Code in externe (. js )-Dateien auszulagern und diese dann in das HTML-Dokument einzubinden. Dies geschieht aber nicht \u00fcber ein <link> -Element, sondern ebenfalls \u00fcber das <script> -Element. Das folgende Beispiel zeigt die Verwendung des <script> -Eelementes zum Einbinden von JavaScript: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } </ script > </ head > < body > < script src = \"myScript.js\" ></ script > < h1 > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } </ script > </ body > </ html > Ein gutes Vorgehen ist es, JavaScript am Ende des <body> -Elementes einzubinden, damit die Seite zun\u00e4chst dargestellt wird und erst dann der JavaScript-Code geladen wird. Das laden des JavaScript-Codes w\u00fcrde ansonsten die Darstellung der Webseite verz\u00f6gern.","title":"JavaScript in unseren Webseiten"},{"location":"javascript/#document-object-model-dom","text":"Wir betrachten JavaScript zun\u00e4chst nur aus client-seitiger Sicht, d.h. f\u00fcr die Verwendung im Browser. Der Browser stellt HTML dar, welches durch CSS in ein ansprechendes Layout gestzt wurde. Es stellt sich die Frage, inwieweit JavaScript \u00fcberhaupt noch eine Erweiterung dieses Konzeptes darstellen kann. Die Antwort liegt darin, dass ohne JavaScript eine Webseite im Browser v\u00f6llig statisch ist, d.h. es gibt nur eine M\u00f6glichkeit, neue Inhalte zu laden oder \u00fcberhaupt etwas an der Webseite zu \u00e4ndern und das ist, diese neuen Inhalte oder \u00c4nderungen von einem Webserver zu laden. Jede Nutzerinteraktion f\u00fchrt so immer zu einem Request-Response-Prozess mit einem Webserver. Das wird durch JavaScript ge\u00e4ndert. Auf Nutzerinteraktionen kann durch JavaScript lokal, d.h. auf dem Client bleibend, reagiert werden. Die Schnittstelle zwischen JavaScript und HTML/CSS ist das sogenannte Document Objekct Model (DOM) . Das DOM stellt ein Interface (eine Schnittstelle) dar, um HTML-Dokumente \"manipulieren\" zu k\u00f6nnen. Damit ist haupts\u00e4chlich gemeint, dass HTML-Elemente eines HTML-Dokumentes ge\u00e4ndert, hinzugef\u00fcgt und gel\u00f6scht werden k\u00f6nnen. Zum \u00c4ndern der HTML-Elemente z\u00e4hlen das \u00c4ndern des Inhalts der Elemente und das \u00c4ndern von Attributen und deren Werten. Die Idee ist, dass ein HTML-Dokument als ein Baum aufgefasst wird, dessen hierarchische Beziehungen durch das HTML-Dokument (und dessen hierarchischer Struktur) vorgegeben werden und in dem alle HTML-Elemente, alle Attribute und alle Inhalte als Objekte angesehen werden. Wir schauen uns dazu ein einfaches Beispiel an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > </ head > < body > < div class = \"container\" > < h1 > \u00dcberschrift </ h1 > < ul > < li > < a href = \"http://www.htw-berlin.de\" > HTW Berlin </ a > < a href = \"http://fiw.htw-berlin.de\" > FIW </ a > </ li > </ ul > </ div > </ body > </ html > Ein HTML-Dokument besteht aus HTML-Elementen, welche Attribute haben k\u00f6nnen und Inhalte. Im obigen Beispiel hat z.B. das <meta> -Element im <head> ein Attribut, n\u00e4mlich charset . Der Wert dieses Attributes ist ein Text, n\u00e4mlich UTF-8 . Der Inhalt eines <a> -Elementes ist auch ein Text. Im obigen Beispiel haben wir zwei <a> -Elemente. Das eine hat den Inhalt (Text) HTW Berlin und das andere FIW . Wir k\u00f6nnen somit zwischen drei Arten von \"Objekten\" in einem HTML-Dokument unterscheiden: Elemente Attribute Texte Wenn wir diese Artefakte tats\u00e4chlich als Objekte auffassen und au\u00dferdem die hierarchische Beziehung zwischen diesen Objekten ber\u00fccksichtigen, dann l\u00e4sst sich ein Baum aufspannen, der aus solchen Objekten besteht. F\u00fcr obiges Beispiel sieht der Baum dann so aus: Wir interpretieren die Objekte also als Knoten ( Node ) eines Baumes. Einen solchen Baum, der ein HTML-Dokument eindeutig repr\u00e4sentiert, nennen wir Document Object Model (DOM) (auch HTML-DOM ). Ein solcher DOM ist der Ausgangspunkt f\u00fcr die Manipulation des HTML-Dokumentes, denn JavaScript ist in der Lage, jeden beliebigen Knoten innerhalb dieses Baumes anzusprechen und bspw. zu \u00e4ndern oder zu l\u00f6schen. Au\u00dferdem kann auch jede beliebige Position eindeutig bestimmt werden, um z.B. ein Element hinzuzuf\u00fcgen. Wir schauen uns im Folgenden an, welche Funktionen JavaScript zur Verf\u00fcgung stehen, um Positionen in diesem Baum eindeutig zu lokalisieren.","title":"Document Object Model (DOM)"},{"location":"javascript/#dom-funktionen-lokalisation-von-elementen","text":"Ausgangspunkt (die Wurzel) eines jeden HTML-DOM ist document (siehe obige Abbildung). Von document aus k\u00f6nnen wir uns beliebig durch den Baum bewegen. Die wohl meist verwendete Funktion zur Lokalisation eines Elementes im DOM ist getElementById() . In unserem obigen Beispiel haben wir nur ein Element mit einer id (einem id -Attribut) und das ist <ul> . Wir k\u00f6nnten gezielt nach diesem Element fragen: document . getElementById ( 'ul1' ) und erhalten als R\u00fcckgabe das Element mit der id=\"ul1\" , also das <ul> -Element (welches wir z.B. in einer Variable speichern k\u00f6nnten). Weitere Funktionen zur Lokalisation von Elementen sind document . getElementsByTagName ( name ) document . getElementsByClassName ( name ) Beide Funktionen liefern uns jeweils ein Array von Elementen zur\u00fcck. Die Funktion document.getElementsByTagName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die den Tag name haben, also z.B. alle <p> -Elemente, wenn document.getElementsByTagName('p') aufgerufen wird. Die Funktion document.getElementsByClassName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die der Klasse name zugeordnet sind, also z.B. alle Elemente mit der Klasse form-group , wenn document.getElementsByClassName('form-group') aufgerufen wird. Mit diesen Funktionen kann man Elemente mitten im DOM lokalisieren. Daneben gibt es noch weitere Funktionen, die jeweils von einem solchen Element ausgehend \"benachbarte\" Knoten lokalisieren. Betrachten wir z.B. diesen Ausschnitt aus einem HTML-Code: < main id = \"main\" > < h3 id = \"headline\" > DOM </ h3 > < img id = \"ball1\" src = \"ball.png\" /> < img id = \"ball2\" src = \"ball.png\" /> < img id = \"ball3\" src = \"ball.png\" /> < img id = \"ball4\" src = \"ball.png\" /> </ main > Der dazugeh\u00f6rige DOM (vereinfacht) ist in der folgenden Abbildung dargestellt sowie die Funktionen, mit denen die umgebenden Elemente lokalisiert werden k\u00f6nnen: F\u00fcr die Funktionen getElementById() und getElementsByTagName() betrachten wir ein erstes einfaches Beispiel: In dem obigen JSFiddle k\u00f6nnen Sie die Wirkungsweise ausprobieren. Wir zeigen hier aber nochmal den vollst\u00e4ndigen Code, damit Sie ihn sich kopieren und wir ihn besser erl\u00e4utern k\u00f6nnen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < style > * { padding : 5 px ; margin : 5 px ; } </ style > </ head > < body > < h1 onmouseover = \"changeColor()\" > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } function changeColor () { var h1arr = document . getElementsByTagName ( 'h1' ); h1arr [ 0 ]. style . color = \"red\" ; } </ script > </ body > </ html > Den <head> k\u00f6nnen wir ignorieren, auch das <style> -Element darin. Wichtig sind: wir haben 2 leere <div> -Elemente mit den Ids id=\"demo1\" und id=\"demo2\" (Zeilen 16 und 18 ) wir haben einen <button> mit dem Attribut onclick . Dieses Attribut bindet einen Ereignis-Listener an den Button. Wird das Click -Ereignis ausgel\u00f6st, wird die JavaScript-Funktion myFunction1() aufgerufen (Zeile 15 ) die JavaScript-Funktion myFunction1() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo1\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich \"Hallo FIW!\" wir haben au\u00dferdem ein einzeiliges Eingabefeld mit der Id id=\"input1\" (Zeile 17 ). Diesem Eingabefeld ist au\u00dferdem das Attribut onkeyup zugeordnet. Dieses Attribut meldet sich bei einem Ereignis an, das ausgel\u00f6st wird, wenn innerhalb des Eingabefeldes eine Taste wieder losgelassen wird - es wird dann das KeyUp -Ereignis ausgel\u00f6st. Durch das Ausl\u00f6sen dieses Ereignisses wird die JavaScript-Funktion myFunction2() aufgerufen. die JavaScript-Funktion myFunction2() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo2\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich den Wert ( value ), der in das Eingabefeld mit der id=\"input1\" eingegeben wurde (Zeilen 24-26 ) der \u00dcberschrift <h1> (Zeile 14 ) wurde das Attribut onmouseover zugeordnet. Damit wird das MouseOver -Ereignis abgefragt. Wird die Maus \u00fcber die \u00dcberschrift bewegt, wird dieses Ereignis ausgel\u00f6st und die Funktion changeColor() aufgerufen diese Funktion lokalisiert zun\u00e4chst alle Elemente mit dem Tag h1 und speichert sie in das Array h1arr (Zeile 29 ). Unsere \u00dcberschrift ist die erste (und einzige) \u00dcberschrift <h1> im Dokument. Wir greifen deshalb mit dem Index 0 auf dieses Element im h1arr -Array zu und \u00e4ndern die Schriftfarbe auf \"red\" (Zeile 30 ) Dieses erste Beispiel zeigt mehrere interssante Punkte: neben den Funktionen zur Lokalisation von Elemeneten gibt es auch Ereignisse, an die man sich anmelden und auf die reagiert werden kann und es gibt Funktionen, die den Inhalt und den Style von Elementen \u00e4ndern Wir schauen uns zun\u00e4chst Ereignisse an, auf die reagiert werden kann.","title":"DOM-Funktionen (Lokalisation von Elementen)"},{"location":"javascript/#html-ereignisse","text":"HTML-Ereignisse \"passieren\" f\u00fcr HTML-Elemente in den allermeisten F\u00e4llen durch Nutzerinteraktionen (Maustaste dr\u00fccken, Fenster vergr\u00f6\u00dfern, Tatstatureingabe etc.). Mit JavaScript k\u00f6nnen wir auf diese Ereignisse reagieren. Eine einfache Form, ein HTML-Element an ein solches Ereignis anzumelden (so dass darauf reagiert werden kann), ist \u00fcber Attribute. Angenommen ein solches Ereignis hei\u00dft Event , dann hei\u00dft das Attribut onEvent (es kann auch alles klein geschrieben werden). Die generelle Syntax ist wie folgt: < element onEvent = \"JavaScript-Code\" /> Der JavaScript-Code muss nicht zwingend der Aufruf einer JavaScript-Funktion, sondern kann auch eine direkte JavaScript-Anweisung sein. Hier eine Liste der \u00fcblichsten HTML-Ereignisse. Die Bedeutung ist aus den Namen selbsterkl\u00e4rend, deshalb werden die meisten Ereignisse hier nicht weiter beschrieben: Mausereignisse (MouseEvent): mousedown , mouseup , click , dblclick , mousemove , mouseover , mousewheel , mouseout , contextmenu Tastaturereignisse (KeyboardEvent): keydown , keypress , keyup Formularereignisse: focus , blur , change , input , submit Fensterereignisse: scroll , resize , hashchange , load , unload Wir zeigen einige Beispiele: In diesem Beispiel werden die Ereignisse focus , blur und input behandelt. Um das blur -Ereignis auszul\u00f6sen, muss das <input> -Element den Focus verlieren. In diesem Beispiel wird das change -Ereignis behandelt. Der Inhalt des Absatzes <p> mit der id=\"radio\" wird bei jedem change -Event erweitert. Es wird also nicht innerHTML v\u00f6llig neu gesetzt, sondern mithilfe von += wird der entsprechende String angeh\u00e4ngt. Das soll insbesondere zeigen, dass das change -Ereignisses wirklich nur ausgel\u00f6st wird, wenn der Wert wechselt. Beachten Sie auch, dass getElementsByName() verwendet wird. Den Radiobuttons wurde jeweils name=\"colors\" zugewiesen. Sie bilden damit auch eine Radiobutton-Group (es kann immer nur ein Radiobutton daraus ausgew\u00e4hlt werden). In diesem Beispiel werden das mouseover - und das mouseout -Event behandelt. Beachten Sie auch die \u00dcbergabe von this an die JavaScript-Funktionen. Damit wird das <div> -Element \u00fcbergeben. Wir m\u00fcssen es innerhalb der Funktionen deshalb nicht mehr explizit mit getElementById() oder \u00e4hnliches holen. In diesem Beispiel wird JavaScript nicht als Funktion, sondern direkt in den Ereignis-Attributen aufgerufen. Noch ein einfaches Beispiel mit den Ereignissen mousedown , mouseup , mouseenter und mouseleave . Noch ein letztes Beispiel, das wir nicht in JSFiddle zeigen, da es daraum geht, die Gr\u00f6\u00dfe des Browsers zu \u00e4ndern (Ereignis resize - die JavaScript-Funktion hei\u00dft auch resize() , aber dieser Name ist frei gew\u00e4hlt): <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body onresize = \"resize()\" > < h2 > Gr\u00f6\u00dfe des Browserfensters \u00e4ndern! </ h2 > < p id = \"demo\" ></ p > < script > function resize () { var w = window . outerWidth ; var h = window . outerHeight ; var txt = \"Fenstergr\u00f6\u00dfe: Breite=\" + w + \", H\u00f6he=\" + h ; document . getElementById ( \"demo\" ). innerHTML = txt ; } </ script > </ body > </ html > Wir haben uns nun einige Beispiele angesehen, wie wir HTML-Elemente \u00e4ndern k\u00f6nnen. Prinzipiell geht es mit den Eigenschaften: node.innerHTML = - Inhalt eines Elements \u00e4ndern node.attribute = - Attribut eines Elements \u00e4ndern node.style. property = - Style/Formatierung \u00e4ndern node.classList.add() - CSS-Klassen zum Element hinzuf\u00fcgen node.classList.remove() - CSS-Klassen vom Element entfernen","title":"HTML-Ereignisse"},{"location":"javascript/#elemente-hinzufugen-und-loschen","text":"Nun wollen wir den DOM insofern manipulieren, als dass wir zun\u00e4chst Objekte hinzuf\u00fcgen. Die wichtigsten Funktionen daf\u00fcr sind: document.createElement('tag') - Element erzeugen document.createTextNode(\"text\") - Textelement erzeugen node.appendChild(childNode) - Element childNode dem Knoten node als direktes (letztes) Kind hinzuf\u00fcgen node.removeChild(childNode) - Kind childNode des Elementes node l\u00f6schen node.replaceChild(newNode, oldNode) - Kind oldNode des Knotens node durch newNode ersetzen node.insertBefore(newNode, oldNode) - Kind newNode des Knotens node vor das Kind oldNode des Knotens node einf\u00fcgen","title":"Elemente hinzuf\u00fcgen und l\u00f6schen"},{"location":"javascript/#create","text":"Wir betrachten wieder ein einfaches Beispiel: Im HTML-Code sehen wir ein <input> -Element und eine Liste <ul> , die bereits 2 Listitems <li> enth\u00e4lt. Dem <input> -Element wurde ein change -Listener hinzugef\u00fcgt. Sobald sich der Wert in dem <input> -Element ge\u00e4ndert hat, wird dieses Ereignis ausgel\u00f6st und die Funktion addItem() aufgerufen. Dieser Funktion wird das <input> -Element als Parameter \u00fcbergeben. In dieser Funktion wird zuerst ein Textknoten erzeugt ( let textNode = document.createTextNode(text); ) Der text ist der Wert value des <input> -Elementes. Au\u00dferdem wird ein <li> -Knoten (Objekt) erzeugt ( let liNode = document.createElement('li'); ). An diesen <li> -Knoten wird der Textknoten angeh\u00e4ngt ( liNode.appendChild(textNode); ). Danach wird an die <ul> -Liste der <li> -Knoten (mit dem Textknoten) angeh\u00e4ngt ( ulNode.appendChild(liNode); ). Das neue List-item erscheint sofort als letztes Kind in der Liste. Im folgenden Beispiel passiert das gleiche, nur wird das neu erzeugte List-Item nicht hinten an die Liste angeh\u00e4ngt, sondern vorne eingef\u00fcgt: Tats\u00e4chlich \u00e4ndert sich daf\u00fcr nur die letzte Anweisung in der Funktion. Aus ulNode.appendChild(liNode); wird ulNode.insertBefore(liNode, ulNode.childNodes[0]); . Mit ulNode.childNodes[0] greifen wir auf das erste Kind des ulNode zu. Das h\u00e4tten wir auch durch ulNode.firstChild haben k\u00f6nnen.","title":"Create"},{"location":"javascript/#clone","text":"Eine weitere M\u00f6glichkeit, ein Element zu erzeugen, ist durch clonen eines anderen Knotens (Elementes). Der Vorteil des Clonens besteht darin, dass ein gesamter Unterbaum eines Elementes mitkopiert werden kann. Die Syntax f\u00fcr das Clonen eines Knotens node ist nod.cloneNode(deep) . Wenn deep true ist, werden auch alle Kindelemente geklont, wenn false , dann nur das Element selbst. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } </ script > </ body > </ html > Im obigen Beispiel verwenden wir Bootstrap und f\u00fcr das <img> -Element einige Bootstrap-Klassen (haupts\u00e4chlich, damit es in der Mitte ist). Wenn wir auf das Bild Doppelklicken ( dblclick ), wird die Funktion cloneFunc() aufgerufen, der wir das img -Objekt \u00fcbergeben. In der Funktion clonen wir das Bild (hier ist es egal, ob deep clone oder nicht, da das img -Element keine Kindknoten hat). Der Clone wird dem div -Element als Kind hinzugef\u00fcgt. Durch jeden Doppelklick auf das Bild wird ein weiterer Clone dem <div> -Element hinzugef\u00fcgt.","title":"Clone"},{"location":"javascript/#addeventlistener","text":"Eigentlich ist die Verwendung der Attribute onEvent nicht optimal, da die Trennung zwischen HTML und JavaScript nicht gro\u00df genug ist. Wir erinnern uns, wir wollen eine Trennung in die Zust\u00e4ndigkeiten: HTML f\u00fcr den Inhalt, CSS f\u00fcr das Layout und JavaScript f\u00fcr das Verhalten. Besser ist es, die Event-Listener ebenfalls durch JavaScript hinzuzuf\u00fcgen und nicht durch HTML-Attribute. Wir erweitern unser obiges Clone-Beispiel zun\u00e4chst wie folgt (hinzugekommener Code hervorgehoben): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } </ script > </ body > </ html > In Zeile 17 melden wir unseren geklonten Knoten an den Event-Listener f\u00fcr das click -Ereignis an. Wird auf das Bild geklickt, dann wird die Funktion removeFunc() aufgerufen. Beachten Sie, dass der erste Parameter der addEventListener() -Funktion das Ereignis click ist (und nicht das HTML-Attribut onClick ) und dass der zweite Parameter die Referenz auf die Funktion removeFunc ist, nicht der Aufruf der Funktion. W\u00fcrden wir dort anstelle von removeFunc removeFunc() schreiben, entspr\u00e4che das dem Aufruf der Funktion und diese w\u00fcrde bei Aufruf der Funktion addEventListener() sofort ausgef\u00fchrt. Beachten Sie au\u00dferdem, dass bei der Funktionsdefinition von removeFunc() das ausgel\u00f6ste Event event als Parameter \u00fcbergeben wird. Dies passiert automatisch (also immer). Wenn wir den Parameter benennen, dann k\u00f6nnen wir auf dieses Ereignis zugreifen. Das machen wir auch, n\u00e4mlich in Zeile 24 , wo wir das target des Events abfragen, also das das Ereignis ausl\u00f6sende Element (unser jeweiliges <img> ). Die console.log() -Aufrufe sind jeweils nur zum Debuggen bzw. Inspizieren. Es gibt zwei JavaScript-Funktionen zum L\u00f6schen eines Elementes: parent.removeChild(child) - das Elternelement parent ruft die Funktion auf und l\u00f6scht das \u00fcbergebene Kind child node.remove() - ein Knoten (Element) ruft f\u00fcr sich selbst die remove() -Funktion auf und l\u00f6scht sich also selbst Wir haben im obigen Abschnitt die erste Variante gew\u00e4hlt, um zu zeigen, wie der Elternknoten ermittelt werden kann. Man h\u00e4tte aber auch auf Zeile 26 verzeichten und in Zeile 28 einfach obj.remove() schreiben k\u00f6nnen.","title":"addEventListener"},{"location":"javascript/#beispiel-vollstandig-mit-javascript-erzeugt","text":"Das soeben gezeigte Beispiel soll nun exemplarisch vollst\u00e4ndig durch JavaScript erzeugt werden. Wir verwenden genau ein Event-Attribut, n\u00e4mlich onload , das wir dem body zuweisen. Das load -Event wird aufgerufen, sobald die Seite vollst\u00e4ndig geladen ist. Ist die (leere) Seite vollst\u00e4ndig geladen, wird die Funktion createAllElements() aufgerufen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < script > function cloneFunc ( event ) { let obj = event . target ; let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } function createAllElements () { let imgNode = document . createElement ( 'img' ); imgNode . src = \"./images/fiw.jpg\" ; imgNode . classList . add ( \"rounded\" , \"mx-auto\" , \"d-block\" ); imgNode . style . width = \"150px\" ; imgNode . alt = \"fiw\" ; imgNode . addEventListener ( \"dblclick\" , cloneFunc ); let divNode = document . createElement ( 'div' ); divNode . id = \"div1\" ; let scriptNode = document . getElementsByTagName ( 'script' )[ 0 ]; document . body . insertBefore ( imgNode , scriptNode ); document . body . insertBefore ( divNode , scriptNode ); } </ script > </ body > </ html > Hervorgehoben sind wieder die Zeilen, in dennen sich etwas ge\u00e4ndert hat. Zeile 10 : Der <body> enth\u00e4lt nun nur noch ein <script> -Element. Ansonsten keine weiteren HTML-Elemente. Zeile 12 : Der Funktion cloneFunc() kann nun nicht mehr das img -Objekt selbst \u00fcbergeben werden (da wir in addEventListener() nur die Referenz auf die Funktion \u00fcbergeben). Deswegen verwenden wir auch hier wieder das automatisch \u00fcbergebene event und ermitteln das target des ausgel\u00f6sten Ereignisses (Zeile 14 ). Zeilen 31-46 : Die Funktion createAllElements() erzeugt zun\u00e4chst ein img -Knoten mit allen erforderlichen Attributen. Au\u00dferdem wird dieser Knoten auch noch an das dblclick -Ereignis angemeldet und die Referenz auf die Funktion cloneFunc als Event-Handler \u00fcbergeben. In Zeile 44 wird dieser img -Knoten dem <body> hinzugef\u00fcgt, und zwar vor dem <script> -Element. Au\u00dferdem wird noch unser <div> mit der id=\"div1\" erzeugt und ebenfalls vor dem <script> -Element (und hinter das <img> -Element) eingef\u00fcgt. Es entsteht die exakt gleiche Webseite wie in dem Beispiel davor (siehe Beispiel aus addEventListener ).","title":"Beispiel vollst\u00e4ndig mit JavaScript erzeugt"},{"location":"javascript/#javascript-sprachelemente","text":"","title":"JavaScript - Sprachelemente"},{"location":"javascript/#var-let-und-const","text":"Mithilfe der Schl\u00fcsselw\u00f6rter var , let und const k\u00f6nnen in JavaScript Variablen deklariert werden. Wenn Sie eine Variable mit var deklarieren, dann ist diese Variable innerhalb der gesamten Funktion, in der Sie die Variable deklarieren, g\u00fcltig. Dagegen hat let nur eine Blockg\u00fcltigkeit , d.h. eine mit let deklarierte Variable ist nur in dem Anweisungsblock g\u00fcltig, in dem sie deklariert wurde. Eine mit let deklarierte Variable verh\u00e4lt sich also wie eine in Java deklarierte Variable. const wird zur Deklaration von Konstanten verwendet. Es ist zu bachten: Falls es sich bei der mit const deklarierten Konstante um eine Referenzvariable handelt (also auf ein Objekt oder Array zeigt), dann kann diese Variable ihre Referenz zwar nicht mehr \u00e4ndern, das jeweilige Objekt, auf das die Variable (konstant) zeigt, kann sich aber schon \u00e4ndern. Globale Variablen, also Variablen, die von allen Funktionen geteilt werden (in allen Funktionen genutzt werden k\u00f6nnen), werden au\u00dferhalb der Funktionen deklariert. Man sollte nur sehr selten globale Variablen einsetzen, da sie in allen anderen Funktionen (auch externen) \u00fcberschrieben werden k\u00f6nnen. Bl\u00f6derweise ist eine Variable auch dann global, wenn sie ohne eines der genannten Schl\u00fcsselw\u00f6rter ( var , let und const ) innerhalb einer Funktion \"deklariert\" wurde. Das geschieht meistens durch eine Wertzuweisung in der Annahme, dass die Variable bereits deklariert wurde. Eine solche unbeabsichtigte Erstellung einer globalen Variable sollte vermieden werden - die absichtliche erst recht. Wenn globale Variable, dann die Deklaration au\u00dferhalb aller Funktionen.","title":"var, let und const"},{"location":"javascript/#objekte","text":"Objekte in JavaScript werden in JavaScript Object Notation beschrieben. Wir werden darauf noch genauer eingehen , zeigen hier aber schonmal ein einfaches Beispiel zur Einf\u00fchrung: let person = { vorname : \"Maria\" , nachname : \"Musterfrau\" }; Es wurde eine person definiert mit 2 Feldern vorname und nachname und diesen Feldern wurden Werte zugewiesen. Der Zugriff auf die Felder erfolgt mittels Punkt-Notation, also person.vorname und person.nachname . Sie k\u00f6nnen die Werte auch einfach \u00fcberschreiben, z.B. person.nachname = \"Schmidt\" . Sie k\u00f6nnen das Objekt auch um weitere Eigenschaften erweitern, z.B. person.alter = 42 . Neben der \u00fcblichen Punktnotation ist auch zu erw\u00e4hnen, dass die Eigenschaften auch Schl\u00fcssel eines assoziativen Arrays sind, d.h. Sie k\u00f6nnen auf die Werte auch wie folgt zugreifen: person [ \"vorname\" ] // Maria person [ \"nachname\" ] // Schmidt person [ \"alter\" ] // 42 Mithilfe von delete k\u00f6nnen Eigenschaften gel\u00f6scht werden, z.B. delete person.alter; . Ab dann ist person.alter undefined . Objekteigenschaften k\u00f6nnen auch Funktionen sein, z.B. person . name = function (){ return this . vorname + \" \" + this . nachname }; Der Aufruf erfolgt dann \u00fcber person.name();","title":"Objekte"},{"location":"javascript/#arrays","text":"Arrays in JavaScript werden fast genauso behandelt wie in Java. Hier ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body > < h2 > JavaScript Arrays </ h2 > < p id = \"demo\" ></ p > < script > let sgs = [ \"FIW\" , \"AI\" , \"IMI\" , \"WI\" ]; let lange = sgs . length ; text = \"<ul>\" ; for ( let i = 0 ; i < sgs . length ; i ++ ) { text += \"<li>\" + sgs [ i ] + \"</li>\" ; } text += \"</ul>\" ; document . getElementById ( \"demo\" ). innerHTML = text ; </ script > </ body > </ html > In Zeile 12 wird das Array sgs (soll Studieng\u00e4nge hei\u00dfen - immer sprechende Namen verwenden ;-) definiert. Es enth\u00e4lt lauter Strings. In JavaScript k\u00f6nnen die Elemente eines Arrays von verschiedenen Typen sein. In Zeile 16 definieren wir die for -Schleife, mit der wir durch das Array laufen (ist genau so numerisch indiziert, wie wir das von Java kennen). Wir greifen \u00fcber die Index-Schreibweise sgs[i] auf alle Elemente des Arrays zu (Zeile 17 ). Das Array kann auch aus Objekten bestehen. Angenommen, das Array sieht so aus: var staedte = [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"images/stockholm.png\" }, { \"jahr\" : 852 , \"stadt\" : \"Madrid\" , \"link\" : \"http://de.wikipedia.org/wiki/Madrid\" , \"bild\" : \"images/madrid.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"images/mainz.png\" } ]; Dann sind die Elemente des Arrays numerisch indiziert.","title":"Arrays"},{"location":"javascript/#javascript-ist-dynamisch-typisiert","text":"Im Gegensatz zu z.B. Java ist JavaScript nicht statisch, sondern dynamisch typisiert. Der Wert einer Variablen bestimmt deren Typ. Beispiel: var number = 16 ; // number var name = \"Johnson\" ; // string var cars = [ \"Saab\" , \"Volvo\" , \"BMW\" ]; // object (Array) var obj = { firstName : \"John\" , lastName : \"Doe\" }; // object var func = new Function (); // function var correct = true ; // boolean var x ; // now x is undefined var x = 5 ; // now x is a Number var x = \"John\" ; // now x is a String typeof kann verwendet werden, ob zu \u00fcberpr\u00fcfen, ob eine Variable \u00fcberhaupt definiert ist und/oder von welchem Typ sie ist. Es liefert folgende Resultate: undefined boolean function number object string symbol Beispiel: < div id = \"myDiv\" ></ div > < script > var x ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // undefined x = \"12\" ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // string x = 12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = 12.12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = true ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // boolean x = function (){ alert ( \"Funktion\" );}; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Function ( \"alert('Funktion')\" ); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Object (); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // object </ script >","title":"JavaScript ist dynamisch typisiert"},{"location":"javascript/#funktionen","text":"Die Definition von Funktionen in JavaScript erfolgt \u00fcber das Schl\u00fcsselwort function . Wir haben oben bereits mehrere Beispiele f\u00fcr Funktionen gezeigt. Hier ein weiteres: < p id = \"demo\" ></ p > < script > function myFunction ( a , b ) { return a * b ; } document . getElementById ( \"demo\" ). innerHTML = myFunction ( 4 , 3 ); </ script > Es wird eine Funktion myFunction() definiert, der 2 Parameter a und b \u00fcbergeben werden. Die Funktion berechnet das Produkt aus a und b und gibt dieses mithilfe von return zur\u00fcck. Der zur\u00fcckgegebene Wert wird als Inhalt des Absatzes <p> mit der id=\"demo\" verwendet. myFunction(4, 3); ist der Aufruf der Funktion. Au\u00dferdem k\u00f6nnen Funktionen als anonyme Funktionen deklariert werden. Es ist m\u00f6glich, dass eine Variable auf eine (anonyme) Funktion zeigt. Diese Variable kann dann wie die Funktion selbst verwendet werden. Beispiel: var x = function ( a , b ) { return a * b }; Die Funktion kann nun \u00fcber z.B. x(4,3); aufgerufen werden. Eine weitere (aber selten verwendete) M\u00f6glichkeit, eine Funktion zu definieren, ist die Verwendung des Function() -Konstruktors. Beispiel: var myFunction = new Function ( \"a\" , \"b\" , \"return a * b\" ); Diese Funktion kann dann (wie oben mit x ) mit myFunction(4,3); aufgerufen werden. Aber, wie gesagt, das ist eher un\u00fcblich, denn es ist \u00e4quivalent zu: var myFunction = function ( a , b ) { return a * b }; mit dem Aufruf myFunction(4,3); . Die Verwendung des Function() -Konstruktors zeigt aber, dass jede Funktion vom Typ function ist. In JavaScript gibt es also einen Typ function . W\u00fcrde man f\u00fcr das Beispiel mit x z.B. typeof(x) aufrufen, ist das Resultat function .","title":"Funktionen"},{"location":"javascript/#variable-anzahl-von-parametern","text":"Die Anzahl der Parameter kann, muss aber nicht in der Funktionsdefinition angegeben werden. Es geht immer (auch wenn eine feste Anzahl von Parametern angegeben wurde): function summe () { var i , sum = 0 ; for ( i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ]; } return sum ; } Diese Funktion kann jetzt mit beliebig vielen Parametern aufgerufen werden: summe ( 1 , 2 , 3 , 4 , 5 , 6 ); summe ( 1 , 2 , 3 );","title":"Variable Anzahl von Parametern"},{"location":"javascript/#arrow-funktionen","text":"Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ;","title":"Arrow-Funktionen"},{"location":"javascript/#callback-funktionen","text":"Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden.","title":"Callback-Funktionen"},{"location":"javascript/#promises","text":"Eine Promise ist das Ergebnis einer asynchronen Operation. Es gibt vier Status einer Promis (uns interessiert in der Regel nur resolved oder rejected ): Status Erkl\u00e4rung pending die Promise wartet noch auf die Beendigung der asynchronen Operation settled die asynchrone Operation wurde beendet resolved die asynchrone Operation wurde erfolgreich beendet rejected die asynchrone Operation ist fehlgeschlagen Um das Prinzip einer Promise zu erl\u00e4utern, schauen wir uns ein Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } Die Funktion getAll() gibt eine Promise zur\u00fcck. Diese wird mit dem Konstruktor erzeugt. Dem Konstruktor wird eine Callback-Funktion \u00fcbergeben. Hier ist diese Funktion die Anfrage an die Datenbank connection.query() . Diese Funktion ist asynchron, d.h. sie wird ausgef\u00fchrt, ohne dass andere Funktionsaufrufe stoppen m\u00fcssen. Man kann auch sagen, dass die Promise die asynchrone Funktion kapselt . Die asynchrone Funktion enth\u00e4lt ebenfalls eine Callback-Funktion. Hier wurden als Parameternamen der Callback-Funktion error und results gew\u00e4hlt. Der erste Parameter wirft einen Fehler, wenn die asynchrone Funktion fehlschl\u00e4gt, der zweite Parameter enth\u00e4lt die Daten bei Erfolg. Mit reject gibt man den Fehler zur\u00fcck (im Fehlerfall) und mit resolve die Daten (im Erfolgsfall). return new Promise() Wir merken uns also: die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Wie kann eine solche Promise nun verwendet werden? Dazu schauen wir uns erneut das Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function listAction ( request , response ) { model . getAll (). then ( movies => response . send ( view ( movies )), error => response . send ( error ), ); } Der entscheidende Punkt ist, dass ein Promise-Objekt eine then -Methode besitzt. Dieser then -Methode k\u00f6nnen wiederum zwei Callback-Funktionen \u00fcbergeben werden. Die erste Funktion wird durch die resolve -Funktion der Promise aufgerufen, die zweite Funktion, falls die Promise die reject -Funktion aufruft. Werden der resolve - und der reject -Funktion Argumente \u00fcbergeben (so wie oben resolve(results) und reject(error) ), dann k\u00f6nnen diese Argumente in der jeweiligen Callback-Funktion ausgewertet werden ( results \u2192 movies bzw. error \u2192 error ). Die then -Funktion selbst gibt \u00fcbrigens wieder ein Promise -Objekt zur\u00fcck. Somit k\u00f6nnen mehrere Promises verkettet werden.","title":"Promises"},{"location":"json/","text":"JavaScript Object Notation (JSON) \u00b6 Eine kurze Einf\u00fchrung zu Objekten in JavaScript haben wir bereits im JavaScript-Kapitel gegeben. Dort haben wir auch gesagt, dass wir auf die Notation solcher Objekte in JavaScript nochmal genauer eingehen wollen. Dies geschieht hier. JavaScript Object Notation (JSON) ist ein Datenaustauschformat, das einerseits einfach f\u00fcr Menschen zu lesen und zu schreiben ist und andererseits gut von Maschinen geparst (analysiert) und erzeugt werden kann. Ein Objekt in JSON beginnt mit einer geschweiften Klammer { und endet mit } . JSON besteht im wesentlichen aus Schl\u00fcssel-Werte-Paaren, die durch Komma getrennt sind. { \"schl\u00fcssel1\" : wert1, \"schl\u00fcssel2\" : wert2, } Die Schl\u00fcssel sind Strings in doppelten Hochkamma ( \"\" ), dann folgt ein Doppelpunkt : und dann folgt der Wert. Werte k\u00f6nnen Strings, Zahlen, Wahrheitswerte, Arrays, Funktionen und Objekte (und null ) sein. Hier ein Beispiel (erweitert aus ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function() { return this.name + \" ist \" + this.alter + \" und hat \" + this.kinder.length + \" Kinder.\" ; }, } Der Wert zum Schl\u00fcssel \"name\" in Zeile 2 ist ein String ( string ). Der Wert zum Schl\u00fcssel \"alter\" in Zeile 3 ist eine Zahl ( number ). Der Wert zum Schl\u00fcssel \"verheiratet\" in Zeile 4 ist ein Wahrheitswert ( boolean ). Der Wert zum Schl\u00fcssel \"kinder\" in Zeilen 6-17 ist Array. Die Elemente in diesem Array sind selbst wieder Objekte in JavaScript Object Notation, bestehend aus jeweils drei Schl\u00fcssel-Werte-Paaren. Das \"kinder\" ist numerisch indiziert, d.h. wir k\u00f6nnen \u00fcber den Index 0 auf das erste Kind ( \"Lukas\" ) und \u00fcber den Index 1 auf das zweite Kind ( \"Lisa\" ) zugreifen Zugriff auf ein JSON \u00b6 Der Zugriff auf die Werte eines JSON erfolgt mittels Punktnotation \u00fcber den Schl\u00fcssel. Wir nehmen obiges Beispiel und speichern es in einer Variablen georg : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let georg = { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function () { return this . name + \" ist \" + this . alter + \" und hat \" + this . kinder . length + \" Kinder.\" ; }, }; Dann k\u00f6nnen wir auf die einzelnen Werte wie folgt zugreifen: georg . name // \"Georg\" georg . alter // 47 let kinder = georg . kinder ; // Array aus 2 Objekten kinder [ 0 ]. name // \"Lukas\" kinder [ 1 ]. name // \"Lisa\" georg . biografie () // \"Georg ist 47 und hat 2 Kinder.\" Man kann \u00fcbrigens auch anstelle der Punktnotation ein JSON wie ein assoziatives Array auffassen und z.B. anstelle von georg.name \u00fcber georg['name'] auf den Wert \"Georg\" zugreifen. Es w\u00e4re auch m\u00f6glich, das \"Kinder\"-Array in ein weiteres JSON umzuwandeln: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // anstelle von: \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], // ginge z.B. auch: \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } }, Dann ist der Zugriff \u00fcber den Index (also z.B. georg.kinder[0] ) nicht mehr m\u00f6glich. Stattdessen aber: georg . kinder . erstesKind . name georg . kinder . zweitesKind . alter Viele Objekte im Array \u00b6 Wenn Sie viele \"gleiche\" Objekte speichern, dann in einem Array. Die folgende Datei zeigt viele Objekte in JSON, die in einem Array abgelegt sind: data/members.json { \"members\" : [ { \"forename\" : \"Catherine\" , \"surname\" : \"Williams\" , \"email\" : \"cwilliamsl@360.cn\" }, { \"forename\" : \"Adam\" , \"surname\" : \"Anderson\" , \"email\" : \"aanderson8@google.fr\" }, { \"forename\" : \"Susan\" , \"surname\" : \"Andrews\" , \"email\" : \"sandrewsn@google.co.jp\" }, { \"forename\" : \"Catherine\" , \"surname\" : \"Andrews\" , \"email\" : \"candrewsp@noaa.gov\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Bradley\" , \"email\" : \"abradley1c@globo.com\" }, { \"forename\" : \"Anne\" , \"surname\" : \"Brooks\" , \"email\" : \"abrooks16@bravesites.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Brown\" , \"email\" : \"rbrownq@nifty.com\" }, { \"forename\" : \"Ryan\" , \"surname\" : \"Burton\" , \"email\" : \"rburton18@foxnews.com\" }, { \"forename\" : \"Roy\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell1@geocities.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell17@eventbrite.com\" }, { \"forename\" : \"Bonnie\" , \"surname\" : \"Coleman\" , \"email\" : \"bcoleman11@fc2.com\" }, { \"forename\" : \"Ernest\" , \"surname\" : \"Coleman\" , \"email\" : \"ecoleman15@businessweek.com\" }, { \"forename\" : \"Richard\" , \"surname\" : \"Cruz\" , \"email\" : \"rcruz7@unc.edu\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Cruz\" , \"email\" : \"scruz10@answers.com\" }, { \"forename\" : \"Rebecca\" , \"surname\" : \"Cunningham\" , \"email\" : \"rcunninghamd@mac.com\" }, { \"forename\" : \"Margaret\" , \"surname\" : \"Evans\" , \"email\" : \"mevansh@pcworld.com\" }, { \"forename\" : \"Jeffrey\" , \"surname\" : \"Ford\" , \"email\" : \"jford14@cnet.com\" }, { \"forename\" : \"Andrea\" , \"surname\" : \"Gardner\" , \"email\" : \"agardnerv@woothemes.com\" }, { \"forename\" : \"Deborah\" , \"surname\" : \"George\" , \"email\" : \"dgeorge6@furl.net\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Gibson\" , \"email\" : \"sgibsony@alexa.com\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Graham\" , \"email\" : \"vgrahamk@aol.com\" }, { \"forename\" : \"Steven\" , \"surname\" : \"Hamilton\" , \"email\" : \"shamiltonu@state.tx.us\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Hawkins\" , \"email\" : \"vhawkinsf@ehow.com\" }, { \"forename\" : \"Edward\" , \"surname\" : \"Hicks\" , \"email\" : \"ehicksc@pcworld.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Johnson\" , \"email\" : \"mjohnsonj@hostgator.com\" }, { \"forename\" : \"Ruth\" , \"surname\" : \"Jordan\" , \"email\" : \"rjordan1a@smugmug.com\" }, { \"forename\" : \"Antonio\" , \"surname\" : \"Kim\" , \"email\" : \"akim4@odnoklassniki.ru\" }, { \"forename\" : \"Jennifer\" , \"surname\" : \"Marshall\" , \"email\" : \"jmarshallt@gnu.org\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Matthews\" , \"email\" : \"ematthews5@independent.co.uk\" }, { \"forename\" : \"Raymond\" , \"surname\" : \"Mcdonald\" , \"email\" : \"rmcdonald2@ihg.com\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Miller\" , \"email\" : \"emillere@creativecommons.org\" }, { \"forename\" : \"Jonathan\" , \"surname\" : \"Morales\" , \"email\" : \"jmoralesa@ovh.net\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Morgan\" , \"email\" : \"mmorganb@cloudflare.com\" }, { \"forename\" : \"Amanda\" , \"surname\" : \"Nelson\" , \"email\" : \"anelson13@indiatimes.com\" }, { \"forename\" : \"Lisa\" , \"surname\" : \"Olson\" , \"email\" : \"lolsonr@telegraph.co.uk\" }, { \"forename\" : \"Alice\" , \"surname\" : \"Ortiz\" , \"email\" : \"aortizw@histats.com\" }, { \"forename\" : \"Peter\" , \"surname\" : \"Phillips\" , \"email\" : \"pphillipss@1688.com\" }, { \"forename\" : \"Matthew\" , \"surname\" : \"Porter\" , \"email\" : \"mporter9@europa.eu\" }, { \"forename\" : \"Tammy\" , \"surname\" : \"Ray\" , \"email\" : \"trayx@weather.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Richardson\" , \"email\" : \"mrichardson1d@ihg.com\" }, { \"forename\" : \"Joan\" , \"surname\" : \"Roberts\" , \"email\" : \"jroberts12@alibaba.com\" }, { \"forename\" : \"Kathleen\" , \"surname\" : \"Rose\" , \"email\" : \"kroseg@pinterest.com\" }, { \"forename\" : \"Steve\" , \"surname\" : \"Sanders\" , \"email\" : \"ssanders1b@wikispaces.com\" }, { \"forename\" : \"Shirley\" , \"surname\" : \"Scott\" , \"email\" : \"sscottm@macromedia.com\" }, { \"forename\" : \"Lillian\" , \"surname\" : \"Stephens\" , \"email\" : \"lstephens19@hugedomains.com\" }, { \"forename\" : \"Nicole\" , \"surname\" : \"Thompson\" , \"email\" : \"nthompson3@admin.ch\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Thompson\" , \"email\" : \"mthompsonz@yelp.com\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Vasquez\" , \"email\" : \"avasquezo@miibeian.gov.cn\" }, { \"forename\" : \"Mildred\" , \"surname\" : \"Watkins\" , \"email\" : \"mwatkins0@miibeian.gov.cn\" }, { \"forename\" : \"Eugene\" , \"surname\" : \"Williams\" , \"email\" : \"ewilliamsi@deliciousdays.com\" } ] } Ein Array ist stets numerisch indiziert, d.h. Sie k\u00f6nnen unter Verwendung des Index die einzelnen Objekte auslesen. Wir hatten das oben bereits f\u00fcr das \"kinder\" -Array gezeigt, geben hier aber noch ein Beispiel an: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" > < title > JSON + Array </ title > </ head > < body onload = \"loadJSON()\" > < main class = \"container m-5\" > < ul id = \"ul1\" class = \"list-group\" > </ ul > </ main > < script > var members_obj ; function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { members_obj = JSON . parse ( this . responseText ); console . log ( members_obj ); createList (); }}; xhttp . open ( \"GET\" , \"./data/members.json\" , true ); xhttp . send (); } function createList () { let members = members_obj . members ; console . log ( members_obj ); console . log ( members_obj . members ); let ul = document . getElementById ( 'ul1' ); for ( let i = 0 ; i < members . length ; i ++ ) { let li = document . createElement ( 'li' ); li . classList . add ( 'list-group-item' ); let a = document . createElement ( 'a' ); a . href = 'mailto:' + members [ i ]. email + '?subject=Webtech&body=Hallo%20FIW!' ; a . innerHTML = '<i class=\"fa fa-envelope\"> ' + 'to: ' + members [ i ]. forename + ' ' + members [ i ]. surname ; li . appendChild ( a ); ul . appendChild ( li ); } } </ script > </ body > </ html > Es entsteht eine Liste aus Hyperlinks, wobei jeder Hyperlink in der Form zusammengesetzt ist: mailto:email-adresse . Es sind sogar noch subject (also Betreff) und body (als Nachrichteninhalt) angeh\u00e4ngt, d.h. die Form ist mailto:email-adresse?subject=Webtech&body=Hallo%20FIW! . Beachten Sie, dass es sich dabei um eine URL handelt und diese deshalb URL encoded sein muss, d.h. dass z.B. Leerzeichen durch %20 ersetzt werden. Die Seite sieht dann so aus: Und wenn man auf einen Link klickt (z.B. Adam Anderson ), \u00f6ffnet sich das Mailprogramm: Ajax \u00b6 Ajax steht f\u00fcr Asynchronous JavaScript and XML . Es wird verwendet, um Daten vom Server zu laden oder an den Server zu senden, ohne die Seite neu zu laden. Ajax ist somit die Basis f\u00fcr eine Single Page Application . Obwohl XML im Namen von Ajax vorkommt, wird haupts\u00e4chlich JSON als Datenaustauschformat f\u00fcr das Senden und Empfangen von Daten zwischen Client und Server verwendet. Der Begriff asynchron beschreibt, dass der Austausch nicht die Webseite blockiert, d.h. dass weitere Nutzerinteraktionen m\u00f6glich sind w\u00e4hrend der Datenaustausch erfolgt. XMLHttpRequest \u00b6 Der Grundbaustein von Ajax ist ein XMLHttpRequest -Objekt. Ein solches Objekt stellt Methoden zur Verf\u00fcgung, um eine Webseite (per JavaScript) aktualisieren zu k\u00f6nnen, ohne sie neu zu laden, Daten vom Server anzufordern nachdem die Seite geladen ist, Daten zu einem Server im Hintergrund zu senden. Angenommen, folgende JSON-Datei liegt auf unserem Server ( DocumentRoot ist mein DocumentRoot-Ordner): DocumentRoot/Webtech20/georg.json { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } } } Client-seitig besteht die Anfrage an einen Webeserver per XMLHttpRequest aus drei Schritten: XMLHttpRequest -Objekt erzeugen Anfrage (Request) an Server senden Antwort (Response) verarbeiten/ausgeben Wir schauen uns das an einem Beispiel an: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Ajax </ title > </ head > < body > < h2 > AJAX wird nachfolgend Daten aus einer JSON-Datei einf\u00fcgen </ h2 > < div id = \"div1\" ></ div > < button type = \"button\" onclick = \"loadJSON();\" > JSON lesen </ button > < script > function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { createFormular ( this ); }}; xhttp . open ( \"GET\" , \"http://localhost/Webtech20/georg.json\" , true ); xhttp . send (); } function createFormular ( json ) { let georg = JSON . parse ( json . responseText ); console . log ( georg ); console . log ( georg . name ); console . log ( georg . kinder . erstesKind . name ); } </ script > </ body > </ html > In Zeile 10 definieren wir uns einen Button, der an den EventListener f\u00fcr das click -Ereignis angemeldet ist. In der Ereignisbehandlung wird die Funktion loadJSON() aufgerufen. In Zeile 13 wird das XMLHttpRequest -Objekt erzeugt. Die Referenz darauf speichern wir in der Variablen xhttp . In Zeile 18 wird die Verbindung zum Webserver hergestellt und der Request konfiguriert. Die open() -Funktion des XMLHttpRequest -Objektes enth\u00e4lt drei Parameter: der erste Parameter beschreibt die http-Methode, mit der angefragt werden soll ( \"GET\" oder \"POST\" ) der zweite Parameter gibt die Zieladresse der angefragten Ressource auf dem Server an der dritte Parameter gibt die Art der Kommunikation an ( true : asynchron, `false: synchron) In Zeile 19 wird diese Anfrage (Request) gesendet In den Zeilen 14-17 wird f\u00fcr die onreadystatechange -Eigenschaft des XMLHttpRequest -Objektes eine Funktion definiert, die immer dann (automatisch) aufgerufen wird, wenn sich der readyState des XMLHttpRequest -Objektes \u00e4ndert. readyState kann folgende Werte annehmen: 0 ( UNSENT ): open() wurde noch nicht aufgerufen 1 ( OPENED ): send() wurde noch nicht aufgerufen 2 ( HEADERS_RECEIVED ): send() wurde aufgerufen und Headers sowie Status sind verf\u00fcgbar 3 ( LOADING ): Download ist im Gange; responseText enth\u00e4lt bereit sunvollst\u00e4ndige Daten 4 ( DONE ): Download-Vorgang abgeschlossen wenn readyState den Wert 4 hat und der http-Status 200 ( OK ) ist (Zeile 15 ), dann ist der Download der angefragten Ressource fertig und die Ressource kann verwendet werden. Dazu wird in Zeile 16 die Funktion createFormular(json) aufgerufen dabei das XMLHttpRequest -Objekt \u00fcbergeben in der Eigenschaft responseText des XMLHttpRequest -Objektes ist das heruntergeladene JSON enthalten. Dies wird in Zeile 23 in der Funktion createFormular(json) ausgelesen die JavaScript-Funktion JSON.parse() erzeugt aus einem JSON-formatierten Text ein entsprechendes Javascript-Objekt. Dies geschieht ebenfalls in Zeile 23 . Die referenz auf dieses JavaScript-Objekt wird in der Variablen georg gespeichert. in den Zeilen 24-26 sind einige Zugriffe auf das Objekt exemplarisch implementiert. Die Ausgabe erfolgt auf die Konsole. Wenn Sie das Beispiel also ausprobieren, dann schauen Sie auf die Konsole in Ihren DeveloperTools. fetch() -API \u00b6 In den letzten Jahren wurde eine sogenannte fetch() -API entwickelt, die leistungsf\u00e4higere und flexiblere Funktionen zur Verf\u00fcgung stellt, als ein XMLHttpRequest -Objekt. Da wir n\u00e4her auf Promises eingehen m\u00fcssten, erw\u00e4hnen wir das Thema hier nur und geben ein Beispiel an, das dem oberen sehr \u00e4hnlich ist: function loadJSONmitFetch () { fetch ( 'http://localhost/Webtech20/georg.json' ) . then ( function ( response ) { if ( response . status !== 200 ) { console . log ( 'Warning! Status Code: ' + response . status ); return ; } // Lese json aus der response aus response . json () . then ( function ( data ) { console . log ( data ); } ); } ) . catch ( function ( err ) { console . log ( 'Fetch Error :-S' , err ); }); }","title":"JSON"},{"location":"json/#javascript-object-notation-json","text":"Eine kurze Einf\u00fchrung zu Objekten in JavaScript haben wir bereits im JavaScript-Kapitel gegeben. Dort haben wir auch gesagt, dass wir auf die Notation solcher Objekte in JavaScript nochmal genauer eingehen wollen. Dies geschieht hier. JavaScript Object Notation (JSON) ist ein Datenaustauschformat, das einerseits einfach f\u00fcr Menschen zu lesen und zu schreiben ist und andererseits gut von Maschinen geparst (analysiert) und erzeugt werden kann. Ein Objekt in JSON beginnt mit einer geschweiften Klammer { und endet mit } . JSON besteht im wesentlichen aus Schl\u00fcssel-Werte-Paaren, die durch Komma getrennt sind. { \"schl\u00fcssel1\" : wert1, \"schl\u00fcssel2\" : wert2, } Die Schl\u00fcssel sind Strings in doppelten Hochkamma ( \"\" ), dann folgt ein Doppelpunkt : und dann folgt der Wert. Werte k\u00f6nnen Strings, Zahlen, Wahrheitswerte, Arrays, Funktionen und Objekte (und null ) sein. Hier ein Beispiel (erweitert aus ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function() { return this.name + \" ist \" + this.alter + \" und hat \" + this.kinder.length + \" Kinder.\" ; }, } Der Wert zum Schl\u00fcssel \"name\" in Zeile 2 ist ein String ( string ). Der Wert zum Schl\u00fcssel \"alter\" in Zeile 3 ist eine Zahl ( number ). Der Wert zum Schl\u00fcssel \"verheiratet\" in Zeile 4 ist ein Wahrheitswert ( boolean ). Der Wert zum Schl\u00fcssel \"kinder\" in Zeilen 6-17 ist Array. Die Elemente in diesem Array sind selbst wieder Objekte in JavaScript Object Notation, bestehend aus jeweils drei Schl\u00fcssel-Werte-Paaren. Das \"kinder\" ist numerisch indiziert, d.h. wir k\u00f6nnen \u00fcber den Index 0 auf das erste Kind ( \"Lukas\" ) und \u00fcber den Index 1 auf das zweite Kind ( \"Lisa\" ) zugreifen","title":"JavaScript Object Notation (JSON)"},{"location":"json/#zugriff-auf-ein-json","text":"Der Zugriff auf die Werte eines JSON erfolgt mittels Punktnotation \u00fcber den Schl\u00fcssel. Wir nehmen obiges Beispiel und speichern es in einer Variablen georg : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let georg = { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function () { return this . name + \" ist \" + this . alter + \" und hat \" + this . kinder . length + \" Kinder.\" ; }, }; Dann k\u00f6nnen wir auf die einzelnen Werte wie folgt zugreifen: georg . name // \"Georg\" georg . alter // 47 let kinder = georg . kinder ; // Array aus 2 Objekten kinder [ 0 ]. name // \"Lukas\" kinder [ 1 ]. name // \"Lisa\" georg . biografie () // \"Georg ist 47 und hat 2 Kinder.\" Man kann \u00fcbrigens auch anstelle der Punktnotation ein JSON wie ein assoziatives Array auffassen und z.B. anstelle von georg.name \u00fcber georg['name'] auf den Wert \"Georg\" zugreifen. Es w\u00e4re auch m\u00f6glich, das \"Kinder\"-Array in ein weiteres JSON umzuwandeln: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // anstelle von: \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], // ginge z.B. auch: \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } }, Dann ist der Zugriff \u00fcber den Index (also z.B. georg.kinder[0] ) nicht mehr m\u00f6glich. Stattdessen aber: georg . kinder . erstesKind . name georg . kinder . zweitesKind . alter","title":"Zugriff auf ein JSON"},{"location":"json/#viele-objekte-im-array","text":"Wenn Sie viele \"gleiche\" Objekte speichern, dann in einem Array. Die folgende Datei zeigt viele Objekte in JSON, die in einem Array abgelegt sind: data/members.json { \"members\" : [ { \"forename\" : \"Catherine\" , \"surname\" : \"Williams\" , \"email\" : \"cwilliamsl@360.cn\" }, { \"forename\" : \"Adam\" , \"surname\" : \"Anderson\" , \"email\" : \"aanderson8@google.fr\" }, { \"forename\" : \"Susan\" , \"surname\" : \"Andrews\" , \"email\" : \"sandrewsn@google.co.jp\" }, { \"forename\" : \"Catherine\" , \"surname\" : \"Andrews\" , \"email\" : \"candrewsp@noaa.gov\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Bradley\" , \"email\" : \"abradley1c@globo.com\" }, { \"forename\" : \"Anne\" , \"surname\" : \"Brooks\" , \"email\" : \"abrooks16@bravesites.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Brown\" , \"email\" : \"rbrownq@nifty.com\" }, { \"forename\" : \"Ryan\" , \"surname\" : \"Burton\" , \"email\" : \"rburton18@foxnews.com\" }, { \"forename\" : \"Roy\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell1@geocities.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell17@eventbrite.com\" }, { \"forename\" : \"Bonnie\" , \"surname\" : \"Coleman\" , \"email\" : \"bcoleman11@fc2.com\" }, { \"forename\" : \"Ernest\" , \"surname\" : \"Coleman\" , \"email\" : \"ecoleman15@businessweek.com\" }, { \"forename\" : \"Richard\" , \"surname\" : \"Cruz\" , \"email\" : \"rcruz7@unc.edu\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Cruz\" , \"email\" : \"scruz10@answers.com\" }, { \"forename\" : \"Rebecca\" , \"surname\" : \"Cunningham\" , \"email\" : \"rcunninghamd@mac.com\" }, { \"forename\" : \"Margaret\" , \"surname\" : \"Evans\" , \"email\" : \"mevansh@pcworld.com\" }, { \"forename\" : \"Jeffrey\" , \"surname\" : \"Ford\" , \"email\" : \"jford14@cnet.com\" }, { \"forename\" : \"Andrea\" , \"surname\" : \"Gardner\" , \"email\" : \"agardnerv@woothemes.com\" }, { \"forename\" : \"Deborah\" , \"surname\" : \"George\" , \"email\" : \"dgeorge6@furl.net\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Gibson\" , \"email\" : \"sgibsony@alexa.com\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Graham\" , \"email\" : \"vgrahamk@aol.com\" }, { \"forename\" : \"Steven\" , \"surname\" : \"Hamilton\" , \"email\" : \"shamiltonu@state.tx.us\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Hawkins\" , \"email\" : \"vhawkinsf@ehow.com\" }, { \"forename\" : \"Edward\" , \"surname\" : \"Hicks\" , \"email\" : \"ehicksc@pcworld.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Johnson\" , \"email\" : \"mjohnsonj@hostgator.com\" }, { \"forename\" : \"Ruth\" , \"surname\" : \"Jordan\" , \"email\" : \"rjordan1a@smugmug.com\" }, { \"forename\" : \"Antonio\" , \"surname\" : \"Kim\" , \"email\" : \"akim4@odnoklassniki.ru\" }, { \"forename\" : \"Jennifer\" , \"surname\" : \"Marshall\" , \"email\" : \"jmarshallt@gnu.org\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Matthews\" , \"email\" : \"ematthews5@independent.co.uk\" }, { \"forename\" : \"Raymond\" , \"surname\" : \"Mcdonald\" , \"email\" : \"rmcdonald2@ihg.com\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Miller\" , \"email\" : \"emillere@creativecommons.org\" }, { \"forename\" : \"Jonathan\" , \"surname\" : \"Morales\" , \"email\" : \"jmoralesa@ovh.net\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Morgan\" , \"email\" : \"mmorganb@cloudflare.com\" }, { \"forename\" : \"Amanda\" , \"surname\" : \"Nelson\" , \"email\" : \"anelson13@indiatimes.com\" }, { \"forename\" : \"Lisa\" , \"surname\" : \"Olson\" , \"email\" : \"lolsonr@telegraph.co.uk\" }, { \"forename\" : \"Alice\" , \"surname\" : \"Ortiz\" , \"email\" : \"aortizw@histats.com\" }, { \"forename\" : \"Peter\" , \"surname\" : \"Phillips\" , \"email\" : \"pphillipss@1688.com\" }, { \"forename\" : \"Matthew\" , \"surname\" : \"Porter\" , \"email\" : \"mporter9@europa.eu\" }, { \"forename\" : \"Tammy\" , \"surname\" : \"Ray\" , \"email\" : \"trayx@weather.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Richardson\" , \"email\" : \"mrichardson1d@ihg.com\" }, { \"forename\" : \"Joan\" , \"surname\" : \"Roberts\" , \"email\" : \"jroberts12@alibaba.com\" }, { \"forename\" : \"Kathleen\" , \"surname\" : \"Rose\" , \"email\" : \"kroseg@pinterest.com\" }, { \"forename\" : \"Steve\" , \"surname\" : \"Sanders\" , \"email\" : \"ssanders1b@wikispaces.com\" }, { \"forename\" : \"Shirley\" , \"surname\" : \"Scott\" , \"email\" : \"sscottm@macromedia.com\" }, { \"forename\" : \"Lillian\" , \"surname\" : \"Stephens\" , \"email\" : \"lstephens19@hugedomains.com\" }, { \"forename\" : \"Nicole\" , \"surname\" : \"Thompson\" , \"email\" : \"nthompson3@admin.ch\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Thompson\" , \"email\" : \"mthompsonz@yelp.com\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Vasquez\" , \"email\" : \"avasquezo@miibeian.gov.cn\" }, { \"forename\" : \"Mildred\" , \"surname\" : \"Watkins\" , \"email\" : \"mwatkins0@miibeian.gov.cn\" }, { \"forename\" : \"Eugene\" , \"surname\" : \"Williams\" , \"email\" : \"ewilliamsi@deliciousdays.com\" } ] } Ein Array ist stets numerisch indiziert, d.h. Sie k\u00f6nnen unter Verwendung des Index die einzelnen Objekte auslesen. Wir hatten das oben bereits f\u00fcr das \"kinder\" -Array gezeigt, geben hier aber noch ein Beispiel an: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" > < title > JSON + Array </ title > </ head > < body onload = \"loadJSON()\" > < main class = \"container m-5\" > < ul id = \"ul1\" class = \"list-group\" > </ ul > </ main > < script > var members_obj ; function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { members_obj = JSON . parse ( this . responseText ); console . log ( members_obj ); createList (); }}; xhttp . open ( \"GET\" , \"./data/members.json\" , true ); xhttp . send (); } function createList () { let members = members_obj . members ; console . log ( members_obj ); console . log ( members_obj . members ); let ul = document . getElementById ( 'ul1' ); for ( let i = 0 ; i < members . length ; i ++ ) { let li = document . createElement ( 'li' ); li . classList . add ( 'list-group-item' ); let a = document . createElement ( 'a' ); a . href = 'mailto:' + members [ i ]. email + '?subject=Webtech&body=Hallo%20FIW!' ; a . innerHTML = '<i class=\"fa fa-envelope\"> ' + 'to: ' + members [ i ]. forename + ' ' + members [ i ]. surname ; li . appendChild ( a ); ul . appendChild ( li ); } } </ script > </ body > </ html > Es entsteht eine Liste aus Hyperlinks, wobei jeder Hyperlink in der Form zusammengesetzt ist: mailto:email-adresse . Es sind sogar noch subject (also Betreff) und body (als Nachrichteninhalt) angeh\u00e4ngt, d.h. die Form ist mailto:email-adresse?subject=Webtech&body=Hallo%20FIW! . Beachten Sie, dass es sich dabei um eine URL handelt und diese deshalb URL encoded sein muss, d.h. dass z.B. Leerzeichen durch %20 ersetzt werden. Die Seite sieht dann so aus: Und wenn man auf einen Link klickt (z.B. Adam Anderson ), \u00f6ffnet sich das Mailprogramm:","title":"Viele Objekte im Array"},{"location":"json/#ajax","text":"Ajax steht f\u00fcr Asynchronous JavaScript and XML . Es wird verwendet, um Daten vom Server zu laden oder an den Server zu senden, ohne die Seite neu zu laden. Ajax ist somit die Basis f\u00fcr eine Single Page Application . Obwohl XML im Namen von Ajax vorkommt, wird haupts\u00e4chlich JSON als Datenaustauschformat f\u00fcr das Senden und Empfangen von Daten zwischen Client und Server verwendet. Der Begriff asynchron beschreibt, dass der Austausch nicht die Webseite blockiert, d.h. dass weitere Nutzerinteraktionen m\u00f6glich sind w\u00e4hrend der Datenaustausch erfolgt.","title":"Ajax"},{"location":"json/#xmlhttprequest","text":"Der Grundbaustein von Ajax ist ein XMLHttpRequest -Objekt. Ein solches Objekt stellt Methoden zur Verf\u00fcgung, um eine Webseite (per JavaScript) aktualisieren zu k\u00f6nnen, ohne sie neu zu laden, Daten vom Server anzufordern nachdem die Seite geladen ist, Daten zu einem Server im Hintergrund zu senden. Angenommen, folgende JSON-Datei liegt auf unserem Server ( DocumentRoot ist mein DocumentRoot-Ordner): DocumentRoot/Webtech20/georg.json { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } } } Client-seitig besteht die Anfrage an einen Webeserver per XMLHttpRequest aus drei Schritten: XMLHttpRequest -Objekt erzeugen Anfrage (Request) an Server senden Antwort (Response) verarbeiten/ausgeben Wir schauen uns das an einem Beispiel an: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Ajax </ title > </ head > < body > < h2 > AJAX wird nachfolgend Daten aus einer JSON-Datei einf\u00fcgen </ h2 > < div id = \"div1\" ></ div > < button type = \"button\" onclick = \"loadJSON();\" > JSON lesen </ button > < script > function loadJSON () { let xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState === 4 && this . status === 200 ) { createFormular ( this ); }}; xhttp . open ( \"GET\" , \"http://localhost/Webtech20/georg.json\" , true ); xhttp . send (); } function createFormular ( json ) { let georg = JSON . parse ( json . responseText ); console . log ( georg ); console . log ( georg . name ); console . log ( georg . kinder . erstesKind . name ); } </ script > </ body > </ html > In Zeile 10 definieren wir uns einen Button, der an den EventListener f\u00fcr das click -Ereignis angemeldet ist. In der Ereignisbehandlung wird die Funktion loadJSON() aufgerufen. In Zeile 13 wird das XMLHttpRequest -Objekt erzeugt. Die Referenz darauf speichern wir in der Variablen xhttp . In Zeile 18 wird die Verbindung zum Webserver hergestellt und der Request konfiguriert. Die open() -Funktion des XMLHttpRequest -Objektes enth\u00e4lt drei Parameter: der erste Parameter beschreibt die http-Methode, mit der angefragt werden soll ( \"GET\" oder \"POST\" ) der zweite Parameter gibt die Zieladresse der angefragten Ressource auf dem Server an der dritte Parameter gibt die Art der Kommunikation an ( true : asynchron, `false: synchron) In Zeile 19 wird diese Anfrage (Request) gesendet In den Zeilen 14-17 wird f\u00fcr die onreadystatechange -Eigenschaft des XMLHttpRequest -Objektes eine Funktion definiert, die immer dann (automatisch) aufgerufen wird, wenn sich der readyState des XMLHttpRequest -Objektes \u00e4ndert. readyState kann folgende Werte annehmen: 0 ( UNSENT ): open() wurde noch nicht aufgerufen 1 ( OPENED ): send() wurde noch nicht aufgerufen 2 ( HEADERS_RECEIVED ): send() wurde aufgerufen und Headers sowie Status sind verf\u00fcgbar 3 ( LOADING ): Download ist im Gange; responseText enth\u00e4lt bereit sunvollst\u00e4ndige Daten 4 ( DONE ): Download-Vorgang abgeschlossen wenn readyState den Wert 4 hat und der http-Status 200 ( OK ) ist (Zeile 15 ), dann ist der Download der angefragten Ressource fertig und die Ressource kann verwendet werden. Dazu wird in Zeile 16 die Funktion createFormular(json) aufgerufen dabei das XMLHttpRequest -Objekt \u00fcbergeben in der Eigenschaft responseText des XMLHttpRequest -Objektes ist das heruntergeladene JSON enthalten. Dies wird in Zeile 23 in der Funktion createFormular(json) ausgelesen die JavaScript-Funktion JSON.parse() erzeugt aus einem JSON-formatierten Text ein entsprechendes Javascript-Objekt. Dies geschieht ebenfalls in Zeile 23 . Die referenz auf dieses JavaScript-Objekt wird in der Variablen georg gespeichert. in den Zeilen 24-26 sind einige Zugriffe auf das Objekt exemplarisch implementiert. Die Ausgabe erfolgt auf die Konsole. Wenn Sie das Beispiel also ausprobieren, dann schauen Sie auf die Konsole in Ihren DeveloperTools.","title":"XMLHttpRequest"},{"location":"json/#fetch-api","text":"In den letzten Jahren wurde eine sogenannte fetch() -API entwickelt, die leistungsf\u00e4higere und flexiblere Funktionen zur Verf\u00fcgung stellt, als ein XMLHttpRequest -Objekt. Da wir n\u00e4her auf Promises eingehen m\u00fcssten, erw\u00e4hnen wir das Thema hier nur und geben ein Beispiel an, das dem oberen sehr \u00e4hnlich ist: function loadJSONmitFetch () { fetch ( 'http://localhost/Webtech20/georg.json' ) . then ( function ( response ) { if ( response . status !== 200 ) { console . log ( 'Warning! Status Code: ' + response . status ); return ; } // Lese json aus der response aus response . json () . then ( function ( data ) { console . log ( data ); } ); } ) . catch ( function ( err ) { console . log ( 'Fetch Error :-S' , err ); }); }","title":"fetch()-API"},{"location":"node/","text":"Node.js \u00b6 Viele der folgenden Beispiele sind dem Buch Sebastian Springer: \"Node.js. Das umfassende Handbuch\" 3., aktualisierte und erweiterte Auflage 2018, Rheinwerk Computing, ISBN 978-3-8362-6255-2 Link entnommen (und nur unwesentlich ge\u00e4ndert). Installation \u00b6 Installationsanweisungen f\u00fcr Ihr Betriebssystem finden Sie auf der Node.js-Webseite https://nodejs.org/ . Nach der Installation k\u00f6nnen Sie \u00fcberpr\u00fcfen, ob node erfolgreich installiert wurde. Geben Sie dazu im Terminal node -v ein. Es sollte die Versionsnummer erscheinen, z.B. v13.3.0 . Da es sich bei JavaScript um eine Skriptsprache handelt, kann jede Anweisung durch den Interpreter interpretiert und ausgef\u00fchrt werden. Deshalb l\u00e4sst sich Node.js auch als im interaktiven Modus auf der Kommandozeile testen. Geben Sie dazu im Terminal node ein. Es erscheint etwas in der Art Welcome to Node.js v13.3.0. Type \".help\" for more information. > Node.js befindet sich dann im Read-Eval-Print-Loop (REPL) . Die im Terminal eingegebenen Kommandos werden gelesen ( read ), evaluiert ( eval ), ausgegeben ( print ) und auf das n\u00e4chste Kommando gewartet ( loop ). Geben Sie im Terminal console.log(\"Hello FIW!\"); ein. Es erscheint Hello FIW! undefined Sie verlassen REPL durch Eingabe von .exit . Success Somit ist Node.js installiert. Der erste eigene Webserver \u00b6 Wir verwenden Node.js, um einen Webserver zu implementieren. Insbesondere wird dieser Webserver Anfragen ( requests ) unserer Webanwendung (des Clients) empfangen und verarbeiten. Die Verarbeitung wird meistens ein Zugriff auf eine Datenbank sein. Als Antwort ( response ) wird der Webserver die angefragten Daten an unsere Anwendung zur\u00fccksenden. Wir werden nun unseren ersten einfachen Webserver mithilfe von Node.js implementieren. Erstellen Sie sich in Ihrem workspace ein Verzeichnis backend und darin eine Datei server.js (das kann nat\u00fcrlich alles auch anders hei\u00dfen). \u00d6ffnen Sie die Datei mit Ihrer IDE und geben Sie folgendes ein: server.js 1 2 3 4 5 6 7 8 9 10 11 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/plain; charset=utf-8' }); response . write ( 'Hello ' ); response . end ( 'FIW!\\n' ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Wechseln Sie im Terminal in Ihr backend -Verzeichnis. Darin befindet sich die server.js . Geben Sie ein: node server.js Sie erhalten die Ausgabe Server is listening to http://localhost:8080 . Port bereits belegt Sollten Sie den Fehler Error: listen EADDRINUSE:::8080 erhalten, so ist der Port 8080 bei Ihnen bereits durch eine andere Anwendung belegt. Dann w\u00e4hlen Sie einen anderen Port, z.B. 8081 . Success Ihr Webserver l\u00e4uft nun! Dies k\u00f6nnen wir auf verschiedene Arten testen: Geben Sie http://localhost:8080 in Ihren Browser ein. Es erscheint Hello FIW! im Browser. Nutzen Sie curl und geben Sie im Terminal curl http://localhost:8080 ein. Es erscheint Hello FIW! im Terminal. Nutzen Sie 'Postman' und geben Sie in das Eingabefeld neben GET die URL http://localhost:8080 ein und klicken auf Send . Es erscheint Hello FIW! im unteren Teil des Fensters (Reiter Body ). Der Webserver l\u00e4uft nun so lange, bis wir ihn beenden. Wir betrachten das obige Listing im Detail. In Zeilennummer 1 wird das http -Modul von Node.js geladen und der Variablen http zugewiesen. Das Laden von Modulen erfolgt in Node.js mithilfe der Funktion require() . In Zeilennummer 3 wird ein Webserver mithilfe des http -Moduls erzeugt ( createServer() ). Das http -Modul bietet auch die M\u00f6glichkeit, einen Client zu erzeugen - aber das machen wir nicht mit Node.js sondern mit Angular. In Zeile 9 geben wir an, dass der Webserver nun permanent am Port 8080 auf Anfragen lauschen soll. Als 2. Parameter der listen() -Funktion h\u00e4tte auch ein HOST angegeben werden k\u00f6nnen, also die IP-Adresse des Webservers. Wird keine IP-Adresse angegeben, so wie hier, ist es in unserem Fall localhost . Dann folgt eine Callback -Funktion , die einen String auf die Konsole ausgibt, sobald die Verbindung steht. In den Zeilen 4 bis 6 ist die Antwort ( response ) des Webservers auf eine Anfrage ( request ) des Clients definiert. Die Funktion, die diese Antwort erstellt, ist eine Callback-Funktion der createServer -Funktion (in Zeile 3). Diese Callback-Funktion besitzt die beiden Parameter request und response . In diesem ersten Beispiel wird nur eine Response definiert. Diese besteht aus einem HTTP-Header ( writeHead() ) und einem HTTP-Body ( write() + end() ). Die Funktion writeHead() , die den HTTP-Header erzeugt, besitzt 2 Parameter. Der erste Parameter ist der HTTP-Status-Code . Der Status-Code 200 besagt, dass die Anfrage ( request ) vom Server empfangen wurde und die Antwort ( response ) in dieser Nachricht enthalten ist. Der eigentliche HTTP-Header wird mit dem zweiten Parameter \u00fcbertragen. In diesem Fall \u00fcbermittelt der Server dem Client die Informationen, dass es sich bei der Antwort um reinen Text handelt ( content-type:text-plain ) und dass der HTTP-Body unter Verwendung des Zeichensatzes UTF-8 ( charset=utf-8 ) kodiert ist. Der HTTP-Body wird mit der write() -Funktion \u00fcbertragen und mit der end() -Funktion abgeschlossen. In diesem Fall besteht der Body aus der Zeichenkette Hello FIW! . Eine Erweiterung der Antwort \u00b6 Im obigen Beispiel bestand die Antwort aus reinem Text. Wir erweitern die Antwort nun und senden vom Webserver an den Client als Body eine vollst\u00e4ndige HTML-Seite. server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello FIW!</h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Achten Sie darauf, dass der content-type nun text/html ist, nicht mehr text/plain (Zeile 4). Sollte Ihr Server aus dem vorherigen Beispiel noch laufen, so m\u00fcssen Sie ihn zun\u00e4chst beenden. Geben Sie im Termina zum Beenden des Prozesses node server.js einfach Strg+C ( Ctrl+C ) und sarten Sie den Server unter Eingabe von node server.js erneut. Rufen Sie im Browser http://localhost:8080/ auf. Es erscheint Sie k\u00f6nnen ja auch mal den content-type erneut auf text/plain setzen und den Server erneut starten (1. Ctrl+C und 2. node server.js ), um zu sehen, welche Bedeutung die Angabe des content-type hat. Template-String \u00b6 Im obigen Beispiel ist der String body in Backtick-Zeichen ` eingeschlossen. Das nennt man Template-String und erm\u00f6glicht mithilfe von ${} Ausdr\u00fccke bzw. Variablen auszuwerten. Im Folgenden ist eine solche Verwendung einer Variable gezeigt. Template-String 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const name = 'FIW!' ; const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello ${ name } </h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); In Zeile 6 wird eine Variable name definiert, der der String FIW! zugewiesen wird. In Zeile 14 wird mithilfe von ${ name } der Wert der Variable name in das HTML eingebunden, so dass der Inhalt der \u00dcberschrift <h1> zu Hello FIW! ausgewertet wird. URLs auswerten \u00b6 Eine URL kann um Schl\u00fcssel-Werte-Paare ( Parameter ) erweitert werden, um Daten mit der URL an den Webserver zu senden (siehe HTML \u2192 URLs ). Ein Schl\u00fcssel-Werte-Paar wird immer durch ein = verbunden: key = value Das erste Schl\u00fcssel-Werte-Paar wird hinter ein ? an die URL geh\u00e4ngt. Jedes weitere Paar wird mit einem & angebunden: http://www.example.org/?key1 = value1 & key2 = value2 & key3 = value3 Wir werden jetzt diese Parameter auswerten. Dazu laden wir einerseits ein weiteres Modul, n\u00e4mlich das url -Modul und wir werten die Anfrage ( request ) dahingehend aus, dass wir die Parameter der URL auswerten. server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const http = require ( 'http' ); const url = require ( 'url' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const parsedUrl = url . parse ( request . url , true ); const params = parsedUrl . query ; const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello ${ params . name } in ${ params . ort } </h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Nach dem restart des Webservers (1. Ctrl+C und 2. node server.js ) und der Eingabe folgender URL: http://localhost:8080/?name=FIW&ort=Berlin wird im Browser Folgendes angezeigt: Chrome Developer Tools \u00b6 Die Chrome Developer Tools k\u00f6nnen auch zum Debuggen von Node.js-Anwendungen verwendet werden. Rufen Sie daf\u00fcr Ihre Node.js-Anwendung im Terminal mit dem --inspect -Flag auf: node --inspect server.js Im Terminal erscheint eine Ausgabe in der Form: Debugger listening on ws://127.0.0.1:9229/dc995a6a-61eb-4143-af7e-ac8e4599dcd7 For help, see: https://nodejs.org/en/docs/inspector Server is listening to http://localhost:8080 Im Chrome-Browser k\u00f6nnen Sie nun einerseits wie gewohnt die URL http://localhost:8080/?name=FIW&ort=Berlin eingeben, aber das Debuggen kann unter Eingabe der URL chrome://inspect/ erfolgen. Es erscheint folgende Seite im Browser: F\u00fcr weitere Informationen zum Debuggen siehe z.B. https://nodejs.org/en/docs/guides/debugging-getting-started/ . Success Wir haben mithilfe von Node.js einen ersten eigenen Webserver erstellt. Wir haben uns mit dem Konzept von Request und Response vertraut gemacht und eine eigene Response erstellt. Wir haben Argumente aus der URL ausgelesen und somit dynamisch unsere Response angepasst. Wir wollen nun zun\u00e4chst ein Framework kennenlernen, das uns manche Arbeiten erleichtert: Express. Express \u00b6 Express ist ein Node.js-Framework, das einerseits recht einfach gehalten wurde, andererseits aber alle wesentlichen Funktionen f\u00fcr eine Web-Anwendung bereith\u00e4lt. So m\u00fcssen wir uns beispielsweise bei der Verwendung von Express nicht mehr selbst um das Parsen der URL k\u00fcmmern. Wir werden im Folgenden ein kleines Projekt zu Verwaltung von Filmen erstellen. Dies geschieht mithilfe von npm . npm ist der Node package manager . Bisher enth\u00e4lt unser Ordner backend nur die Datei server.js . Das ist jedoch insofern noch kein wirkliches Node.js-Projekt, da es noch nicht vom Paketmanager, also npm verwaltet wird. Um dies zu tun wechseln wir in den Ordner backend und initialisieren dann unser Node.js-Projekt: im Ordner backend npm init Sie werden nun einige Sachen gefragt und k\u00f6nnen eigentlich immer jeweils mit Enter best\u00e4tigen. Es erfolgt also ungef\u00e4hr ein solcher Dialog im Terminal: % npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) backend version: ( 1 .0.0 ) description: Node.js-Backend entry point: ( server.js ) test command: git repository: keywords: author: license: ( ISC ) About to write to /Users/jornfreiheit/workspace/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js-Backend\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"start\" : \"node server.js\" } , \"author\" : \"\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Das wesentliche Ergebnis der Initialisierung ist die Erstellung der package.json -Datei. Darin k\u00f6nnen wir Paketabh\u00e4ngigkeiten definieren. Au\u00dferdem ist in dem Ordner backend ein Unterordner node_modules entstanden, der die Node.js-Module enth\u00e4lt, die wir ben\u00f6tigen. Als erstes installieren wir Express: npm install express Nun bauen wir uns eine kleine index.js -Datei, die unsere erste Express-Anwendung darstellt. 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const app = express (); app . get ( '/' , ( req , res ) => { res . send ( 'My first express application' ); }); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); In Zeile 1 wird das Express-Paket eingebunden. In Zeile 2 wird eine Express-App mit Basiskonfiguration erzeugt (hier ein app -Objekt). Die get() -Funktion des app -Objektes erzeugt eine Route, \u00fcber die man sich mit dem Browser mit der App verbinden kann (Zeilen 4 - 6 ). Als Response ( res ) wird einfach eine Zeichenkette gesendet ( send ). In den Zeilen 8 - 10 wird die App an den Port 8080 gebunden. Hier erfolgt intern die Erstellung eines Node.js-Servers mit http -Modul. Wenn Sie nun node index.js innerhalb des backend -Ordners aufrufen, wird der Node.js-Server erstellt und Sie k\u00f6nnen im Browser unter der URL localhost:8080 darauf zugreifen. Es erscheint: Im obigen Beispiel erkennt man in Zeile 4 zwei Parameter der Routing-Callback-Funktion innerhalb der app.get() -Methode: das Request -Objekt req und das Response -Objekt res . Beide Objekte geh\u00f6ren zu den elementaren Elementen einer Applikation. Request \u00b6 Die Eigenschaften des Request -Objektes req sind in https://expressjs.com/de/api.html#req erl\u00e4utert. Hier folgt eine kurze unvollst\u00e4ndige Auflistung: Eigenschaft Bedeutung method HTTP-Methode, mit der die Anfrage gesendet wurde (z.B. GET oder POST) originalUrl enth\u00e4lt die Anfrage-URL params enth\u00e4lt die variablen Anteile der Anfrage-URL protocol enth\u00e4lt das Protokoll der Anfrage (z.B. http oder https) query ist ein Objekt, das alle Parameter der Anfrage-URL enth\u00e4lt Response \u00b6 Die Eigenschaften des Response -Objektes res sind in https://expressjs.com/de/api.html#res erl\u00e4utert. Hier folgt eine kurze unvollst\u00e4ndige Auflistung: Methode Bedeutung get(field) gibt den Response-Header von field zur\u00fcck (z.B. get('Content-Type') ) set(field[,value]) setzt den Wert des angegebenen Header-Feldes json([body]) sendet eine JSON-Response ( [body] ist das JSON-Objekt) cookie(name,value[,options]) setzt einen Cookie-Wert name=value redirect([status,]path) Weiterleitung der Anfrage nach path status(code) setzt den Status der Antwort auf code send([body]) sendet die HTTP-Antwort end([data][,encoding]) beendet den Antwortprozess Router \u00b6 Wie man der API-Dokumentation von Express entnehmen kann, sind die Grundelemente einer Express-Anwendung die express() -Funktion , die die Express-Anwendung erstellt, die Eigenschaften und Methoden , die dieser Anwendung zur Verf\u00fcgung stehen, das Request -Objekt , das Response -Objekt sowie der Router . Mit Letzterem besch\u00e4ftigen wir uns jetzt. Unser Projekt soll folgende Struktur aufweisen: backend +---- movie | +---- model.js | +---- view.js | +---- controller.js | +---- movierouter.js +---- node_modules +---- index.js +---- package.json backend , movie und node_modules sind jeweils Ordner. node_modules wurde automatisch erzeugt (durch npm init und enth\u00e4lt alle eingebundenen Node.js-Pakete). Wir erstellen zun\u00e4chst die Datei movie/movierouter.js 1 und \"specken\" die index.js etwas ab (die get() -Funktion wird gel\u00f6scht). movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); const data = [ /* siehe Reiter \"const data\" */ ]; router . get ( '/' , ( req , res ) => { res . send ( data ); }); module . exports = router ; index.js 1 2 3 4 5 6 7 const express = require ( 'express' ); const app = express (); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ]; Beachten Sie, dass in den obigen Listings aus Gr\u00fcnden der \u00dcbersichtlichkeit in der movie/movierouter.js das JSON-Objekt herausgel\u00f6scht und im Reiter \"const data\" zur Verf\u00fcgung gestellt wurde (muss dann hineinkopiert werden). In der movie/movierouter.js wird das Router -Objekt, das in Zeile 2 erzeugt wird, in Zeile 10 exportiert. Im Folgenden wird gezeigt, wie der Router nun in unsere Anwendung eingebunden wird. Dies passiert in der index.js . Die hinzugef\u00fcgten Zeilen sind markiert. index.js 1 2 3 4 5 6 7 8 9 10 11 12 const express = require ( 'express' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); Beim Laden des Moduls wird die .js -Endung nicht mit angegeben. Das hei\u00dft, der Router wird aus der movie/movierouter.js -Datei mittels require('./movie/movierouter') geladen (siehe Zeile 2 ). W\u00e4re der Router sogar in einer Datei movie/index.js , m\u00fcsste dieser Name nicht angegeben werden, es w\u00fcrde also gen\u00fcgen, den Router \u00fcber den Pfad /movie zu laden (entspricht also /movie/index ). Die use() -Methode in Zeile 8 gibt an, dass der movieRouter (aus movie/index.js ) f\u00fcr das Routing des Pfades url /movie zust\u00e4ndig ist. Die get() -Methode aus Zeile 6 sorgt daf\u00fcr, dass der Aufruf url / (also z.B. localhost:8080 ) nach url /movie (also z.B. localhost:8080/movie ) weitergeleitet wird. Rufen Sie nun im backend -Ordner node index.js auf und geben Sie im Browser localhost:8080 ein. Beobachten Sie, dass auf die URL localhost:8080/movie weitergeleitet wird. Es erscheint im Browser (entweder parsed oder raw - Abh\u00e4ngig von Browser und Browser-Plugins): Model-View-Controller \u00b6 Bis jetzt steckt alles im Router ( /movie/movierouter.js ). Wir werden im ersten Schritt die Daten (die eigentlich zum Model geh\u00f6ren) und eine Aktion ( listAction ) im Controller ( movie/controller.js ) definieren. movie/controller.js 1 2 3 4 5 6 7 8 9 const data = [ /* siehe Reiter \"const data\" */ ]; function listAction ( request , response ) { response . send ( data ); } module . exports = { listAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { listAction } = require ( './controller' ); router . get ( '/' , listAction ); module . exports = router ; const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ]; Controller \u00b6 Der Controller verwaltet perspektivisch die View und das Model. Beides haben wir jetzt noch nicht. Zun\u00e4chst wird im Controller eine Aktion listAction definiert, die alle Daten in einer Response ( response.send(data) ) sendet 2 . Diese Aktion wird mittels exports anderen Modulen zur Verf\u00fcgung gestellt. Der Router ( movierouter.js ) wurde entsprechend angepasst. Einerseits haben wir die Daten aus dem Router entfernt, andererseits enth\u00e4lt die get() -Methode nun nicht mehr die direkte Implementierung (die ja in den Controller ausgelagert wurde), sondern ruft die Methode listAction des Controllers auf. Dazu muss sie eingebunden werden. Dies w\u00fcrde normalerweise wie folgt geschehen: const controller = require ( './controller' ); const listAction = controller . listAction ; Da ein solches Konstrukt h\u00e4ufig vorkommt, wurde ein sogenanntes destructuring eingef\u00fchrt. Obiger Code wird mithilfe von destructuring durch const { listAction } = require ( './controller' ); ersetzt und verzichtet somit auf die Hilfsvariable controller . Die Eigenschaft, die im Controller listAction hei\u00dft (und importiert wird), wird direkt geladen. Model \u00b6 Das Model ( movie/model.js ) verwaltet die Daten. Dazu werden wir zun\u00e4chst die Daten aus dem Controller in das Model verschieben. Au\u00dferdem stellt das Model eine Funktion ( getAll() ) zum Auslesen aller Daten zur Verf\u00fcgung: movie/model.js 1 2 3 4 5 6 7 const data = [ /* siehe Reiter \"const data\" */ ]; module . exports = { getAll () { return data ; }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 const model = require ( './model' ); function listAction ( request , response ) { response . send ( model . getAll ()); } module . exports = { listAction , }; const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ]; Die Funktion getAll() im Model ( movie/model.js ) wird jetzt direkt dort implementiert, wo sie auch exportiert wird. Die Implementierung h\u00e4tte man auch auf eine Variable legen k\u00f6nnen (wie listAction beim Controller) und dann exportieren. Der Controller ( movie/controller.js ) liest das Model ein (Zeile 1 ) und verwendet die getAll() -Funktion, um die Daten zu senden (Zeile 4 ). View \u00b6 Die View ist f\u00fcr die Darstellung verantwortlich. Sp\u00e4ter wird diese von uns in Angular umgesetzt. Hier wird es nur zur Verdeutlichung gezeigt. Wir verwenden JavaScript-Template-Strings (sozusagen eine Mischung aus JavaScript und HTML). Wer m\u00f6chte, kann diesen Abschnitt auch \u00fcberspringen, da wir sp\u00e4ter unsere Oberfl\u00e4che viel aufwendiger mit Angular gestalten. movie/view.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 module . exports = function render ( movies ) { return ` <!DOCTYPE html> <html lang=\"de\"> <head> <meta charset=\"UTF-8\"> <title>Movie-list</title> </head> <body> <table> <thead> <tr> <th>Id</th> <th>Title</th> </tr> </thead> <tbody> ${ movies . map ( movie => `<tr><td> ${ movie . id } </td> <td> ${ movie . title } </td></tr>` ). join ( '' ) } </tbody> </table> </body> </html> ` }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 const model = require ( './model' ); const view = require ( './view' ); function listAction ( request , response ) { const movies = model . getAll (); const body = view ( movies ); response . send ( body ); } module . exports = { listAction , }; In der View ( movie/view.js ) wird also eine HTML-Tabelle ( <table> ) erzeugt. Der Funktion render werden die anzuzeigenden Daten als JSON-Array \u00fcbergeben. Die JavaScript-Funktion map() durchl\u00e4uft jeden einzelnen Eintrag des Arrays und speichert ihn jeweils in die Variable movie . Jeder movie wird in einer Tabllenzeile ( <tr> ) dargestellt und besteht aus einer id und einem title (siehe const data im Model). Auf diese Elemente wird zugegriffen und in einzelnen Dateneintr\u00e4gen der Tabelle ( <td> ) dargestellt. Die JavaScript-Funktion join() verbindet diese Struktur zu einem String (Konkatenation mit '' ), so dass der Template-String tats\u00e4chlich ein String ist. Im Controller ( movie/controller.js ) wird die View eingebunden (Zeile 2 ) und dieser View die Movie-Daten \u00fcbergeben, so dass body dann den durch movie.render() erzeugten String enth\u00e4lt (die HTML-Seite). Dieser wird als Response gesendet. Nach einem Neustart der Anwendung ( node index.js im Ordner backend ) erscheint im Browser ( localhost:8080 ) folgende Seite: Success Wir haben mit Express das bekannteste Node.js-Framework verwendet, um die Verarbeitung von Daten im Rahmen des Model-View-Controller-Konzeptes umzusetzen. Im obigen Beispiel haben wir die Daten (die Filme) direkt im JSON-Format im Model gespeichert. Das ist nat\u00fcrlich nicht flexibel. Wir werden die Daten nun in eine Datenbank auslagern. Anbindung von Datenbanken \u00b6 Wir wollen Node.js haupts\u00e4chlich daf\u00fcr verwenden, im Backend mit einer Datenbank zu kommunizieren. Wir wollen dies hier exemplarisch mit MySQL (siehe Werkzeuge \u2192 MySQL ) erl\u00e4utern. Die Verwendung von z.B. PostgreSQL ist \u00e4quivelent - Sie ben\u00f6tigen nur einen anderen Datenbanktreiber. Wir werden zun\u00e4chst das Node.js-Paket, das den mysql -Treiber enth\u00e4lt, installieren: npm install mysql Danach ist in der package.json die Abh\u00e4ngigkeit vom mysql -Paket hinterlegt (siehe \"dependencies\" ): package.json { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js-Backend for MySQL\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"start\" : \"node server.js\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"mysql\" : \"^2.18.1\" } } Eine Movie-Datenbank \u00b6 Wir werden die Anbindung von Datenbanken exemplarisch an der Movie -Datenbank zeigen, die wir bereits im obigen Express -Abschnitt verwendet haben. Dazu erstellen wir uns eine Datenbank namens movie-db und bef\u00fcllen diese mit einigen Filmen (Tabelle Movie ). Sie k\u00f6nnen diese Datenbak auf verschiedenen Wegen erstellen. Am einfachsten ist es, wenn Sie phpMyadmin verwenden. Dort k\u00f6nnen Sie folgende SQL-Anfrage im Reiter SQL eingeben (Sie k\u00f6nnen auch im Terminal SQL -Anfragen eingeben nachdem Sie sich dort per mysql -u root -p mit dem MySQL-Server verbunden haben): CREATE DATABASE ` movie - db ` ; USE ` movie - db ` ; CREATE TABLE ` Movies ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` title ` varchar ( 255 ) DEFAULT NULL , ` year ` int ( 11 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; INSERT INTO ` Movies ` ( ` title ` , ` year ` ) VALUES ( 'Die Verurteilten' , '1994' ), ( 'Der Pate' , '1972' ), ( 'Der Pate 2' , '1974' ), ( 'The Dark Knight' , '2008' ), ( 'Die zw\u00f6lf Geschworenen' , '1957' ), ( 'Schindlers Liste' , '1993' ), ( 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , '2003' ), ( 'Pulp Fiction' , '1994' ), ( 'Zwei glorreiche Halunken' , '1966' ), ( 'Fight Club' , '1999' ), ( 'Der Herr der Ringe: Die Gef\u00e4hrten' , '2001' ), ( 'Forrest Gump' , '1994' ), ( 'Inception' , '2010' ), ( 'Das Imperium schl\u00e4gt zur\u00fcck' , '1980' ), ( 'Der Herr der Ringe: Die zwei T\u00fcrme' , '2002' ), ( 'Matrix' , '1999' ), ( 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , '1990' ), ( 'Einer flog \u00fcber das Kuckucksnest' , '1975' ), ( 'Joker' , '2019' ), ( 'Die sieben Samurai' , '1954' ); Wir verwenden das Projekt, das wir bereits im obigen Express -Abschnitt verwendet haben, also die Dateien aus backend : backend +---- movie | +---- model.js | +---- view.js | +---- controller.js | +---- movierouter.js +---- node_modules +---- index.js +---- package.json Zun\u00e4chst \u00e4ndern wir die movie/model.js . Darin werden nun nicht mehr die Daten gehalten, sondern die Verbindung zur Datenbank aufgebaut. Au\u00dferdem sehen wir 4 Funktionen zur Datenverwaltung vor, wovon wir eine ( getAll() ) gleich implementieren 3 : movie/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAll , }; movie/controller.js const model = require ( './model' ); const view = require ( './view' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( view ( movies )); }, error => response . send ( error ), ); } module . exports = { listAction , }; Im Model ( /movie/model.js ) wird zun\u00e4chst die Verbindung zur Datenbank aufgebaut (Zeilen 2-7 und connection.connect() ). Die getAll() -Funktion stellt mithilfe von connection.query() eine Anfrage an die Datenbank (erster Parameter der connection.query() -Funktion). In unserem Beispiel ist die Anfrage die SQL-Query SELECT * FROM Movies . Die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Promises werden in JavaScript\u2192Promises erl\u00e4utert. Im Controller ( /movie/controller.js ) wird das Promise -Objekt in der then -Funktion ausgewertet. Wird in der Promise die resolve -Methode aufgerufen, werden die results \u00fcbergeben, also das Ergebnis der Datenbankanfrage. Diese Werte werden in der ersten Callback-Funktion der then -Methode dem Parameter movies \u00fcbergeben. Soll nur das JSON gesendet werden, wird die view nicht ben\u00f6tigt (statt response.send(view(movies)); gen\u00fcgt dann response.send(movies); ). Hier kapselt die View die Daten noch in einen HTML-Template-String. Im Falle eines Fehlers ruft die Promise die reject -Funktion auf und \u00fcbergibt den Parameter error . Diese Funktion ruft dann in der then -Funktion die zweite Callback-Funktion f\u00fcr die Fehlerauswertung auf. Success Wir haben jetzt eine MySQL-datenbank angebunden und die Anbindung anhand einer getAll() -Funktion, die alle in der Datenbank gespeicherten Filme zur\u00fcckgibt, gezeigt. Wir haben somit einen lesenden Zugriff auf alle Datenbankeintr\u00e4ge realisiert. Im folgenden werden wir auch weitere Zugriffe (create, update, delete) umsetzen. Allerdings haben wir bisher auch eine View mithilfe von Node.js erstellt und verwendet. Die Idee im folgenden ist, dass unser Backend nicht mehr f\u00fcr die Darstellung zust\u00e4ndig ist, sondern die Ergebnisse der Datenbankabfragen im JSON-Format zur\u00fcckgibt. Unser mit Angular erstelltes Frontend soll f\u00fcr die Darstellung zust\u00e4ndig sein. Wir stellen unser Backend vollst\u00e4ndig auf das REST-Konzept um. Unser Backend als reiner REST-Server \u00b6 Representional State Transfer (REST) ist ein Architekturkonzept und wird in vielen Webanwendungen verwendet. REST beschreibt die Schnittstelle zwischen Frontend und Backend und ist dabei sehr stark an HTTP angelehnt: jede Ressource wird \u00fcber eine eindeutige URL aufgerufen (z.B. alle Filme \u00fcber localhost:8080/movies , den Film mit der id=3 \u00fcber localhost:8080/movie/3 ) es wird definiert, mit welcher HTTP-Anfrage auf die Ressource zugegriffen wird (z.B. get zum Lesen, post zum Anlegen, put zum \u00c4ndern von Ressourcen) jede Anfrage ist zustandslos, d.h. eine Anfrage muss alle notwendigen Informationen beinhalten und fr\u00fchere Anfragen (und deren Responses) werden nicht gespeichert Wir werden unsere View im Backend von nun an also nicht mehr ben\u00f6tigen. Unser Projekt sieht derzeit so aus: index.js const express = require ( 'express' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); movie/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAll , }; movie/controller.js const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( movies ); }, error => response . send ( error ), ); } module . exports = { listAction , }; movie/movierouter.js const express = require ( 'express' ); const router = express . Router (); const { listAction } = require ( './controller' ); router . get ( '/' , listAction ); module . exports = router ; Geben wir also die die URL localhost:8080 an, dann passiert folgendes: die Route wird weitergeleitet an localhost:8080/movie (siehe in index.js die Anweisung app.get('/', (req, res) => res.redirect('/movie')); ) dadurch wird der movie/movierouter.js aufgerufen und dieser ruft die Funktion listAction auf listAction ruft die Promise auf, die in der Funktion model.getAll() definiert wird in getAll() erfolgt eine Anfrage an die Datenbank wird diese Anfrage erfolgreich ausgef\u00fchrt, ruft die Promise die resolve -Funktion auf und \u00fcbergibt alle Resultate der Anfrage in listAction werden diese Resultate als Resonse gesendet Wir rufen Postman zum Testen dieser Anfrage auf und geben localhost:8080 in das URL-Feld ein und senden die Anfrage mittels GET -Methode ab. Es erscheint: Das gleiche Ergebnis bekommen wir, wenn wir als URL localhost:8080/movie eingeben (darauf wird ja eh umgeleitet). Wir k\u00f6nnen die Ausgabe auch mithilfe von curl testen: % curl http://localhost:8080/movie [{ \"id\" :1, \"title\" : \"Die Verurteilten\" , \"year\" :1994 } , { \"id\" :2, \"title\" : \"Der Pate\" , \"year\" :1972 } , { \"id\" :3, \"title\" : \"Der Pate 2\" , \"year\" :1974 } , { \"id\" :4, \"title\" : \"The Dark Knight\" , \"year\" :2008 } , { \"id\" :5, \"title\" : \"Die zw\u00f6lf Geschworenen\" , \"year\" :1957 } , { \"id\" :6, \"title\" : \"Schindlers Liste\" , \"year\" :1993 } , { \"id\" :7, \"title\" : \"Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs\" , \"year\" :2003 } , { \"id\" :8, \"title\" : \"Pulp Fiction\" , \"year\" :1994 } , { \"id\" :9, \"title\" : \"Zwei glorreiche Halunken\" , \"year\" :1966 } , { \"id\" :10, \"title\" : \"Fight Club\" , \"year\" :1999 } , { \"id\" :11, \"title\" : \"Der Herr der Ringe: Die Gef\u00e4hrten\" , \"year\" :2001 } , { \"id\" :12, \"title\" : \"Forrest Gump\" , \"year\" :1994 } , { \"id\" :13, \"title\" : \"Inception\" , \"year\" :2010 } , { \"id\" :14, \"title\" : \"Das Imperium schl\u00e4gt zur\u00fcck\" , \"year\" :1980 } , { \"id\" :15, \"title\" : \"Der Herr der Ringe: Die zwei T\u00fcrme\" , \"year\" :2002 } , { \"id\" :16, \"title\" : \"Matrix\" , \"year\" :1999 } , { \"id\" :17, \"title\" : \"GoodFellas \u2013 Drei Jahrzehnte in der Mafia\" , \"year\" :1990 } , { \"id\" :18, \"title\" : \"Einer flog \u00fcber das Kuckucksnest\" , \"year\" :1975 } , { \"id\" :19, \"title\" : \"Joker\" , \"year\" :2019 } , { \"id\" :20, \"title\" : \"Die sieben Samurai\" , \"year\" :1954 }] Wir erweitern unsere Schnittstelle zun\u00e4chst um die Ansicht eines einzelnen Films. Wir wollen nun mit der URL http://localhost:8080/movie/3 den Film angezeigt bekommen, der die id 3 hat. Wir wollen also die URLs um die Angabe einer id erweitern und f\u00fcr diesen Endpunkt den entsprechenden Film zur\u00fcckgesendet bekommen. Dazu erweitern wir (untem im Listing jeweils gelb markiert) die movie/model.js um eine Funktion getOne(id) ; das Model stellt nach au\u00dfen die Funktion get(id) zur Verf\u00fcgung, die als Response den Film sendet, der die entsprechende id hat, die movie/controller.js um eine Funktion detailAction() , die den Parameter id aus der URL ausliest und die Funktion model.get(id) aufruft, den movie/movierouter.js um eine weitere Route, n\u00e4mlich router.get('/:id', detailAction); , so dass eine id an die URL geh\u00e4ngt werden kann und f\u00fcr diesen Fall die detailAction aufgerufen wird movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } function getOne ( id ) { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies WHERE id=?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( movies ); }, error => response . send ( error ), ); } function detailAction ( request , response ) { model . get ( request . params . id ). then ( movie => response . send ( movie ), error => response . send ( error ), ); } module . exports = { listAction , detailAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); module . exports = router ; Content-Type und Fehlerbehandlung \u00b6 Zwar senden wir bereits die Resultate der Requests als JSON zur\u00fcck, jedoch ist der content-type unserer Response noch content-type:text/html , da wir die Response mithilfe der send() -Funktion senden ( response.send() ). Wir \u00e4ndern dies in response.json() . Dadurch teilen wir dem Client mit, dass der gesendetete content-type ein JSON ist ( content-type:application/json ). F\u00fcr eine erfolgreiche Bearbeitung eines Requests wird mit der Response der HTTP-Statuscode 200 gesendet. F\u00fcr den Fehlerfall wollen wir nun daf\u00fcr sorgen, dass der HTTP-Statuscode 500 - Internal Server Error \u00fcbertragen wird. Dies erreichen wir im Fehlerfall mit error => response.status(500).json(error) . Unser Controller sieht nun also so aus: movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . json ( movies ); }, error => response . status ( 500 ). json ( error ), ); } function detailAction ( request , response ) { model . get ( request . params . id ). then ( movie => response . json ( movie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , }; POST - einen neuen Datensatz anlegen \u00b6 Um einen neuen Datensatz anzulegen, m\u00fcssen wir zwei Dinge beachten: die HTTP-Anfrage ist POST (anstelle von GET , das wir zum Lesen verwenden) der Request \u00fcbergibt im Body den neuen Datensatz (als JSON) \u2192 dazu ben\u00f6tigen wir das Paket body-parser von Node.js und nutzen davon die json() -Funktion zum Einlesen des neuen Datensatzes im JSON-Format Wir passen zun\u00e4chst die index.js entsprechend an: index.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const express = require ( 'express' ); const bodyParser = require ( 'body-parser' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . use ( bodyParser . json ()); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); Um nun einen neuen Datensatz in der Datenbank anzulegen, erweitern wir unser Projekt wie folgt: in movie/model.js wird eine insert() -Funktion definiert, welche durch eine save() -Funktion aufgerufen wird ( save() wird nach au\u00dfen zur Verf\u00fcgung gestellt 4 ), in movie/controller.js wird eine createAction() definiert, die den neuen Datensatz aus dem request,body ausliest und die model.save() aufruft, in movie/movierouter.js wird der neue Endpunkt router.post('/', createAction); festgelegt movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { return new Promise (( resolve , reject ) => { const query = 'INSERT INTO Movies (title, year) VALUES (?, ?)' ; connection . query ( query , [ movie . title , movie . year ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { const movie = { id : request . body . id , title : request . body . title , year : request . body . year , }; model . save ( movie ). then ( newMovie => response . status ( 201 ). json ( newMovie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , createAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); module . exports = router ; Die Funktionen im Model haben alle den gleichen Aufbau. Es wird eine Promise erzeugt und mithilfe von connection.query() eine Anfrage an die Datenbank gestellt. Im Erfolgsfall wird die resolve() -Funktion der Promise aufgerufen, im Fehlerfall die reject() -Funktion. Im Controller wird der request verarbeitet und eine response erzeugt. Im Router werden die Endpunkte und die dazugeh\u00f6rigen HTTP-Methoden (z.B. get oder post ) definiert. Um die createAction -Funktion zu testen, rufen wir Postman auf und tragen in die URL http://localhost:8080/movie/ ein. Wichtig: es muss nun POST ausgew\u00e4hlt werden. Mit dem Request \u00fcbergeben wir im Body nun ein JSON, das einen neuen Film enth\u00e4lt, d.h. das JSON muss die Eigensc haften title und year enthalten (nicht id , denn diese wird automatisch durch das Datenbanksystem erzeugt). Die Anfrage sieht in Postman wie folgt aus: Es kann auch mit curl getestet werden: curl -X POST -H \"Content-Type: application/json\" -d '{\"title\": \"Noch ein Test\", \"year\": \"2019\"}' http://localhost:8080/movie { \"fieldCount\" :0, \"affectedRows\" :1, \"insertId\" :23, \"serverStatus\" :2, \"warningCount\" :0, \"message\" : \"\" , \"protocol41\" :true, \"changedRows\" :0 } PUT - einen Datensatz \u00e4ndern \u00b6 Das \u00c4ndern eines Datensatzes erfolgt in \u00e4hnlicher Weise wie das Anlegen eines Datensatzes. Es wird im Body der Anfrage das neue JSON gesendet und der Content-Type der Anfrage ist application/json (im Header gesetzt). Zum \u00c4ndern eines Datensatzes wird die HTTP-Methode put verwendet. Um nun einen Datensatz in der Datenbank zu \u00e4ndern, erweitern wir unser Projekt wie folgt: in movie/model.js wird eine update() -Funktion definiert, welche durch die save() -Funktion aufgerufen wird ( save() wird nach au\u00dfen zur Verf\u00fcgung gestellt), in movie/controller.js wird eine updateAction() definiert, die genauso aussieht wie die createAction() , au\u00dfer dass die id aus der URL ausgelesen wird und nicht aus dem Request-Body in movie/movierouter.js wird der neue Endpunkt router.put('/', updateActionAction); festgelegt movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { /* bleibt so */ } function update ( movie ) { return new Promise (( resolve , reject ) => { const query = 'UPDATE Movies SET title = ?, year = ? WHERE id = ?' ; connection . query ( query , [ movie . title , movie . year , movie . id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); else return update ( movie ); }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { /* bleibt so */ } function updateAction ( request , response ) { const movie = { id : request . params . id , title : request . body . title , year : request . body . year , }; model . save ( movie ). then ( movie => response . status ( 201 ). json ( movie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , createAction , updateAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction , updateAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); router . put ( '/:id' , updateAction ); module . exports = router ; Um die Update-Funktion in Postman auszuprobieren, geben Sie als URL z.B. http://localhost:8080/movie/3 ein (um den Film mit der id=3 zu \u00e4ndern) und w\u00e4hlen als HTTP-Methode PUT . Im Request-Body geben Sie dann z.B. { \"title\" : \"Der Pate 3\" , \"year\" : \"1990\" } ein. Sie erhalten: Nat\u00fcrlich k\u00f6nnen Sie zum Testen auch curl verwenden. Die Anfrage ist \u00e4hnlich zur POST -Anfrage, nur mit curl -X PUT . DELETE - einen Datensatz \u00e4ndern \u00b6 Um einen Datensatz zu l\u00f6schen, w\u00e4hlen wir die HTTP-Methode DELETE . Alles andere bleibt wie gehabt. Wir pr\u00e4sentieren gleich die L\u00f6sung: movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { /* bleibt so */ } function update ( movie ) { /* bleibt so */ } function remove ( id ) { return new Promise (( resolve , reject ) => { const query = 'DELETE FROM Movies WHERE id = ?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); else return update ( movie ); }, delete ( id ) { return remove ( id )}, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { /* bleibt so */ } function updateAction ( request , response ) { /* bleibt so */ } function deleteAction ( request , response ) { const id = parseInt ( request . params . id , 10 ); model . delete ( id ) . then ( () => response . status ( 204 ). send (), error => response . status ( 500 ). json ( error ) ); } module . exports = { listAction , detailAction , createAction , updateAction , deleteAction }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 11 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction , updateAction , deleteAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); router . put ( '/:id' , updateAction ); router . delete ( '/:id' , deleteAction ); module . exports = router ; Success Wir haben nun eine vollst\u00e4ndige REST-Schnittstelle des Backends implementiert. Es k\u00f6nnen alle Datens\u00e4tze oder ein Datensatz gelesen ( read mithilfe von get ), ein Datensatz erzeugt ( create mithilfe von post ), ein Datensatz aktualisiert ( update mithilfe von put ) und ein Datensatz gel\u00f6scht ( delete mithilfe von delete ) werden. JSON Web Tokens zur Authentifizierung \u00b6 Unsere Backend-Schnittstelle ist bis jetzt offen f\u00fcr jeden, d.h. jeder, der die Endpunkte kennt, kann die Ressourcen abfragen und somit Daten auslesen, l\u00f6schen, \u00e4ndern usw. Das kann nat\u00fcrlich nicht richtig sein, insbesondere wenn mit sensiblen Daten gearbeitet wird. Wir k\u00f6nnen im Backend auch nicht ein Anmeldeformular vorsehen, da das Backend nur Services anbietet. Au\u00dferdem ist die Kommunikation mit der REST-Schnittstelle zustandslos, d.h. es kann gar nicht gespeichert werden, ob eine Nutzerin bereits angemeldet ist oder nicht. Eine L\u00f6sung f\u00fcr diese Probleme sind JSON Web Tokens (JWT) . Ein JWT ist eine codierte Zeichenkette, die einen Header enth\u00e4lt, einen Payload und eine Signatur. Hier ein Screenshot der jwt.io-Webseite mit einem Beispiel daf\u00fcr: Datenbank und Model \u00b6 Wir erzeugen zun\u00e4chst eine Tabelle in unserer Datenbank, um Nutzername und zugeh\u00f6riges Passwort zu speichern. Erzeugen eines JWT \u00b6 F\u00fcr die Erzeugung eines JWT verwenden wir das Nodes-Paket jsonwebtoken . Dieses installieren wir im Ordner backend mit dem Befehl npm install jsonwebtoken Wir erstellen uns eine Route, \u00fcber die die Benutzer ihre Anmeldedaten an das Backend schicken k\u00f6nnen Die Bezeichnung movierouter.js f\u00fcr diese Datei ist hier noch verwirrend, da sie zun\u00e4chst auch die Daten enthalten wird. Wir werden nach und nach die Funktionen so gestalten und auslagern, dass die Datei nur noch den Router enth\u00e4lt und f\u00fcr alles andere ein Model, eine View und ein Controller entstehen werden. \u21a9 Beachten Sie auch hier wieder, dass aus Gr\u00fcnden der \u00dcbersichtlichkeit die Daten in den Reiter const data ausgelagert wurden. Die m\u00fcssen Sie hineinkopieren. \u21a9 Achten Sie darauf, Ihr korrektes Passwort einzutragen. \u21a9 Wir werden die save() -Funktion sp\u00e4ter noch erweitern. Beim Anlegen eines neuen Datensatzes werden zwar der Titel und das Entstehungsjahr des Films mitgesendet, nicht jedoch die id . Die id wird durch das Datenbanksystems vergeben. F\u00fcr den Fall, dass der save() -Funktion auch die id des Films mitgegeben wird, gehen wir davon aus, dass der Film in der Datenbank aktualisiert ( update() ) wird, sich also ein Eintrag ge\u00e4ndert hat. \u21a9","title":"Node.js"},{"location":"node/#nodejs","text":"Viele der folgenden Beispiele sind dem Buch Sebastian Springer: \"Node.js. Das umfassende Handbuch\" 3., aktualisierte und erweiterte Auflage 2018, Rheinwerk Computing, ISBN 978-3-8362-6255-2 Link entnommen (und nur unwesentlich ge\u00e4ndert).","title":"Node.js"},{"location":"node/#installation","text":"Installationsanweisungen f\u00fcr Ihr Betriebssystem finden Sie auf der Node.js-Webseite https://nodejs.org/ . Nach der Installation k\u00f6nnen Sie \u00fcberpr\u00fcfen, ob node erfolgreich installiert wurde. Geben Sie dazu im Terminal node -v ein. Es sollte die Versionsnummer erscheinen, z.B. v13.3.0 . Da es sich bei JavaScript um eine Skriptsprache handelt, kann jede Anweisung durch den Interpreter interpretiert und ausgef\u00fchrt werden. Deshalb l\u00e4sst sich Node.js auch als im interaktiven Modus auf der Kommandozeile testen. Geben Sie dazu im Terminal node ein. Es erscheint etwas in der Art Welcome to Node.js v13.3.0. Type \".help\" for more information. > Node.js befindet sich dann im Read-Eval-Print-Loop (REPL) . Die im Terminal eingegebenen Kommandos werden gelesen ( read ), evaluiert ( eval ), ausgegeben ( print ) und auf das n\u00e4chste Kommando gewartet ( loop ). Geben Sie im Terminal console.log(\"Hello FIW!\"); ein. Es erscheint Hello FIW! undefined Sie verlassen REPL durch Eingabe von .exit . Success Somit ist Node.js installiert.","title":"Installation"},{"location":"node/#der-erste-eigene-webserver","text":"Wir verwenden Node.js, um einen Webserver zu implementieren. Insbesondere wird dieser Webserver Anfragen ( requests ) unserer Webanwendung (des Clients) empfangen und verarbeiten. Die Verarbeitung wird meistens ein Zugriff auf eine Datenbank sein. Als Antwort ( response ) wird der Webserver die angefragten Daten an unsere Anwendung zur\u00fccksenden. Wir werden nun unseren ersten einfachen Webserver mithilfe von Node.js implementieren. Erstellen Sie sich in Ihrem workspace ein Verzeichnis backend und darin eine Datei server.js (das kann nat\u00fcrlich alles auch anders hei\u00dfen). \u00d6ffnen Sie die Datei mit Ihrer IDE und geben Sie folgendes ein: server.js 1 2 3 4 5 6 7 8 9 10 11 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/plain; charset=utf-8' }); response . write ( 'Hello ' ); response . end ( 'FIW!\\n' ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Wechseln Sie im Terminal in Ihr backend -Verzeichnis. Darin befindet sich die server.js . Geben Sie ein: node server.js Sie erhalten die Ausgabe Server is listening to http://localhost:8080 . Port bereits belegt Sollten Sie den Fehler Error: listen EADDRINUSE:::8080 erhalten, so ist der Port 8080 bei Ihnen bereits durch eine andere Anwendung belegt. Dann w\u00e4hlen Sie einen anderen Port, z.B. 8081 . Success Ihr Webserver l\u00e4uft nun! Dies k\u00f6nnen wir auf verschiedene Arten testen: Geben Sie http://localhost:8080 in Ihren Browser ein. Es erscheint Hello FIW! im Browser. Nutzen Sie curl und geben Sie im Terminal curl http://localhost:8080 ein. Es erscheint Hello FIW! im Terminal. Nutzen Sie 'Postman' und geben Sie in das Eingabefeld neben GET die URL http://localhost:8080 ein und klicken auf Send . Es erscheint Hello FIW! im unteren Teil des Fensters (Reiter Body ). Der Webserver l\u00e4uft nun so lange, bis wir ihn beenden. Wir betrachten das obige Listing im Detail. In Zeilennummer 1 wird das http -Modul von Node.js geladen und der Variablen http zugewiesen. Das Laden von Modulen erfolgt in Node.js mithilfe der Funktion require() . In Zeilennummer 3 wird ein Webserver mithilfe des http -Moduls erzeugt ( createServer() ). Das http -Modul bietet auch die M\u00f6glichkeit, einen Client zu erzeugen - aber das machen wir nicht mit Node.js sondern mit Angular. In Zeile 9 geben wir an, dass der Webserver nun permanent am Port 8080 auf Anfragen lauschen soll. Als 2. Parameter der listen() -Funktion h\u00e4tte auch ein HOST angegeben werden k\u00f6nnen, also die IP-Adresse des Webservers. Wird keine IP-Adresse angegeben, so wie hier, ist es in unserem Fall localhost . Dann folgt eine Callback -Funktion , die einen String auf die Konsole ausgibt, sobald die Verbindung steht. In den Zeilen 4 bis 6 ist die Antwort ( response ) des Webservers auf eine Anfrage ( request ) des Clients definiert. Die Funktion, die diese Antwort erstellt, ist eine Callback-Funktion der createServer -Funktion (in Zeile 3). Diese Callback-Funktion besitzt die beiden Parameter request und response . In diesem ersten Beispiel wird nur eine Response definiert. Diese besteht aus einem HTTP-Header ( writeHead() ) und einem HTTP-Body ( write() + end() ). Die Funktion writeHead() , die den HTTP-Header erzeugt, besitzt 2 Parameter. Der erste Parameter ist der HTTP-Status-Code . Der Status-Code 200 besagt, dass die Anfrage ( request ) vom Server empfangen wurde und die Antwort ( response ) in dieser Nachricht enthalten ist. Der eigentliche HTTP-Header wird mit dem zweiten Parameter \u00fcbertragen. In diesem Fall \u00fcbermittelt der Server dem Client die Informationen, dass es sich bei der Antwort um reinen Text handelt ( content-type:text-plain ) und dass der HTTP-Body unter Verwendung des Zeichensatzes UTF-8 ( charset=utf-8 ) kodiert ist. Der HTTP-Body wird mit der write() -Funktion \u00fcbertragen und mit der end() -Funktion abgeschlossen. In diesem Fall besteht der Body aus der Zeichenkette Hello FIW! .","title":"Der erste eigene Webserver"},{"location":"node/#eine-erweiterung-der-antwort","text":"Im obigen Beispiel bestand die Antwort aus reinem Text. Wir erweitern die Antwort nun und senden vom Webserver an den Client als Body eine vollst\u00e4ndige HTML-Seite. server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello FIW!</h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Achten Sie darauf, dass der content-type nun text/html ist, nicht mehr text/plain (Zeile 4). Sollte Ihr Server aus dem vorherigen Beispiel noch laufen, so m\u00fcssen Sie ihn zun\u00e4chst beenden. Geben Sie im Termina zum Beenden des Prozesses node server.js einfach Strg+C ( Ctrl+C ) und sarten Sie den Server unter Eingabe von node server.js erneut. Rufen Sie im Browser http://localhost:8080/ auf. Es erscheint Sie k\u00f6nnen ja auch mal den content-type erneut auf text/plain setzen und den Server erneut starten (1. Ctrl+C und 2. node server.js ), um zu sehen, welche Bedeutung die Angabe des content-type hat.","title":"Eine Erweiterung der Antwort"},{"location":"node/#template-string","text":"Im obigen Beispiel ist der String body in Backtick-Zeichen ` eingeschlossen. Das nennt man Template-String und erm\u00f6glicht mithilfe von ${} Ausdr\u00fccke bzw. Variablen auszuwerten. Im Folgenden ist eine solche Verwendung einer Variable gezeigt. Template-String 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const http = require ( 'http' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const name = 'FIW!' ; const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello ${ name } </h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); In Zeile 6 wird eine Variable name definiert, der der String FIW! zugewiesen wird. In Zeile 14 wird mithilfe von ${ name } der Wert der Variable name in das HTML eingebunden, so dass der Inhalt der \u00dcberschrift <h1> zu Hello FIW! ausgewertet wird.","title":"Template-String"},{"location":"node/#urls-auswerten","text":"Eine URL kann um Schl\u00fcssel-Werte-Paare ( Parameter ) erweitert werden, um Daten mit der URL an den Webserver zu senden (siehe HTML \u2192 URLs ). Ein Schl\u00fcssel-Werte-Paar wird immer durch ein = verbunden: key = value Das erste Schl\u00fcssel-Werte-Paar wird hinter ein ? an die URL geh\u00e4ngt. Jedes weitere Paar wird mit einem & angebunden: http://www.example.org/?key1 = value1 & key2 = value2 & key3 = value3 Wir werden jetzt diese Parameter auswerten. Dazu laden wir einerseits ein weiteres Modul, n\u00e4mlich das url -Modul und wir werten die Anfrage ( request ) dahingehend aus, dass wir die Parameter der URL auswerten. server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const http = require ( 'http' ); const url = require ( 'url' ); const server = http . createServer ( function ( request , response ) { response . writeHead ( 200 , { 'content-type' : 'text/html; charset=utf-8' }); const parsedUrl = url . parse ( request . url , true ); const params = parsedUrl . query ; const body = `<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>WebTech - Node.js</title> </head> <body> <h1 style=\"color:#76B900\">Hello ${ params . name } in ${ params . ort } </h1> </body> </html>` ; response . end ( body ); }); server . listen ( 8080 , function () { console . log ( 'Server is listening to http://localhost:8080' ); }); Nach dem restart des Webservers (1. Ctrl+C und 2. node server.js ) und der Eingabe folgender URL: http://localhost:8080/?name=FIW&ort=Berlin wird im Browser Folgendes angezeigt:","title":"URLs auswerten"},{"location":"node/#chrome-developer-tools","text":"Die Chrome Developer Tools k\u00f6nnen auch zum Debuggen von Node.js-Anwendungen verwendet werden. Rufen Sie daf\u00fcr Ihre Node.js-Anwendung im Terminal mit dem --inspect -Flag auf: node --inspect server.js Im Terminal erscheint eine Ausgabe in der Form: Debugger listening on ws://127.0.0.1:9229/dc995a6a-61eb-4143-af7e-ac8e4599dcd7 For help, see: https://nodejs.org/en/docs/inspector Server is listening to http://localhost:8080 Im Chrome-Browser k\u00f6nnen Sie nun einerseits wie gewohnt die URL http://localhost:8080/?name=FIW&ort=Berlin eingeben, aber das Debuggen kann unter Eingabe der URL chrome://inspect/ erfolgen. Es erscheint folgende Seite im Browser: F\u00fcr weitere Informationen zum Debuggen siehe z.B. https://nodejs.org/en/docs/guides/debugging-getting-started/ . Success Wir haben mithilfe von Node.js einen ersten eigenen Webserver erstellt. Wir haben uns mit dem Konzept von Request und Response vertraut gemacht und eine eigene Response erstellt. Wir haben Argumente aus der URL ausgelesen und somit dynamisch unsere Response angepasst. Wir wollen nun zun\u00e4chst ein Framework kennenlernen, das uns manche Arbeiten erleichtert: Express.","title":"Chrome Developer Tools"},{"location":"node/#express","text":"Express ist ein Node.js-Framework, das einerseits recht einfach gehalten wurde, andererseits aber alle wesentlichen Funktionen f\u00fcr eine Web-Anwendung bereith\u00e4lt. So m\u00fcssen wir uns beispielsweise bei der Verwendung von Express nicht mehr selbst um das Parsen der URL k\u00fcmmern. Wir werden im Folgenden ein kleines Projekt zu Verwaltung von Filmen erstellen. Dies geschieht mithilfe von npm . npm ist der Node package manager . Bisher enth\u00e4lt unser Ordner backend nur die Datei server.js . Das ist jedoch insofern noch kein wirkliches Node.js-Projekt, da es noch nicht vom Paketmanager, also npm verwaltet wird. Um dies zu tun wechseln wir in den Ordner backend und initialisieren dann unser Node.js-Projekt: im Ordner backend npm init Sie werden nun einige Sachen gefragt und k\u00f6nnen eigentlich immer jeweils mit Enter best\u00e4tigen. Es erfolgt also ungef\u00e4hr ein solcher Dialog im Terminal: % npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) backend version: ( 1 .0.0 ) description: Node.js-Backend entry point: ( server.js ) test command: git repository: keywords: author: license: ( ISC ) About to write to /Users/jornfreiheit/workspace/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js-Backend\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"start\" : \"node server.js\" } , \"author\" : \"\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Das wesentliche Ergebnis der Initialisierung ist die Erstellung der package.json -Datei. Darin k\u00f6nnen wir Paketabh\u00e4ngigkeiten definieren. Au\u00dferdem ist in dem Ordner backend ein Unterordner node_modules entstanden, der die Node.js-Module enth\u00e4lt, die wir ben\u00f6tigen. Als erstes installieren wir Express: npm install express Nun bauen wir uns eine kleine index.js -Datei, die unsere erste Express-Anwendung darstellt. 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const app = express (); app . get ( '/' , ( req , res ) => { res . send ( 'My first express application' ); }); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); In Zeile 1 wird das Express-Paket eingebunden. In Zeile 2 wird eine Express-App mit Basiskonfiguration erzeugt (hier ein app -Objekt). Die get() -Funktion des app -Objektes erzeugt eine Route, \u00fcber die man sich mit dem Browser mit der App verbinden kann (Zeilen 4 - 6 ). Als Response ( res ) wird einfach eine Zeichenkette gesendet ( send ). In den Zeilen 8 - 10 wird die App an den Port 8080 gebunden. Hier erfolgt intern die Erstellung eines Node.js-Servers mit http -Modul. Wenn Sie nun node index.js innerhalb des backend -Ordners aufrufen, wird der Node.js-Server erstellt und Sie k\u00f6nnen im Browser unter der URL localhost:8080 darauf zugreifen. Es erscheint: Im obigen Beispiel erkennt man in Zeile 4 zwei Parameter der Routing-Callback-Funktion innerhalb der app.get() -Methode: das Request -Objekt req und das Response -Objekt res . Beide Objekte geh\u00f6ren zu den elementaren Elementen einer Applikation.","title":"Express"},{"location":"node/#request","text":"Die Eigenschaften des Request -Objektes req sind in https://expressjs.com/de/api.html#req erl\u00e4utert. Hier folgt eine kurze unvollst\u00e4ndige Auflistung: Eigenschaft Bedeutung method HTTP-Methode, mit der die Anfrage gesendet wurde (z.B. GET oder POST) originalUrl enth\u00e4lt die Anfrage-URL params enth\u00e4lt die variablen Anteile der Anfrage-URL protocol enth\u00e4lt das Protokoll der Anfrage (z.B. http oder https) query ist ein Objekt, das alle Parameter der Anfrage-URL enth\u00e4lt","title":"Request"},{"location":"node/#response","text":"Die Eigenschaften des Response -Objektes res sind in https://expressjs.com/de/api.html#res erl\u00e4utert. Hier folgt eine kurze unvollst\u00e4ndige Auflistung: Methode Bedeutung get(field) gibt den Response-Header von field zur\u00fcck (z.B. get('Content-Type') ) set(field[,value]) setzt den Wert des angegebenen Header-Feldes json([body]) sendet eine JSON-Response ( [body] ist das JSON-Objekt) cookie(name,value[,options]) setzt einen Cookie-Wert name=value redirect([status,]path) Weiterleitung der Anfrage nach path status(code) setzt den Status der Antwort auf code send([body]) sendet die HTTP-Antwort end([data][,encoding]) beendet den Antwortprozess","title":"Response"},{"location":"node/#router","text":"Wie man der API-Dokumentation von Express entnehmen kann, sind die Grundelemente einer Express-Anwendung die express() -Funktion , die die Express-Anwendung erstellt, die Eigenschaften und Methoden , die dieser Anwendung zur Verf\u00fcgung stehen, das Request -Objekt , das Response -Objekt sowie der Router . Mit Letzterem besch\u00e4ftigen wir uns jetzt. Unser Projekt soll folgende Struktur aufweisen: backend +---- movie | +---- model.js | +---- view.js | +---- controller.js | +---- movierouter.js +---- node_modules +---- index.js +---- package.json backend , movie und node_modules sind jeweils Ordner. node_modules wurde automatisch erzeugt (durch npm init und enth\u00e4lt alle eingebundenen Node.js-Pakete). Wir erstellen zun\u00e4chst die Datei movie/movierouter.js 1 und \"specken\" die index.js etwas ab (die get() -Funktion wird gel\u00f6scht). movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); const data = [ /* siehe Reiter \"const data\" */ ]; router . get ( '/' , ( req , res ) => { res . send ( data ); }); module . exports = router ; index.js 1 2 3 4 5 6 7 const express = require ( 'express' ); const app = express (); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ]; Beachten Sie, dass in den obigen Listings aus Gr\u00fcnden der \u00dcbersichtlichkeit in der movie/movierouter.js das JSON-Objekt herausgel\u00f6scht und im Reiter \"const data\" zur Verf\u00fcgung gestellt wurde (muss dann hineinkopiert werden). In der movie/movierouter.js wird das Router -Objekt, das in Zeile 2 erzeugt wird, in Zeile 10 exportiert. Im Folgenden wird gezeigt, wie der Router nun in unsere Anwendung eingebunden wird. Dies passiert in der index.js . Die hinzugef\u00fcgten Zeilen sind markiert. index.js 1 2 3 4 5 6 7 8 9 10 11 12 const express = require ( 'express' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); Beim Laden des Moduls wird die .js -Endung nicht mit angegeben. Das hei\u00dft, der Router wird aus der movie/movierouter.js -Datei mittels require('./movie/movierouter') geladen (siehe Zeile 2 ). W\u00e4re der Router sogar in einer Datei movie/index.js , m\u00fcsste dieser Name nicht angegeben werden, es w\u00fcrde also gen\u00fcgen, den Router \u00fcber den Pfad /movie zu laden (entspricht also /movie/index ). Die use() -Methode in Zeile 8 gibt an, dass der movieRouter (aus movie/index.js ) f\u00fcr das Routing des Pfades url /movie zust\u00e4ndig ist. Die get() -Methode aus Zeile 6 sorgt daf\u00fcr, dass der Aufruf url / (also z.B. localhost:8080 ) nach url /movie (also z.B. localhost:8080/movie ) weitergeleitet wird. Rufen Sie nun im backend -Ordner node index.js auf und geben Sie im Browser localhost:8080 ein. Beobachten Sie, dass auf die URL localhost:8080/movie weitergeleitet wird. Es erscheint im Browser (entweder parsed oder raw - Abh\u00e4ngig von Browser und Browser-Plugins):","title":"Router"},{"location":"node/#model-view-controller","text":"Bis jetzt steckt alles im Router ( /movie/movierouter.js ). Wir werden im ersten Schritt die Daten (die eigentlich zum Model geh\u00f6ren) und eine Aktion ( listAction ) im Controller ( movie/controller.js ) definieren. movie/controller.js 1 2 3 4 5 6 7 8 9 const data = [ /* siehe Reiter \"const data\" */ ]; function listAction ( request , response ) { response . send ( data ); } module . exports = { listAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { listAction } = require ( './controller' ); router . get ( '/' , listAction ); module . exports = router ; const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ];","title":"Model-View-Controller"},{"location":"node/#controller","text":"Der Controller verwaltet perspektivisch die View und das Model. Beides haben wir jetzt noch nicht. Zun\u00e4chst wird im Controller eine Aktion listAction definiert, die alle Daten in einer Response ( response.send(data) ) sendet 2 . Diese Aktion wird mittels exports anderen Modulen zur Verf\u00fcgung gestellt. Der Router ( movierouter.js ) wurde entsprechend angepasst. Einerseits haben wir die Daten aus dem Router entfernt, andererseits enth\u00e4lt die get() -Methode nun nicht mehr die direkte Implementierung (die ja in den Controller ausgelagert wurde), sondern ruft die Methode listAction des Controllers auf. Dazu muss sie eingebunden werden. Dies w\u00fcrde normalerweise wie folgt geschehen: const controller = require ( './controller' ); const listAction = controller . listAction ; Da ein solches Konstrukt h\u00e4ufig vorkommt, wurde ein sogenanntes destructuring eingef\u00fchrt. Obiger Code wird mithilfe von destructuring durch const { listAction } = require ( './controller' ); ersetzt und verzichtet somit auf die Hilfsvariable controller . Die Eigenschaft, die im Controller listAction hei\u00dft (und importiert wird), wird direkt geladen.","title":"Controller"},{"location":"node/#model","text":"Das Model ( movie/model.js ) verwaltet die Daten. Dazu werden wir zun\u00e4chst die Daten aus dem Controller in das Model verschieben. Au\u00dferdem stellt das Model eine Funktion ( getAll() ) zum Auslesen aller Daten zur Verf\u00fcgung: movie/model.js 1 2 3 4 5 6 7 const data = [ /* siehe Reiter \"const data\" */ ]; module . exports = { getAll () { return data ; }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 const model = require ( './model' ); function listAction ( request , response ) { response . send ( model . getAll ()); } module . exports = { listAction , }; const data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const data = [ { id : 1 , title : 'Die Verurteilten' , year : '1994' }, { id : 2 , title : 'Der Pate' , year : '1972' }, { id : 3 , title : 'Der Pate 2' , year : '1974' }, { id : 4 , title : 'The Dark Knight' , year : '2008' }, { id : 5 , title : 'Die zw\u00f6lf Geschworenen' , year : '1957' }, { id : 6 , title : 'Schindlers Liste' , year : '1993' }, { id : 7 , title : 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , year : '2003' }, { id : 8 , title : 'Pulp Fiction' , year : '1994' }, { id : 9 , title : 'Zwei glorreiche Halunken' , year : '1966' }, { id : 10 , title : 'Fight Club' , year : '1999' }, { id : 11 , title : 'Der Herr der Ringe: Die Gef\u00e4hrten' , year : '2001' }, { id : 12 , title : 'Forrest Gump' , year : '1994' }, { id : 13 , title : 'Inception' , year : '2010' }, { id : 14 , title : 'Das Imperium schl\u00e4gt zur\u00fcck' , year : '1980' }, { id : 15 , title : 'Der Herr der Ringe: Die zwei T\u00fcrme' , year : '2002' }, { id : 16 , title : 'Matrix' , year : '1999' }, { id : 17 , title : 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , year : '1990' }, { id : 18 , title : 'Einer flog \u00fcber das Kuckucksnest' , year : '1975' }, { id : 19 , title : 'Joker' , year : '2019' }, { id : 20 , title : 'Die sieben Samurai' , year : '1954' }, ]; Die Funktion getAll() im Model ( movie/model.js ) wird jetzt direkt dort implementiert, wo sie auch exportiert wird. Die Implementierung h\u00e4tte man auch auf eine Variable legen k\u00f6nnen (wie listAction beim Controller) und dann exportieren. Der Controller ( movie/controller.js ) liest das Model ein (Zeile 1 ) und verwendet die getAll() -Funktion, um die Daten zu senden (Zeile 4 ).","title":"Model"},{"location":"node/#view","text":"Die View ist f\u00fcr die Darstellung verantwortlich. Sp\u00e4ter wird diese von uns in Angular umgesetzt. Hier wird es nur zur Verdeutlichung gezeigt. Wir verwenden JavaScript-Template-Strings (sozusagen eine Mischung aus JavaScript und HTML). Wer m\u00f6chte, kann diesen Abschnitt auch \u00fcberspringen, da wir sp\u00e4ter unsere Oberfl\u00e4che viel aufwendiger mit Angular gestalten. movie/view.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 module . exports = function render ( movies ) { return ` <!DOCTYPE html> <html lang=\"de\"> <head> <meta charset=\"UTF-8\"> <title>Movie-list</title> </head> <body> <table> <thead> <tr> <th>Id</th> <th>Title</th> </tr> </thead> <tbody> ${ movies . map ( movie => `<tr><td> ${ movie . id } </td> <td> ${ movie . title } </td></tr>` ). join ( '' ) } </tbody> </table> </body> </html> ` }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 const model = require ( './model' ); const view = require ( './view' ); function listAction ( request , response ) { const movies = model . getAll (); const body = view ( movies ); response . send ( body ); } module . exports = { listAction , }; In der View ( movie/view.js ) wird also eine HTML-Tabelle ( <table> ) erzeugt. Der Funktion render werden die anzuzeigenden Daten als JSON-Array \u00fcbergeben. Die JavaScript-Funktion map() durchl\u00e4uft jeden einzelnen Eintrag des Arrays und speichert ihn jeweils in die Variable movie . Jeder movie wird in einer Tabllenzeile ( <tr> ) dargestellt und besteht aus einer id und einem title (siehe const data im Model). Auf diese Elemente wird zugegriffen und in einzelnen Dateneintr\u00e4gen der Tabelle ( <td> ) dargestellt. Die JavaScript-Funktion join() verbindet diese Struktur zu einem String (Konkatenation mit '' ), so dass der Template-String tats\u00e4chlich ein String ist. Im Controller ( movie/controller.js ) wird die View eingebunden (Zeile 2 ) und dieser View die Movie-Daten \u00fcbergeben, so dass body dann den durch movie.render() erzeugten String enth\u00e4lt (die HTML-Seite). Dieser wird als Response gesendet. Nach einem Neustart der Anwendung ( node index.js im Ordner backend ) erscheint im Browser ( localhost:8080 ) folgende Seite: Success Wir haben mit Express das bekannteste Node.js-Framework verwendet, um die Verarbeitung von Daten im Rahmen des Model-View-Controller-Konzeptes umzusetzen. Im obigen Beispiel haben wir die Daten (die Filme) direkt im JSON-Format im Model gespeichert. Das ist nat\u00fcrlich nicht flexibel. Wir werden die Daten nun in eine Datenbank auslagern.","title":"View"},{"location":"node/#anbindung-von-datenbanken","text":"Wir wollen Node.js haupts\u00e4chlich daf\u00fcr verwenden, im Backend mit einer Datenbank zu kommunizieren. Wir wollen dies hier exemplarisch mit MySQL (siehe Werkzeuge \u2192 MySQL ) erl\u00e4utern. Die Verwendung von z.B. PostgreSQL ist \u00e4quivelent - Sie ben\u00f6tigen nur einen anderen Datenbanktreiber. Wir werden zun\u00e4chst das Node.js-Paket, das den mysql -Treiber enth\u00e4lt, installieren: npm install mysql Danach ist in der package.json die Abh\u00e4ngigkeit vom mysql -Paket hinterlegt (siehe \"dependencies\" ): package.json { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js-Backend for MySQL\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"start\" : \"node server.js\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"mysql\" : \"^2.18.1\" } }","title":"Anbindung von Datenbanken"},{"location":"node/#eine-movie-datenbank","text":"Wir werden die Anbindung von Datenbanken exemplarisch an der Movie -Datenbank zeigen, die wir bereits im obigen Express -Abschnitt verwendet haben. Dazu erstellen wir uns eine Datenbank namens movie-db und bef\u00fcllen diese mit einigen Filmen (Tabelle Movie ). Sie k\u00f6nnen diese Datenbak auf verschiedenen Wegen erstellen. Am einfachsten ist es, wenn Sie phpMyadmin verwenden. Dort k\u00f6nnen Sie folgende SQL-Anfrage im Reiter SQL eingeben (Sie k\u00f6nnen auch im Terminal SQL -Anfragen eingeben nachdem Sie sich dort per mysql -u root -p mit dem MySQL-Server verbunden haben): CREATE DATABASE ` movie - db ` ; USE ` movie - db ` ; CREATE TABLE ` Movies ` ( ` id ` int ( 11 ) NOT NULL AUTO_INCREMENT , ` title ` varchar ( 255 ) DEFAULT NULL , ` year ` int ( 11 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; INSERT INTO ` Movies ` ( ` title ` , ` year ` ) VALUES ( 'Die Verurteilten' , '1994' ), ( 'Der Pate' , '1972' ), ( 'Der Pate 2' , '1974' ), ( 'The Dark Knight' , '2008' ), ( 'Die zw\u00f6lf Geschworenen' , '1957' ), ( 'Schindlers Liste' , '1993' ), ( 'Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs' , '2003' ), ( 'Pulp Fiction' , '1994' ), ( 'Zwei glorreiche Halunken' , '1966' ), ( 'Fight Club' , '1999' ), ( 'Der Herr der Ringe: Die Gef\u00e4hrten' , '2001' ), ( 'Forrest Gump' , '1994' ), ( 'Inception' , '2010' ), ( 'Das Imperium schl\u00e4gt zur\u00fcck' , '1980' ), ( 'Der Herr der Ringe: Die zwei T\u00fcrme' , '2002' ), ( 'Matrix' , '1999' ), ( 'GoodFellas \u2013 Drei Jahrzehnte in der Mafia' , '1990' ), ( 'Einer flog \u00fcber das Kuckucksnest' , '1975' ), ( 'Joker' , '2019' ), ( 'Die sieben Samurai' , '1954' ); Wir verwenden das Projekt, das wir bereits im obigen Express -Abschnitt verwendet haben, also die Dateien aus backend : backend +---- movie | +---- model.js | +---- view.js | +---- controller.js | +---- movierouter.js +---- node_modules +---- index.js +---- package.json Zun\u00e4chst \u00e4ndern wir die movie/model.js . Darin werden nun nicht mehr die Daten gehalten, sondern die Verbindung zur Datenbank aufgebaut. Au\u00dferdem sehen wir 4 Funktionen zur Datenverwaltung vor, wovon wir eine ( getAll() ) gleich implementieren 3 : movie/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAll , }; movie/controller.js const model = require ( './model' ); const view = require ( './view' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( view ( movies )); }, error => response . send ( error ), ); } module . exports = { listAction , }; Im Model ( /movie/model.js ) wird zun\u00e4chst die Verbindung zur Datenbank aufgebaut (Zeilen 2-7 und connection.connect() ). Die getAll() -Funktion stellt mithilfe von connection.query() eine Anfrage an die Datenbank (erster Parameter der connection.query() -Funktion). In unserem Beispiel ist die Anfrage die SQL-Query SELECT * FROM Movies . Die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Promises werden in JavaScript\u2192Promises erl\u00e4utert. Im Controller ( /movie/controller.js ) wird das Promise -Objekt in der then -Funktion ausgewertet. Wird in der Promise die resolve -Methode aufgerufen, werden die results \u00fcbergeben, also das Ergebnis der Datenbankanfrage. Diese Werte werden in der ersten Callback-Funktion der then -Methode dem Parameter movies \u00fcbergeben. Soll nur das JSON gesendet werden, wird die view nicht ben\u00f6tigt (statt response.send(view(movies)); gen\u00fcgt dann response.send(movies); ). Hier kapselt die View die Daten noch in einen HTML-Template-String. Im Falle eines Fehlers ruft die Promise die reject -Funktion auf und \u00fcbergibt den Parameter error . Diese Funktion ruft dann in der then -Funktion die zweite Callback-Funktion f\u00fcr die Fehlerauswertung auf. Success Wir haben jetzt eine MySQL-datenbank angebunden und die Anbindung anhand einer getAll() -Funktion, die alle in der Datenbank gespeicherten Filme zur\u00fcckgibt, gezeigt. Wir haben somit einen lesenden Zugriff auf alle Datenbankeintr\u00e4ge realisiert. Im folgenden werden wir auch weitere Zugriffe (create, update, delete) umsetzen. Allerdings haben wir bisher auch eine View mithilfe von Node.js erstellt und verwendet. Die Idee im folgenden ist, dass unser Backend nicht mehr f\u00fcr die Darstellung zust\u00e4ndig ist, sondern die Ergebnisse der Datenbankabfragen im JSON-Format zur\u00fcckgibt. Unser mit Angular erstelltes Frontend soll f\u00fcr die Darstellung zust\u00e4ndig sein. Wir stellen unser Backend vollst\u00e4ndig auf das REST-Konzept um.","title":"Eine Movie-Datenbank"},{"location":"node/#unser-backend-als-reiner-rest-server","text":"Representional State Transfer (REST) ist ein Architekturkonzept und wird in vielen Webanwendungen verwendet. REST beschreibt die Schnittstelle zwischen Frontend und Backend und ist dabei sehr stark an HTTP angelehnt: jede Ressource wird \u00fcber eine eindeutige URL aufgerufen (z.B. alle Filme \u00fcber localhost:8080/movies , den Film mit der id=3 \u00fcber localhost:8080/movie/3 ) es wird definiert, mit welcher HTTP-Anfrage auf die Ressource zugegriffen wird (z.B. get zum Lesen, post zum Anlegen, put zum \u00c4ndern von Ressourcen) jede Anfrage ist zustandslos, d.h. eine Anfrage muss alle notwendigen Informationen beinhalten und fr\u00fchere Anfragen (und deren Responses) werden nicht gespeichert Wir werden unsere View im Backend von nun an also nicht mehr ben\u00f6tigen. Unser Projekt sieht derzeit so aus: index.js const express = require ( 'express' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); movie/model.js const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } module . exports = { getAll , }; movie/controller.js const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( movies ); }, error => response . send ( error ), ); } module . exports = { listAction , }; movie/movierouter.js const express = require ( 'express' ); const router = express . Router (); const { listAction } = require ( './controller' ); router . get ( '/' , listAction ); module . exports = router ; Geben wir also die die URL localhost:8080 an, dann passiert folgendes: die Route wird weitergeleitet an localhost:8080/movie (siehe in index.js die Anweisung app.get('/', (req, res) => res.redirect('/movie')); ) dadurch wird der movie/movierouter.js aufgerufen und dieser ruft die Funktion listAction auf listAction ruft die Promise auf, die in der Funktion model.getAll() definiert wird in getAll() erfolgt eine Anfrage an die Datenbank wird diese Anfrage erfolgreich ausgef\u00fchrt, ruft die Promise die resolve -Funktion auf und \u00fcbergibt alle Resultate der Anfrage in listAction werden diese Resultate als Resonse gesendet Wir rufen Postman zum Testen dieser Anfrage auf und geben localhost:8080 in das URL-Feld ein und senden die Anfrage mittels GET -Methode ab. Es erscheint: Das gleiche Ergebnis bekommen wir, wenn wir als URL localhost:8080/movie eingeben (darauf wird ja eh umgeleitet). Wir k\u00f6nnen die Ausgabe auch mithilfe von curl testen: % curl http://localhost:8080/movie [{ \"id\" :1, \"title\" : \"Die Verurteilten\" , \"year\" :1994 } , { \"id\" :2, \"title\" : \"Der Pate\" , \"year\" :1972 } , { \"id\" :3, \"title\" : \"Der Pate 2\" , \"year\" :1974 } , { \"id\" :4, \"title\" : \"The Dark Knight\" , \"year\" :2008 } , { \"id\" :5, \"title\" : \"Die zw\u00f6lf Geschworenen\" , \"year\" :1957 } , { \"id\" :6, \"title\" : \"Schindlers Liste\" , \"year\" :1993 } , { \"id\" :7, \"title\" : \"Der Herr der Ringe: Die R\u00fcckkehr des K\u00f6nigs\" , \"year\" :2003 } , { \"id\" :8, \"title\" : \"Pulp Fiction\" , \"year\" :1994 } , { \"id\" :9, \"title\" : \"Zwei glorreiche Halunken\" , \"year\" :1966 } , { \"id\" :10, \"title\" : \"Fight Club\" , \"year\" :1999 } , { \"id\" :11, \"title\" : \"Der Herr der Ringe: Die Gef\u00e4hrten\" , \"year\" :2001 } , { \"id\" :12, \"title\" : \"Forrest Gump\" , \"year\" :1994 } , { \"id\" :13, \"title\" : \"Inception\" , \"year\" :2010 } , { \"id\" :14, \"title\" : \"Das Imperium schl\u00e4gt zur\u00fcck\" , \"year\" :1980 } , { \"id\" :15, \"title\" : \"Der Herr der Ringe: Die zwei T\u00fcrme\" , \"year\" :2002 } , { \"id\" :16, \"title\" : \"Matrix\" , \"year\" :1999 } , { \"id\" :17, \"title\" : \"GoodFellas \u2013 Drei Jahrzehnte in der Mafia\" , \"year\" :1990 } , { \"id\" :18, \"title\" : \"Einer flog \u00fcber das Kuckucksnest\" , \"year\" :1975 } , { \"id\" :19, \"title\" : \"Joker\" , \"year\" :2019 } , { \"id\" :20, \"title\" : \"Die sieben Samurai\" , \"year\" :1954 }] Wir erweitern unsere Schnittstelle zun\u00e4chst um die Ansicht eines einzelnen Films. Wir wollen nun mit der URL http://localhost:8080/movie/3 den Film angezeigt bekommen, der die id 3 hat. Wir wollen also die URLs um die Angabe einer id erweitern und f\u00fcr diesen Endpunkt den entsprechenden Film zur\u00fcckgesendet bekommen. Dazu erweitern wir (untem im Listing jeweils gelb markiert) die movie/model.js um eine Funktion getOne(id) ; das Model stellt nach au\u00dfen die Funktion get(id) zur Verf\u00fcgung, die als Response den Film sendet, der die entsprechende id hat, die movie/controller.js um eine Funktion detailAction() , die den Parameter id aus der URL ausliest und die Funktion model.get(id) aufruft, den movie/movierouter.js um eine weitere Route, n\u00e4mlich router.get('/:id', detailAction); , so dass eine id an die URL geh\u00e4ngt werden kann und f\u00fcr diesen Fall die detailAction aufgerufen wird movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } function getOne ( id ) { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies WHERE id=?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . send ( movies ); }, error => response . send ( error ), ); } function detailAction ( request , response ) { model . get ( request . params . id ). then ( movie => response . send ( movie ), error => response . send ( error ), ); } module . exports = { listAction , detailAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); module . exports = router ;","title":"Unser Backend als reiner REST-Server"},{"location":"node/#content-type-und-fehlerbehandlung","text":"Zwar senden wir bereits die Resultate der Requests als JSON zur\u00fcck, jedoch ist der content-type unserer Response noch content-type:text/html , da wir die Response mithilfe der send() -Funktion senden ( response.send() ). Wir \u00e4ndern dies in response.json() . Dadurch teilen wir dem Client mit, dass der gesendetete content-type ein JSON ist ( content-type:application/json ). F\u00fcr eine erfolgreiche Bearbeitung eines Requests wird mit der Response der HTTP-Statuscode 200 gesendet. F\u00fcr den Fehlerfall wollen wir nun daf\u00fcr sorgen, dass der HTTP-Statuscode 500 - Internal Server Error \u00fcbertragen wird. Dies erreichen wir im Fehlerfall mit error => response.status(500).json(error) . Unser Controller sieht nun also so aus: movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const model = require ( './model' ); function listAction ( request , response ) { model . getAll (). then ( movies => { response . json ( movies ); }, error => response . status ( 500 ). json ( error ), ); } function detailAction ( request , response ) { model . get ( request . params . id ). then ( movie => response . json ( movie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , };","title":"Content-Type und Fehlerbehandlung"},{"location":"node/#post-einen-neuen-datensatz-anlegen","text":"Um einen neuen Datensatz anzulegen, m\u00fcssen wir zwei Dinge beachten: die HTTP-Anfrage ist POST (anstelle von GET , das wir zum Lesen verwenden) der Request \u00fcbergibt im Body den neuen Datensatz (als JSON) \u2192 dazu ben\u00f6tigen wir das Paket body-parser von Node.js und nutzen davon die json() -Funktion zum Einlesen des neuen Datensatzes im JSON-Format Wir passen zun\u00e4chst die index.js entsprechend an: index.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const express = require ( 'express' ); const bodyParser = require ( 'body-parser' ); const movieRouter = require ( './movie/movierouter' ); const app = express (); app . use ( bodyParser . json ()); app . get ( '/' , ( req , res ) => res . redirect ( '/movie' )); app . use ( '/movie' , movieRouter ); app . listen ( 8080 , () => { console . log ( 'Server listening on port 8080' ); }); Um nun einen neuen Datensatz in der Datenbank anzulegen, erweitern wir unser Projekt wie folgt: in movie/model.js wird eine insert() -Funktion definiert, welche durch eine save() -Funktion aufgerufen wird ( save() wird nach au\u00dfen zur Verf\u00fcgung gestellt 4 ), in movie/controller.js wird eine createAction() definiert, die den neuen Datensatz aus dem request,body ausliest und die model.save() aufruft, in movie/movierouter.js wird der neue Endpunkt router.post('/', createAction); festgelegt movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { return new Promise (( resolve , reject ) => { const query = 'INSERT INTO Movies (title, year) VALUES (?, ?)' ; connection . query ( query , [ movie . title , movie . year ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { const movie = { id : request . body . id , title : request . body . title , year : request . body . year , }; model . save ( movie ). then ( newMovie => response . status ( 201 ). json ( newMovie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , createAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); module . exports = router ; Die Funktionen im Model haben alle den gleichen Aufbau. Es wird eine Promise erzeugt und mithilfe von connection.query() eine Anfrage an die Datenbank gestellt. Im Erfolgsfall wird die resolve() -Funktion der Promise aufgerufen, im Fehlerfall die reject() -Funktion. Im Controller wird der request verarbeitet und eine response erzeugt. Im Router werden die Endpunkte und die dazugeh\u00f6rigen HTTP-Methoden (z.B. get oder post ) definiert. Um die createAction -Funktion zu testen, rufen wir Postman auf und tragen in die URL http://localhost:8080/movie/ ein. Wichtig: es muss nun POST ausgew\u00e4hlt werden. Mit dem Request \u00fcbergeben wir im Body nun ein JSON, das einen neuen Film enth\u00e4lt, d.h. das JSON muss die Eigensc haften title und year enthalten (nicht id , denn diese wird automatisch durch das Datenbanksystem erzeugt). Die Anfrage sieht in Postman wie folgt aus: Es kann auch mit curl getestet werden: curl -X POST -H \"Content-Type: application/json\" -d '{\"title\": \"Noch ein Test\", \"year\": \"2019\"}' http://localhost:8080/movie { \"fieldCount\" :0, \"affectedRows\" :1, \"insertId\" :23, \"serverStatus\" :2, \"warningCount\" :0, \"message\" : \"\" , \"protocol41\" :true, \"changedRows\" :0 }","title":"POST - einen neuen Datensatz anlegen"},{"location":"node/#put-einen-datensatz-andern","text":"Das \u00c4ndern eines Datensatzes erfolgt in \u00e4hnlicher Weise wie das Anlegen eines Datensatzes. Es wird im Body der Anfrage das neue JSON gesendet und der Content-Type der Anfrage ist application/json (im Header gesetzt). Zum \u00c4ndern eines Datensatzes wird die HTTP-Methode put verwendet. Um nun einen Datensatz in der Datenbank zu \u00e4ndern, erweitern wir unser Projekt wie folgt: in movie/model.js wird eine update() -Funktion definiert, welche durch die save() -Funktion aufgerufen wird ( save() wird nach au\u00dfen zur Verf\u00fcgung gestellt), in movie/controller.js wird eine updateAction() definiert, die genauso aussieht wie die createAction() , au\u00dfer dass die id aus der URL ausgelesen wird und nicht aus dem Request-Body in movie/movierouter.js wird der neue Endpunkt router.put('/', updateActionAction); festgelegt movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { /* bleibt so */ } function update ( movie ) { return new Promise (( resolve , reject ) => { const query = 'UPDATE Movies SET title = ?, year = ? WHERE id = ?' ; connection . query ( query , [ movie . title , movie . year , movie . id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); else return update ( movie ); }, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { /* bleibt so */ } function updateAction ( request , response ) { const movie = { id : request . params . id , title : request . body . title , year : request . body . year , }; model . save ( movie ). then ( movie => response . status ( 201 ). json ( movie ), error => response . status ( 500 ). json ( error ), ); } module . exports = { listAction , detailAction , createAction , updateAction , }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction , updateAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); router . put ( '/:id' , updateAction ); module . exports = router ; Um die Update-Funktion in Postman auszuprobieren, geben Sie als URL z.B. http://localhost:8080/movie/3 ein (um den Film mit der id=3 zu \u00e4ndern) und w\u00e4hlen als HTTP-Methode PUT . Im Request-Body geben Sie dann z.B. { \"title\" : \"Der Pate 3\" , \"year\" : \"1990\" } ein. Sie erhalten: Nat\u00fcrlich k\u00f6nnen Sie zum Testen auch curl verwenden. Die Anfrage ist \u00e4hnlich zur POST -Anfrage, nur mit curl -X PUT .","title":"PUT - einen Datensatz \u00e4ndern"},{"location":"node/#delete-einen-datensatz-andern","text":"Um einen Datensatz zu l\u00f6schen, w\u00e4hlen wir die HTTP-Methode DELETE . Alles andere bleibt wie gehabt. Wir pr\u00e4sentieren gleich die L\u00f6sung: movie/model.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const mysql = require ( 'mysql' ); const connection = mysql . createConnection ({ host : 'localhost' , user : 'root' , password : 'password' , /* hier muss Ihr Passwort hin */ database : 'movie-db' , }); connection . connect (); function getAll () { /* bleibt so */ } function getOne ( id ) { /* bleibt so */ } function insert ( movie ) { /* bleibt so */ } function update ( movie ) { /* bleibt so */ } function remove ( id ) { return new Promise (( resolve , reject ) => { const query = 'DELETE FROM Movies WHERE id = ?' ; connection . query ( query , [ id ], ( error , results ) => { if ( error ) reject ( error ); else resolve ( results [ 0 ]); }); }); } module . exports = { getAll , get ( id ) { return getOne ( id )}, save ( movie ) { if ( ! movie . id ) return insert ( movie ); else return update ( movie ); }, delete ( id ) { return remove ( id )}, }; movie/controller.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const model = require ( './model' ); function listAction ( request , response ) { /* bleibt so */ } function detailAction ( request , response ) { /* bleibt so */ } function createAction ( request , response ) { /* bleibt so */ } function updateAction ( request , response ) { /* bleibt so */ } function deleteAction ( request , response ) { const id = parseInt ( request . params . id , 10 ); model . delete ( id ) . then ( () => response . status ( 204 ). send (), error => response . status ( 500 ). json ( error ) ); } module . exports = { listAction , detailAction , createAction , updateAction , deleteAction }; movie/movierouter.js 1 2 3 4 5 6 7 8 9 10 11 const express = require ( 'express' ); const router = express . Router (); const { listAction , detailAction , createAction , updateAction , deleteAction } = require ( './controller' ); router . get ( '/' , listAction ); router . get ( '/:id' , detailAction ); router . post ( '/' , createAction ); router . put ( '/:id' , updateAction ); router . delete ( '/:id' , deleteAction ); module . exports = router ; Success Wir haben nun eine vollst\u00e4ndige REST-Schnittstelle des Backends implementiert. Es k\u00f6nnen alle Datens\u00e4tze oder ein Datensatz gelesen ( read mithilfe von get ), ein Datensatz erzeugt ( create mithilfe von post ), ein Datensatz aktualisiert ( update mithilfe von put ) und ein Datensatz gel\u00f6scht ( delete mithilfe von delete ) werden.","title":"DELETE - einen Datensatz \u00e4ndern"},{"location":"node/#json-web-tokens-zur-authentifizierung","text":"Unsere Backend-Schnittstelle ist bis jetzt offen f\u00fcr jeden, d.h. jeder, der die Endpunkte kennt, kann die Ressourcen abfragen und somit Daten auslesen, l\u00f6schen, \u00e4ndern usw. Das kann nat\u00fcrlich nicht richtig sein, insbesondere wenn mit sensiblen Daten gearbeitet wird. Wir k\u00f6nnen im Backend auch nicht ein Anmeldeformular vorsehen, da das Backend nur Services anbietet. Au\u00dferdem ist die Kommunikation mit der REST-Schnittstelle zustandslos, d.h. es kann gar nicht gespeichert werden, ob eine Nutzerin bereits angemeldet ist oder nicht. Eine L\u00f6sung f\u00fcr diese Probleme sind JSON Web Tokens (JWT) . Ein JWT ist eine codierte Zeichenkette, die einen Header enth\u00e4lt, einen Payload und eine Signatur. Hier ein Screenshot der jwt.io-Webseite mit einem Beispiel daf\u00fcr:","title":"JSON Web Tokens zur Authentifizierung"},{"location":"node/#datenbank-und-model","text":"Wir erzeugen zun\u00e4chst eine Tabelle in unserer Datenbank, um Nutzername und zugeh\u00f6riges Passwort zu speichern.","title":"Datenbank und Model"},{"location":"node/#erzeugen-eines-jwt","text":"F\u00fcr die Erzeugung eines JWT verwenden wir das Nodes-Paket jsonwebtoken . Dieses installieren wir im Ordner backend mit dem Befehl npm install jsonwebtoken Wir erstellen uns eine Route, \u00fcber die die Benutzer ihre Anmeldedaten an das Backend schicken k\u00f6nnen Die Bezeichnung movierouter.js f\u00fcr diese Datei ist hier noch verwirrend, da sie zun\u00e4chst auch die Daten enthalten wird. Wir werden nach und nach die Funktionen so gestalten und auslagern, dass die Datei nur noch den Router enth\u00e4lt und f\u00fcr alles andere ein Model, eine View und ein Controller entstehen werden. \u21a9 Beachten Sie auch hier wieder, dass aus Gr\u00fcnden der \u00dcbersichtlichkeit die Daten in den Reiter const data ausgelagert wurden. Die m\u00fcssen Sie hineinkopieren. \u21a9 Achten Sie darauf, Ihr korrektes Passwort einzutragen. \u21a9 Wir werden die save() -Funktion sp\u00e4ter noch erweitern. Beim Anlegen eines neuen Datensatzes werden zwar der Titel und das Entstehungsjahr des Films mitgesendet, nicht jedoch die id . Die id wird durch das Datenbanksystems vergeben. F\u00fcr den Fall, dass der save() -Funktion auch die id des Films mitgegeben wird, gehen wir davon aus, dass der Film in der Datenbank aktualisiert ( update() ) wird, sich also ein Eintrag ge\u00e4ndert hat. \u21a9","title":"Erzeugen eines JWT"},{"location":"rwd/","text":"Responsive Web Design \u00b6 Responsive bedeutet reagierend und wenn wir von Resonsive Web Design (RWD) sprechen, dann meinen wir damit, dass wir das Layout der Webseite so gestalten, dass es auf die Gr\u00f6\u00dfe des Ausgabeger\u00e4tes \"reagiert\". Das hei\u00dft, dass wir f\u00fcr kleine (schmale) Ausgabeger\u00e4te (z.B. Mobiltelefone) ein anderes Layout (Design) w\u00e4hlen, als f\u00fcr breitere Ausgabeger\u00e4te (z.B. Tablets) und ein noch anderes Layout f\u00fcr sehr breite Ausgabeger\u00e4te (z.B. Monitore). Responsive Web Design realisieren wir haupts\u00e4chlich mit CSS. Insofern h\u00e4tte es auch gut in den Skript-Teil f\u00fcr CSS gepasst. Da dies jedoch schon so lang war, haben wir eine eigene Unterseite f\u00fcr RWD erstellt. Damit \u00fcberhaupt auf unterschiedliche Ausgabeger\u00e4te reagiert werden kann, wurde sogenannte Media Queries in CSS eingef\u00fchrt. Diese schauen wir uns deshalb zun\u00e4chst genauer an. Zuvor noch ein wichtiger Tipp! Um unsere Webseite im responsiven Design zu gestalten, m\u00fcssen wir dem Browser mitteilen, dass er die Gr\u00f6\u00dfe des Viewports (also des Ausgabefensters) ber\u00fccksichtigen soll und die Darstellung an die Gr\u00f6\u00dfe des Ger\u00e4tes anpassen muss. Dazu f\u00fcgen wir im <head> unserer Webseite von nun an immer das viewport meta tag ein und geben damit an, dass einerseits die Ausgabe an die Ger\u00e4tegr\u00f6\u00dfe angepasst werden soll und wir mit einem Zoom-Faktor von 1 starten: <!-- ab jetzt immer im <head> angeben! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > Media Queries \u00b6 Grob gesagt, definieren wir mithilfe von Media Queries , welche CSS-Eigenschaften f\u00fcr welche Bildschirmgr\u00f6\u00dfe gelten sollen. Das hei\u00dft, wir definieren unterschiedliche CSS-Eigenschaften f\u00fcr unterschiedliche Bildschirmgr\u00f6\u00dfen. So k\u00f6nnen wir z.B. definieren, dass f\u00fcr Bildschirmbreiten unter 480px ein einspaltiges Layout gew\u00e4hlt wird, f\u00fcr Bildschirmbreiten gr\u00f6\u00dfer als 480px , aber kleiner gleich 720px ein 2-spaltiges Layout und f\u00fcr gr\u00f6\u00dfer als 720px ein 3-spaltiges Layout. Wir betrachten Media Queries zun\u00e4chst von der syntaktischen Seite. Das ist f\u00fcr Sie vielleicht zun\u00e4chst unspannend, aber wir \u00fcberlegen dabei, was alles geht, um dann zu sagen, dass wir uns doch nur um Screens (also Minitore) und doch nur um deren Breiten k\u00fcmmern - aber es ginge noch viel mehr ;-). Syntax von Media Queries \u00b6 Media Queries k\u00f6nnen zun\u00e4chst einmal true oder false sein. Um diesen Wert zu ermitteln, wird f\u00fcr einen Medientyp ( media type ) ein Ausdruck ( expression ) ausgewertet. Die allgemeine Syntax f\u00fcr eine Media Query ist wie folgt: @media [not|only] mediatype and (expressions) { CSS-Code; } Eine Media Query beginnt immer mit @media . Dann kann ein not oder ein only kommen, muss aber nicht und wir werden es auch nicht verwenden. Danach kommt der Medientyp (sollte kein Medientyp angegeben werden, ist screen , also Monitor gemeint). Medientypen k\u00f6nnen z.B. Drucker ( print ), Monitore ( screen ), Screenreader ( speech ) oder all sein. Wir werden uns (fast) ausschlie\u00dflich mit Monitoren bzw Monitorgr\u00f6\u00dfen und damit als Medientyp screen besch\u00e4ftigen. Ein angegebener Medientyp wird mithilfe von and mit einem Ausdruck verkn\u00fcpft. Ein Ausdruck besteht aus einem media feature und einem Wert. Ein media feature ist z.B. width , min-width , max-width , height , min-height , max-height , device-width , min-device-width , max-device-width , device-height , min-device-height , max-device-height , orientation , usw. Ausdr\u00fccke ( expressions ) ergeben sich dann aus media feature und Wert, z.B. orientation: landscape , orientation: portrait , min-width: 480px , max-width: 480px , resolution: 150dpi . Beispiele von Media Queries \u00b6 Wir betrachten zun\u00e4chst einige Beispiele von Media Queries: @ media screen and ( max-width : 800px ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) h\u00f6chstens 800px breit ist */ } @ media only screen and ( min-width : 320px ) and ( max-width : 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } Seit Media Queries Level 4 kann man auch direkt schreiben: @ media ( 320px <= width <= 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } @ media ( orientation : portrait ) { /* hier die CSS-Eigenschaften f\u00fcr hochformatige Ausgabemedien */ } @ media ( orientation : landscape ) { /* hier die CSS-Eigenschaften f\u00fcr querformatige Ausgabemedien */ } Erstes Beispiel \u00b6 Wir versuchen, zun\u00e4chst immer mobile first zu designen, d.h. wir geben zun\u00e4chst die CSS-Eigenschaften an, die f\u00fcr mobile Ger\u00e4te (schmaler Viewport) gelten und f\u00fcgen dann Media Queries hinzu, die f\u00fcr gr\u00f6\u00dfere Ausgabebreiten Anwendung finden soll. Hier ein erstes Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Media Queries </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : green ; color : yellow ; font-size : large ;; } } @ media screen and ( min-width : 1200px ) { div { background-color : blue ; color : white ; font-size : xx-large ; } } @ media screen and ( orientation : portrait ) { div { writing-mode : vertical - rl ; text-orientation : mixed ; background-color : yellow ; color : brown ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ html > Der HTML-Code ist kurz: wir erstellen ein <div> , welches einen Text enth\u00e4lt. Im <style> -Element definieren wir f\u00fcr dieses <div> , dass der Text zentriert sein soll (vertikal, also von links nach rechts betrachtet) und dass nach oben und unten ein Abstand zum Rand von jeweils 20% der Viewport-H\u00f6he eingehalten werden soll. Dadurch wird das <div> einigerma\u00dfen hoch (weil <div> ein Block-Element ist, geht es sowieso \u00fcber die gesamte Breite). Au\u00dferdem legen wir fest, dass der Hintergrund rot und die Schriftgr\u00f6\u00dfe medium sein soll. Unsere erste Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 800px , dass der Hintergrund nun gr\u00fcn, die Schriftfarbe gelb und die Schriftgr\u00f6\u00dfe large sein soll. Die zweite Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 1200px , dass der Hintergrund blau, die Schriftfarbe wei\u00df und die Schriftgr\u00f6\u00dfe xx-large sein soll. Wenn wir die Seite im Browser aufrufen, wird nun abh\u00e4ngig von der Gr\u00f6\u00dfe des Viewports eine der drei folgenden Ansichten gezeigt: \u00c4ndern Sie die Gr\u00f6\u00dfe der Browserbreite, um alle drei Ansichten zu sehen. Die dritte Media Query definiert eine eigene Ansicht f\u00fcr den Fall, dass die H\u00f6he des Viewports gr\u00f6\u00dfer ist als die Breite ( orientation: portrait ). Sie k\u00f6nnen diese Ansicht erreichen, indem Sie den Browser m\u00f6glichst schmal machen oder Sie nutzen die Developer Tools Ihres Browsers und \"drehen\" Ihr Ger\u00e4t. Zweites Beispiel \u00b6 Wir wollen uns noch ein zweites Beispiel anschauen. Dieses Beispiel zeigt bereits das Prinzip, auf dem das sogenannte Grid-Konzept beruht, welches in CSS-Frameworks verwendet wird. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > Der HTML-Code ist wieder einfach gehalten. Wir haben vier <p> -Elemente, die einen Text enthalten und denen jeweils drei Klassen zugeordnet sind: small , medium und large . In den CSS-Definitionen (siehe <style> -Element) definieren wir zun\u00e4chst Eigenschaften f\u00fcr die Klasse small . Wir geben dort zwar float:left an, das ist aber eigentlich unsinnig, da die Breite jedes einzelnen Absatzes 100% der Breite des Viewports ist ( widt: 98% + 2x padding: 1% ). Es w\u00fcrde dort auch gen\u00fcgen, wenn wir einfach nur padding: 1% definieren w\u00fcrden. Wichtiger sind die Definitionen in den beiden Media Queries. F\u00fcr eine Viewport-Breite zwischen 800px und 1199px definieren wir die Klasse medium so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 50% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann zwei Abs\u00e4tze nebeneinander passen. F\u00fcr eine Viewport-Breite gr\u00f6\u00dfer als 1199px definieren wir die Klasse large so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 25% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann vier Abs\u00e4tze nebeneinander passen. F\u00fchren Sie das Beispiel aus und \u00e4ndern Sie Ihre Browserbreite, dann werden Sie den Effekt sehen: Eine Anmerkung noch: Sie stellen sich vielleicht die Frage, warum z.B. bei einer Viewportbreite von mehr als 1200px die Definition der Klasse large wirkt, nicht jedoch die Definitionen der Klassen small und medium . Wenn wir uns an die Gewichtung der Selektoren erinnern, dann sollten alle drei Definitionen gleichgewichtet sein, denn es ist jeweils eine Klasse betroffen. Es steht als jeweils in Kategorie A eine 0 ( style -Attribut), in Kategorie B eine 0 (keine id ), in Kategorei C eine 1 (eine Klasse) und in Kategorie D eine 0 (kein Element). Tats\u00e4chlich sind auch alle drei Definitionen gleichgewichtet. Hier entscheidet jetzt tats\u00e4chlich die Reihenfolge der Definitionen und da zuerst small definiert wird, dann medium und dann large , wirkt large am st\u00e4rksten, wenn alle drei Klassen definiert sind. Das hei\u00dft auch, Sie d\u00fcrfen nicht zuerst mit der Media Query f\u00fcr gro\u00dfe Viewports beginnen, dann die Media Query f\u00fcr mittlere Viewports und erst dann die small -Definition, denn dann w\u00fcrde es nicht funktionieren. CSS-Frameworks \u00b6 F\u00fcr gr\u00f6\u00dfere Webanwendungen m\u00fcssen wir keine eigenen CSS-Definitionen schreiben, sondern k\u00f6nnen auf CSS-Frameworks zur\u00fcckgreifen, die ein einheitliches und mordernes Aussehen f\u00fcr Webanwendungen zur Verf\u00fcgung stellen. In diesen Frameworks wurden viele Klassen definiert und wir k\u00f6nnen unter Verwendung eines solchen Frameworks unseren HTML-Elementen gezielt Klassen zuweisen, die dann das Aussehen dieses Elementes beeinflussen. Einige solcher Frameworks haben bereits eine hohe Verbreitung: Bootstrap SemanticUI Materialize CSS Foundation Einen \u00dcberblick \u00fcber bekannte CSS-Frameworks finden Sie z.B. hier und hier . Wir erl\u00e4utern hier die Verwendung eines solchen Frameworks anhand von Bootstrap. Bootstrap \u00b6 Um Bootstrap zu verwenden, haben Sie zun\u00e4chst die Wahl zwischen der Verwendung eines Content Delivery Networks (CDN) oder dem Download der externen Bootstrap-CSS-Datei. Wenn Sie ein CDN verwenden, dann werden die Quellen in dem Moment geladen, in dem Sie die Webseite aufrufen. Der <head> Ihrer HTML-Datei sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Title </ title > </ head > Den entsprechenden Link zum CDN finden Sie auf der Bootstrap-Webseite . Sie k\u00f6nnen die CSS-Dateien aber auch herunterladen. Auf der Download Bootstrap-Webseite klicken Sie unter \"Compiled CSS and JS\" auf den \"Download\"-Button. Sie erhalten eine Datei bootstrap-4.5.3-dist.zip . Entpacken Sie diese Datei. Der entstehende Ordner enth\u00e4lt 2 Unterordner css und js . Letzterer enth\u00e4lt JavaScript-Dateien des Frameworks. Diese ben\u00f6tigen wir f\u00fcr unsere Zwecke hier (noch) nicht. Verschieben Sie den css-Ordner in Ihren Projekt-Ordner (z.B. Webtech20 ). Dann k\u00f6nnen Sie diese externen Dateien mit dem <link> -Tag wie bekannt einbinden. Der <head> sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Title </ title > </ head > Das min im Dateinamen bootstrap.min.css steht \u00fcbrigens daf\u00fcr, dass aus dieser CSS-Datei alle unn\u00f6tigen Whitespaces (Leerzeichen und Tabs) entfernt wurden, um die Datei m\u00f6glichst klein zu halten (sie ist immer noch 160 KB) gro\u00df - das muss bei jedem Abruf vom Webserver mitgeladen werden (wenn es nicht bereits im Cache ist). Mit den Whitespaces ( bootstrap.css ) ist die Datei sogar 198 KB gro\u00df. Wir erstellen mal eine erste Seite: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < div class = \"jumbotron\" > < div class = \"container\" > < h1 class = \"display-3\" > Jetzt mit Bootstrap! </ h1 > < p > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. Dieser gro\u00dfe graue Kasten hier nennt sich z.B. Jumbotron. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/4.5/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > </ body > </ html > Wenn Sie Bootstrap richtig eingebunden haben, dann sieht die Seite so aus: In dem obigen Beispiel habe ich einen Link auf Beispiele hinterlegt, in denen Bootstrap verwendet wird. Es lohnt sich, diese Beispiel genauer unter die Lupe zu nehmen, um ein Gef\u00fchl daf\u00fcr zu bekommen, wie die Klassen wirken und was alles so mit Bootstrap geht. Man muss keine dieser Klassen kennen, sondern sucht immer in bereits existierenden Beispielen, wie man ein Problem mithilfe von Bootstrap l\u00f6sen kann. Neben der Bootstrap-Webseite selbst bietet auch w3schools eine gute \u00dcbersicht. Daraus auch noch eine weitere Erg\u00e4nzung, n\u00e4mlich ein Formular, bei dem \u00fcberpr\u00fcft wird, ob eine Eingabe \u00fcberhaupt erfolgte. Der hinzugef\u00fcgte Code ist gelb unterlegt. Erweiterung des Beispiels um ein Formular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"jumbotron\" > < div class = \"container\" > < h1 class = \"display-3\" > Jetzt mit Bootstrap! </ h1 > < p > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. Dieser gro\u00dfe graue Kasten hier nennt sich z.B. < code > Jumbotron </ code > . </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/4.5/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > Die Seite sieht dann so aus: Wir wollen gar keine weiteren Beispiele hier auff\u00fchren. Wie gesagt, wenn Sie etwas ben\u00f6tigen, dann gucken Sie unter Bootstrap oder w3schools nach, ob es dort passende Beispiele gibt, die Sie kopieren und anpassen k\u00f6nnen. Uns geht es haupts\u00e4chlich um das Grid-Konzept, das im folgenden vorgestellt wird. Grid-Konzept \u00b6 Alle CSS-Frameworks beruhen zur Gestaltung eines responiven Webdesigns auf einem sogenannten Grid-Konzept . Bei diesem Konzept wird der Viewport in Spalten (columns) aufgeteilt. Bei den meisten CSS-Frameworks, auch bei Bootstrap, in 12 Spalten . Sie k\u00f6nnen einem Blockelement nun \u00fcber die Zuweisung zu einer bestimmten Klasse mitteilen, wieviele solcher Spalten f\u00fcr dieses Element zur Verf\u00fcgung stehen. Erstes Beispiel \u00b6 Wir betrachten zun\u00e4chst wieder ein einfaches Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > Wir haben drei <div> -Elemente in einem <div> , dem die Klasse row zugewiesen ist. Die drei <div> -Elemente innerhalb von row nehmen jeweils eine gewisse Anzahl von Spalten ein. das erste <div> ist 3 Spalten breit ( col-3 ), das zweite <div> 4 Spalten ( col-4 ) und das dritte <div> ist 5 Spalten breit ( col-5 ). Dadurch, dass die drei Container in einem Container mit der Klasse row und den drei Containern jeweils mit col-* eine Anzahl von Spalten zugewiesen wurden, erscheinen die drei Container nebeneinander und haben die Breite entsprechend der ihnen zugewiesenen Spaltenanzahl. Das erste <div> nimmt also 3/12 der Viewportbreite ein, das zweite <div> 4/12 und das dritte 5/12. Wichtig ist, dass die Summe der Spalten 12 ergibt (3+4+5), damit die drei Elemente auch nebeneinander passen (es darf zumindest nicht mehr sein). Folgende Abbildung zeigt die M\u00f6glichkeiten, wenn die jeweiligen Blockelemente jeweils gleichverteilt \u00fcber die gesamten 12 Spalten w\u00fcrden. Aber wie Sie gesehen haben, k\u00f6nnen die Spaltenbreiten auch beliebig gemischt werden (z.B. col-2 , col-3 , col-1 , col-6 ) - in Summe soll immer 12 herauskommen. Falls Sie mehrere Spalten gleichverteilen wollen (also gleiche Spaltenbreiten), k\u00f6nnen Sie auch einfach die Klasse col verwenden: < div class = \"row\" > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > </ div > Hier nehmen die inneren <div> nun jeweils 25% des Viewports ein und sind nebeneinander. Responsive \u00b6 Blockelemente nebeneinander anzuordnen, geht nun also schonmal recht leicht. Die eigentlich gute Idee des Grid-Konzeptes ist jedoch, dass man genau so einfach die Anordnung der Elemente responsiv gestalten kann. Neben der Klasse col (automatisch gleichverteilen) gibt es, wie wir bereits gesehen haben, die Klassen col-1 , col-2 , ... , col-12 . Damit k\u00f6nnen wir, wie im ersten Beispiel gezeigt, Blockelementen jeweils eine bestimmte Spaltenanzahl zuordnen. Jetzt kommt noch eine weitere Bedeutung dieser Klassen hinzu: man verwendet sie f\u00fcr extra schmale Ausgabeger\u00e4te (kleiner als 576px ). Daneben gibt es noch weitere Klassen (wir listen col- trotzdem nochmal mit auf): col- (xs-Ger\u00e4te; Bildschirmbreite kleiner als 576px) col-sm- (sm-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 576px) col-md- (md-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 768px) col-lg- (lg-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 992px) col-xl- (xl-Ger\u00e4te - Bildschirmbreite als 1200px) Hinter dem Strich steht bei allen Klassen eine Zahl 1 bis 12 . Die Klassen skalieren auch nach oben, d.h. wenn man nur die Klassen f\u00fcr xs-Ger\u00e4te angibt und keine weiter (so wie in unserem ersten Beispiel oben), dann gilt diese Angabe f\u00fcr alle weiteren Bildschirmbreiten. M\u00f6chte man z.B., dass die Darstellung in md-Ger\u00e4ten und lg-Ger\u00e4ten genau so sein soll, wie in sm-Ger\u00e4ten, dann l\u00e4sst man die Angabe f\u00fcr die md-Ger\u00e4te und lg-Ger\u00e4te einfach weg. Wir schauen uns das mal an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Die <div> -Elemente innerhalb der row sind alle gleich. Ihnen wurden jeweils folgende Klassen zugeordnet: col-12 : bei Bildschirmbreiten unter 576px geht ein div \u00fcber alle 12 Spalten, d.h. alle <div> sind untereinander (6 Zeilen) col-sm-6 : bei Bildschirmbreiten gr\u00f6\u00dfer als 576px und kleiner als 768px geht ein div \u00fcber 6 Spalten, d.h. 2 <div> passen jeweils nebeneinander (3 Zeilen) col-md-4 : bei Bildschirmbreiten gr\u00f6\u00dfer als 768px und kleiner als 992px geht ein div \u00fcber 4 Spalten, d.h. 3 <div> passen jeweils nebeneinander (2 Zeilen) col-xl-2 : bei Bildschirmbreiten \u00fcber 1200px geht ein div \u00fcber 2 Spalten, d.h. alle 6 <div> passen nebeneinander (1 Zeile) Eine Abweichung gibt es f\u00fcr col-lg- . Den ersten 4 <div> -Elementen ist jeweils die Klasse col-lg-3 zugeordnet. Damit passen diese 4 <div> -Elemente nebeneinander. Dann bleiben noch 2 <div> -Elemente \u00fcbrig. Denen wurde die Klasse col-lg-6 zugeordnet, so dass beide Elemente jeweils 6 Spalten breit sind und den Viewport zusammen vollst\u00e4ndig ausf\u00fcllen. Die folgenden Screenshots zeigen die jeweiligen Ansichten: Zusammenfassend l\u00e4sst sich also sagen, dass Sie ein responsives Layout erhalten, wenn Sie einem Container die Klasse row zurodnen und den darin enthaltenen Containern die f\u00fcr Ihr Layout entsprechenden Klassen col-* , col-sm-* , col-md-* , col-lg-* und/oder col-xl-* . Achten Sie darauf, dass die Spaltenbreite in einer Zeile insgesamt (h\u00f6chstens) 12 ergibt und dass die Definitionen nach oben (zum breiteren) skalieren. Das bedeutet, dass wenn Sie beispielsweise keine Definitionen f\u00fcr col-md-* angeben, dann wirken die Definitionen f\u00fcr col-sm-* . Sollten auch diese nicht angegeben sein, dann col-* . Vielleicht noch 2 weitere Beispiele zur Festigung des Verst\u00e4ndnisses. Erstens bestimmt die H\u00f6he des \"h\u00f6chsten\" inneren Containes die H\u00f6he aller Container in einer Reihe: < h2 > Alle Container in einer Reihe gleich hoch </ h2 > < div class = \"row\" > < div class = \"col\" style = \"background-color: blue; color: white;\" > Lorem ipsum dolor sit amet, cibo sensibus interesset no sit. Et dolor possim volutpat qui. No malis tollit iriure eam, et vel tale zril blandit, rebum vidisse nostrum qui eu. No nostrud dolorem legendos mea, ea eum mucius oporteat platonem.Eam an case scribentur, ei clita causae cum, alia debet eu vel. </ div > < div class = \"col\" style = \"background-color: lightblue; color: black;\" > .col </ div > < div class = \"col\" style = \"background-color: dodgerblue; color: black;\" > .col </ div > </ div > Das style -Attribut k\u00f6nnen Sie jeweils ignorieren, ist nur zur besseren Sichtbarkeit. Allen inneren Containern wurde die Klasse col zugeordnet, sie werden also innerhalb der Reihe gleichverteilt. Die H\u00f6he des h\u00f6chsten Containers (der erste mit dem l\u00e4ngeren Text) bestimmt auch die H\u00f6he der anderen Container in der Reihe. Es entsteht folgende Ansicht: Zweitens k\u00f6nnen Sie die Spalten auch verschachteln. Innerhalb eines Elternelementes soll die Spaltensumme wieder 12 sein. < h2 > Verschachtelte Spalten </ h2 > < div class = \"row\" > < div class = \"col-8\" style = \"background-color: yellowgreen; color: black;\" > .col-8 < div class = \"row\" > < div class = \"col-6\" style = \"background-color: grey; color: white;\" > .col-6 </ div > < div class = \"col-6\" style = \"background-color: dimgrey; color: white;\" > .col-6 </ div > </ div > </ div > < div class = \"col-4\" style = \"background-color: green; color: black;\" > .col-4 </ div > </ div > Auch hier k\u00f6nnen Sie die style -Attribute wieder ignorieren. Es gibt eine \"\u00e4u\u00dfere\" Reihe mit 2 inneren <div> -Elementen. Das erste <div> -Element geht \u00fcber 8 Spalten und das zweite <div> -Element \u00fcber 4 Spalten. Das erste <div> -Element ist selbst ein Elternelement f\u00fcr eine weitere Reihe. Diese enth\u00e4lt wiederum zwei <div> -Elemente, beide gehen \u00fcber 12 Spalten. Der Bezug ist hier aber das Elternelement. Es entsteht folgende Ansicht:","title":"RWD"},{"location":"rwd/#responsive-web-design","text":"Responsive bedeutet reagierend und wenn wir von Resonsive Web Design (RWD) sprechen, dann meinen wir damit, dass wir das Layout der Webseite so gestalten, dass es auf die Gr\u00f6\u00dfe des Ausgabeger\u00e4tes \"reagiert\". Das hei\u00dft, dass wir f\u00fcr kleine (schmale) Ausgabeger\u00e4te (z.B. Mobiltelefone) ein anderes Layout (Design) w\u00e4hlen, als f\u00fcr breitere Ausgabeger\u00e4te (z.B. Tablets) und ein noch anderes Layout f\u00fcr sehr breite Ausgabeger\u00e4te (z.B. Monitore). Responsive Web Design realisieren wir haupts\u00e4chlich mit CSS. Insofern h\u00e4tte es auch gut in den Skript-Teil f\u00fcr CSS gepasst. Da dies jedoch schon so lang war, haben wir eine eigene Unterseite f\u00fcr RWD erstellt. Damit \u00fcberhaupt auf unterschiedliche Ausgabeger\u00e4te reagiert werden kann, wurde sogenannte Media Queries in CSS eingef\u00fchrt. Diese schauen wir uns deshalb zun\u00e4chst genauer an. Zuvor noch ein wichtiger Tipp! Um unsere Webseite im responsiven Design zu gestalten, m\u00fcssen wir dem Browser mitteilen, dass er die Gr\u00f6\u00dfe des Viewports (also des Ausgabefensters) ber\u00fccksichtigen soll und die Darstellung an die Gr\u00f6\u00dfe des Ger\u00e4tes anpassen muss. Dazu f\u00fcgen wir im <head> unserer Webseite von nun an immer das viewport meta tag ein und geben damit an, dass einerseits die Ausgabe an die Ger\u00e4tegr\u00f6\u00dfe angepasst werden soll und wir mit einem Zoom-Faktor von 1 starten: <!-- ab jetzt immer im <head> angeben! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" >","title":"Responsive Web Design"},{"location":"rwd/#media-queries","text":"Grob gesagt, definieren wir mithilfe von Media Queries , welche CSS-Eigenschaften f\u00fcr welche Bildschirmgr\u00f6\u00dfe gelten sollen. Das hei\u00dft, wir definieren unterschiedliche CSS-Eigenschaften f\u00fcr unterschiedliche Bildschirmgr\u00f6\u00dfen. So k\u00f6nnen wir z.B. definieren, dass f\u00fcr Bildschirmbreiten unter 480px ein einspaltiges Layout gew\u00e4hlt wird, f\u00fcr Bildschirmbreiten gr\u00f6\u00dfer als 480px , aber kleiner gleich 720px ein 2-spaltiges Layout und f\u00fcr gr\u00f6\u00dfer als 720px ein 3-spaltiges Layout. Wir betrachten Media Queries zun\u00e4chst von der syntaktischen Seite. Das ist f\u00fcr Sie vielleicht zun\u00e4chst unspannend, aber wir \u00fcberlegen dabei, was alles geht, um dann zu sagen, dass wir uns doch nur um Screens (also Minitore) und doch nur um deren Breiten k\u00fcmmern - aber es ginge noch viel mehr ;-).","title":"Media Queries"},{"location":"rwd/#syntax-von-media-queries","text":"Media Queries k\u00f6nnen zun\u00e4chst einmal true oder false sein. Um diesen Wert zu ermitteln, wird f\u00fcr einen Medientyp ( media type ) ein Ausdruck ( expression ) ausgewertet. Die allgemeine Syntax f\u00fcr eine Media Query ist wie folgt: @media [not|only] mediatype and (expressions) { CSS-Code; } Eine Media Query beginnt immer mit @media . Dann kann ein not oder ein only kommen, muss aber nicht und wir werden es auch nicht verwenden. Danach kommt der Medientyp (sollte kein Medientyp angegeben werden, ist screen , also Monitor gemeint). Medientypen k\u00f6nnen z.B. Drucker ( print ), Monitore ( screen ), Screenreader ( speech ) oder all sein. Wir werden uns (fast) ausschlie\u00dflich mit Monitoren bzw Monitorgr\u00f6\u00dfen und damit als Medientyp screen besch\u00e4ftigen. Ein angegebener Medientyp wird mithilfe von and mit einem Ausdruck verkn\u00fcpft. Ein Ausdruck besteht aus einem media feature und einem Wert. Ein media feature ist z.B. width , min-width , max-width , height , min-height , max-height , device-width , min-device-width , max-device-width , device-height , min-device-height , max-device-height , orientation , usw. Ausdr\u00fccke ( expressions ) ergeben sich dann aus media feature und Wert, z.B. orientation: landscape , orientation: portrait , min-width: 480px , max-width: 480px , resolution: 150dpi .","title":"Syntax von Media Queries"},{"location":"rwd/#beispiele-von-media-queries","text":"Wir betrachten zun\u00e4chst einige Beispiele von Media Queries: @ media screen and ( max-width : 800px ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) h\u00f6chstens 800px breit ist */ } @ media only screen and ( min-width : 320px ) and ( max-width : 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } Seit Media Queries Level 4 kann man auch direkt schreiben: @ media ( 320px <= width <= 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } @ media ( orientation : portrait ) { /* hier die CSS-Eigenschaften f\u00fcr hochformatige Ausgabemedien */ } @ media ( orientation : landscape ) { /* hier die CSS-Eigenschaften f\u00fcr querformatige Ausgabemedien */ }","title":"Beispiele von Media Queries"},{"location":"rwd/#erstes-beispiel","text":"Wir versuchen, zun\u00e4chst immer mobile first zu designen, d.h. wir geben zun\u00e4chst die CSS-Eigenschaften an, die f\u00fcr mobile Ger\u00e4te (schmaler Viewport) gelten und f\u00fcgen dann Media Queries hinzu, die f\u00fcr gr\u00f6\u00dfere Ausgabebreiten Anwendung finden soll. Hier ein erstes Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Media Queries </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : green ; color : yellow ; font-size : large ;; } } @ media screen and ( min-width : 1200px ) { div { background-color : blue ; color : white ; font-size : xx-large ; } } @ media screen and ( orientation : portrait ) { div { writing-mode : vertical - rl ; text-orientation : mixed ; background-color : yellow ; color : brown ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ html > Der HTML-Code ist kurz: wir erstellen ein <div> , welches einen Text enth\u00e4lt. Im <style> -Element definieren wir f\u00fcr dieses <div> , dass der Text zentriert sein soll (vertikal, also von links nach rechts betrachtet) und dass nach oben und unten ein Abstand zum Rand von jeweils 20% der Viewport-H\u00f6he eingehalten werden soll. Dadurch wird das <div> einigerma\u00dfen hoch (weil <div> ein Block-Element ist, geht es sowieso \u00fcber die gesamte Breite). Au\u00dferdem legen wir fest, dass der Hintergrund rot und die Schriftgr\u00f6\u00dfe medium sein soll. Unsere erste Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 800px , dass der Hintergrund nun gr\u00fcn, die Schriftfarbe gelb und die Schriftgr\u00f6\u00dfe large sein soll. Die zweite Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 1200px , dass der Hintergrund blau, die Schriftfarbe wei\u00df und die Schriftgr\u00f6\u00dfe xx-large sein soll. Wenn wir die Seite im Browser aufrufen, wird nun abh\u00e4ngig von der Gr\u00f6\u00dfe des Viewports eine der drei folgenden Ansichten gezeigt: \u00c4ndern Sie die Gr\u00f6\u00dfe der Browserbreite, um alle drei Ansichten zu sehen. Die dritte Media Query definiert eine eigene Ansicht f\u00fcr den Fall, dass die H\u00f6he des Viewports gr\u00f6\u00dfer ist als die Breite ( orientation: portrait ). Sie k\u00f6nnen diese Ansicht erreichen, indem Sie den Browser m\u00f6glichst schmal machen oder Sie nutzen die Developer Tools Ihres Browsers und \"drehen\" Ihr Ger\u00e4t.","title":"Erstes Beispiel"},{"location":"rwd/#zweites-beispiel","text":"Wir wollen uns noch ein zweites Beispiel anschauen. Dieses Beispiel zeigt bereits das Prinzip, auf dem das sogenannte Grid-Konzept beruht, welches in CSS-Frameworks verwendet wird. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > Der HTML-Code ist wieder einfach gehalten. Wir haben vier <p> -Elemente, die einen Text enthalten und denen jeweils drei Klassen zugeordnet sind: small , medium und large . In den CSS-Definitionen (siehe <style> -Element) definieren wir zun\u00e4chst Eigenschaften f\u00fcr die Klasse small . Wir geben dort zwar float:left an, das ist aber eigentlich unsinnig, da die Breite jedes einzelnen Absatzes 100% der Breite des Viewports ist ( widt: 98% + 2x padding: 1% ). Es w\u00fcrde dort auch gen\u00fcgen, wenn wir einfach nur padding: 1% definieren w\u00fcrden. Wichtiger sind die Definitionen in den beiden Media Queries. F\u00fcr eine Viewport-Breite zwischen 800px und 1199px definieren wir die Klasse medium so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 50% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann zwei Abs\u00e4tze nebeneinander passen. F\u00fcr eine Viewport-Breite gr\u00f6\u00dfer als 1199px definieren wir die Klasse large so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 25% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann vier Abs\u00e4tze nebeneinander passen. F\u00fchren Sie das Beispiel aus und \u00e4ndern Sie Ihre Browserbreite, dann werden Sie den Effekt sehen: Eine Anmerkung noch: Sie stellen sich vielleicht die Frage, warum z.B. bei einer Viewportbreite von mehr als 1200px die Definition der Klasse large wirkt, nicht jedoch die Definitionen der Klassen small und medium . Wenn wir uns an die Gewichtung der Selektoren erinnern, dann sollten alle drei Definitionen gleichgewichtet sein, denn es ist jeweils eine Klasse betroffen. Es steht als jeweils in Kategorie A eine 0 ( style -Attribut), in Kategorie B eine 0 (keine id ), in Kategorei C eine 1 (eine Klasse) und in Kategorie D eine 0 (kein Element). Tats\u00e4chlich sind auch alle drei Definitionen gleichgewichtet. Hier entscheidet jetzt tats\u00e4chlich die Reihenfolge der Definitionen und da zuerst small definiert wird, dann medium und dann large , wirkt large am st\u00e4rksten, wenn alle drei Klassen definiert sind. Das hei\u00dft auch, Sie d\u00fcrfen nicht zuerst mit der Media Query f\u00fcr gro\u00dfe Viewports beginnen, dann die Media Query f\u00fcr mittlere Viewports und erst dann die small -Definition, denn dann w\u00fcrde es nicht funktionieren.","title":"Zweites Beispiel"},{"location":"rwd/#css-frameworks","text":"F\u00fcr gr\u00f6\u00dfere Webanwendungen m\u00fcssen wir keine eigenen CSS-Definitionen schreiben, sondern k\u00f6nnen auf CSS-Frameworks zur\u00fcckgreifen, die ein einheitliches und mordernes Aussehen f\u00fcr Webanwendungen zur Verf\u00fcgung stellen. In diesen Frameworks wurden viele Klassen definiert und wir k\u00f6nnen unter Verwendung eines solchen Frameworks unseren HTML-Elementen gezielt Klassen zuweisen, die dann das Aussehen dieses Elementes beeinflussen. Einige solcher Frameworks haben bereits eine hohe Verbreitung: Bootstrap SemanticUI Materialize CSS Foundation Einen \u00dcberblick \u00fcber bekannte CSS-Frameworks finden Sie z.B. hier und hier . Wir erl\u00e4utern hier die Verwendung eines solchen Frameworks anhand von Bootstrap.","title":"CSS-Frameworks"},{"location":"rwd/#bootstrap","text":"Um Bootstrap zu verwenden, haben Sie zun\u00e4chst die Wahl zwischen der Verwendung eines Content Delivery Networks (CDN) oder dem Download der externen Bootstrap-CSS-Datei. Wenn Sie ein CDN verwenden, dann werden die Quellen in dem Moment geladen, in dem Sie die Webseite aufrufen. Der <head> Ihrer HTML-Datei sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Title </ title > </ head > Den entsprechenden Link zum CDN finden Sie auf der Bootstrap-Webseite . Sie k\u00f6nnen die CSS-Dateien aber auch herunterladen. Auf der Download Bootstrap-Webseite klicken Sie unter \"Compiled CSS and JS\" auf den \"Download\"-Button. Sie erhalten eine Datei bootstrap-4.5.3-dist.zip . Entpacken Sie diese Datei. Der entstehende Ordner enth\u00e4lt 2 Unterordner css und js . Letzterer enth\u00e4lt JavaScript-Dateien des Frameworks. Diese ben\u00f6tigen wir f\u00fcr unsere Zwecke hier (noch) nicht. Verschieben Sie den css-Ordner in Ihren Projekt-Ordner (z.B. Webtech20 ). Dann k\u00f6nnen Sie diese externen Dateien mit dem <link> -Tag wie bekannt einbinden. Der <head> sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Title </ title > </ head > Das min im Dateinamen bootstrap.min.css steht \u00fcbrigens daf\u00fcr, dass aus dieser CSS-Datei alle unn\u00f6tigen Whitespaces (Leerzeichen und Tabs) entfernt wurden, um die Datei m\u00f6glichst klein zu halten (sie ist immer noch 160 KB) gro\u00df - das muss bei jedem Abruf vom Webserver mitgeladen werden (wenn es nicht bereits im Cache ist). Mit den Whitespaces ( bootstrap.css ) ist die Datei sogar 198 KB gro\u00df. Wir erstellen mal eine erste Seite: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < div class = \"jumbotron\" > < div class = \"container\" > < h1 class = \"display-3\" > Jetzt mit Bootstrap! </ h1 > < p > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. Dieser gro\u00dfe graue Kasten hier nennt sich z.B. Jumbotron. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/4.5/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > </ body > </ html > Wenn Sie Bootstrap richtig eingebunden haben, dann sieht die Seite so aus: In dem obigen Beispiel habe ich einen Link auf Beispiele hinterlegt, in denen Bootstrap verwendet wird. Es lohnt sich, diese Beispiel genauer unter die Lupe zu nehmen, um ein Gef\u00fchl daf\u00fcr zu bekommen, wie die Klassen wirken und was alles so mit Bootstrap geht. Man muss keine dieser Klassen kennen, sondern sucht immer in bereits existierenden Beispielen, wie man ein Problem mithilfe von Bootstrap l\u00f6sen kann. Neben der Bootstrap-Webseite selbst bietet auch w3schools eine gute \u00dcbersicht. Daraus auch noch eine weitere Erg\u00e4nzung, n\u00e4mlich ein Formular, bei dem \u00fcberpr\u00fcft wird, ob eine Eingabe \u00fcberhaupt erfolgte. Der hinzugef\u00fcgte Code ist gelb unterlegt. Erweiterung des Beispiels um ein Formular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"jumbotron\" > < div class = \"container\" > < h1 class = \"display-3\" > Jetzt mit Bootstrap! </ h1 > < p > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. Dieser gro\u00dfe graue Kasten hier nennt sich z.B. < code > Jumbotron </ code > . </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/4.5/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > Die Seite sieht dann so aus: Wir wollen gar keine weiteren Beispiele hier auff\u00fchren. Wie gesagt, wenn Sie etwas ben\u00f6tigen, dann gucken Sie unter Bootstrap oder w3schools nach, ob es dort passende Beispiele gibt, die Sie kopieren und anpassen k\u00f6nnen. Uns geht es haupts\u00e4chlich um das Grid-Konzept, das im folgenden vorgestellt wird.","title":"Bootstrap"},{"location":"rwd/#grid-konzept","text":"Alle CSS-Frameworks beruhen zur Gestaltung eines responiven Webdesigns auf einem sogenannten Grid-Konzept . Bei diesem Konzept wird der Viewport in Spalten (columns) aufgeteilt. Bei den meisten CSS-Frameworks, auch bei Bootstrap, in 12 Spalten . Sie k\u00f6nnen einem Blockelement nun \u00fcber die Zuweisung zu einer bestimmten Klasse mitteilen, wieviele solcher Spalten f\u00fcr dieses Element zur Verf\u00fcgung stehen.","title":"Grid-Konzept"},{"location":"rwd/#erstes-beispiel_1","text":"Wir betrachten zun\u00e4chst wieder ein einfaches Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > Wir haben drei <div> -Elemente in einem <div> , dem die Klasse row zugewiesen ist. Die drei <div> -Elemente innerhalb von row nehmen jeweils eine gewisse Anzahl von Spalten ein. das erste <div> ist 3 Spalten breit ( col-3 ), das zweite <div> 4 Spalten ( col-4 ) und das dritte <div> ist 5 Spalten breit ( col-5 ). Dadurch, dass die drei Container in einem Container mit der Klasse row und den drei Containern jeweils mit col-* eine Anzahl von Spalten zugewiesen wurden, erscheinen die drei Container nebeneinander und haben die Breite entsprechend der ihnen zugewiesenen Spaltenanzahl. Das erste <div> nimmt also 3/12 der Viewportbreite ein, das zweite <div> 4/12 und das dritte 5/12. Wichtig ist, dass die Summe der Spalten 12 ergibt (3+4+5), damit die drei Elemente auch nebeneinander passen (es darf zumindest nicht mehr sein). Folgende Abbildung zeigt die M\u00f6glichkeiten, wenn die jeweiligen Blockelemente jeweils gleichverteilt \u00fcber die gesamten 12 Spalten w\u00fcrden. Aber wie Sie gesehen haben, k\u00f6nnen die Spaltenbreiten auch beliebig gemischt werden (z.B. col-2 , col-3 , col-1 , col-6 ) - in Summe soll immer 12 herauskommen. Falls Sie mehrere Spalten gleichverteilen wollen (also gleiche Spaltenbreiten), k\u00f6nnen Sie auch einfach die Klasse col verwenden: < div class = \"row\" > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > </ div > Hier nehmen die inneren <div> nun jeweils 25% des Viewports ein und sind nebeneinander.","title":"Erstes Beispiel"},{"location":"rwd/#responsive","text":"Blockelemente nebeneinander anzuordnen, geht nun also schonmal recht leicht. Die eigentlich gute Idee des Grid-Konzeptes ist jedoch, dass man genau so einfach die Anordnung der Elemente responsiv gestalten kann. Neben der Klasse col (automatisch gleichverteilen) gibt es, wie wir bereits gesehen haben, die Klassen col-1 , col-2 , ... , col-12 . Damit k\u00f6nnen wir, wie im ersten Beispiel gezeigt, Blockelementen jeweils eine bestimmte Spaltenanzahl zuordnen. Jetzt kommt noch eine weitere Bedeutung dieser Klassen hinzu: man verwendet sie f\u00fcr extra schmale Ausgabeger\u00e4te (kleiner als 576px ). Daneben gibt es noch weitere Klassen (wir listen col- trotzdem nochmal mit auf): col- (xs-Ger\u00e4te; Bildschirmbreite kleiner als 576px) col-sm- (sm-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 576px) col-md- (md-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 768px) col-lg- (lg-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 992px) col-xl- (xl-Ger\u00e4te - Bildschirmbreite als 1200px) Hinter dem Strich steht bei allen Klassen eine Zahl 1 bis 12 . Die Klassen skalieren auch nach oben, d.h. wenn man nur die Klassen f\u00fcr xs-Ger\u00e4te angibt und keine weiter (so wie in unserem ersten Beispiel oben), dann gilt diese Angabe f\u00fcr alle weiteren Bildschirmbreiten. M\u00f6chte man z.B., dass die Darstellung in md-Ger\u00e4ten und lg-Ger\u00e4ten genau so sein soll, wie in sm-Ger\u00e4ten, dann l\u00e4sst man die Angabe f\u00fcr die md-Ger\u00e4te und lg-Ger\u00e4te einfach weg. Wir schauen uns das mal an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Die <div> -Elemente innerhalb der row sind alle gleich. Ihnen wurden jeweils folgende Klassen zugeordnet: col-12 : bei Bildschirmbreiten unter 576px geht ein div \u00fcber alle 12 Spalten, d.h. alle <div> sind untereinander (6 Zeilen) col-sm-6 : bei Bildschirmbreiten gr\u00f6\u00dfer als 576px und kleiner als 768px geht ein div \u00fcber 6 Spalten, d.h. 2 <div> passen jeweils nebeneinander (3 Zeilen) col-md-4 : bei Bildschirmbreiten gr\u00f6\u00dfer als 768px und kleiner als 992px geht ein div \u00fcber 4 Spalten, d.h. 3 <div> passen jeweils nebeneinander (2 Zeilen) col-xl-2 : bei Bildschirmbreiten \u00fcber 1200px geht ein div \u00fcber 2 Spalten, d.h. alle 6 <div> passen nebeneinander (1 Zeile) Eine Abweichung gibt es f\u00fcr col-lg- . Den ersten 4 <div> -Elementen ist jeweils die Klasse col-lg-3 zugeordnet. Damit passen diese 4 <div> -Elemente nebeneinander. Dann bleiben noch 2 <div> -Elemente \u00fcbrig. Denen wurde die Klasse col-lg-6 zugeordnet, so dass beide Elemente jeweils 6 Spalten breit sind und den Viewport zusammen vollst\u00e4ndig ausf\u00fcllen. Die folgenden Screenshots zeigen die jeweiligen Ansichten: Zusammenfassend l\u00e4sst sich also sagen, dass Sie ein responsives Layout erhalten, wenn Sie einem Container die Klasse row zurodnen und den darin enthaltenen Containern die f\u00fcr Ihr Layout entsprechenden Klassen col-* , col-sm-* , col-md-* , col-lg-* und/oder col-xl-* . Achten Sie darauf, dass die Spaltenbreite in einer Zeile insgesamt (h\u00f6chstens) 12 ergibt und dass die Definitionen nach oben (zum breiteren) skalieren. Das bedeutet, dass wenn Sie beispielsweise keine Definitionen f\u00fcr col-md-* angeben, dann wirken die Definitionen f\u00fcr col-sm-* . Sollten auch diese nicht angegeben sein, dann col-* . Vielleicht noch 2 weitere Beispiele zur Festigung des Verst\u00e4ndnisses. Erstens bestimmt die H\u00f6he des \"h\u00f6chsten\" inneren Containes die H\u00f6he aller Container in einer Reihe: < h2 > Alle Container in einer Reihe gleich hoch </ h2 > < div class = \"row\" > < div class = \"col\" style = \"background-color: blue; color: white;\" > Lorem ipsum dolor sit amet, cibo sensibus interesset no sit. Et dolor possim volutpat qui. No malis tollit iriure eam, et vel tale zril blandit, rebum vidisse nostrum qui eu. No nostrud dolorem legendos mea, ea eum mucius oporteat platonem.Eam an case scribentur, ei clita causae cum, alia debet eu vel. </ div > < div class = \"col\" style = \"background-color: lightblue; color: black;\" > .col </ div > < div class = \"col\" style = \"background-color: dodgerblue; color: black;\" > .col </ div > </ div > Das style -Attribut k\u00f6nnen Sie jeweils ignorieren, ist nur zur besseren Sichtbarkeit. Allen inneren Containern wurde die Klasse col zugeordnet, sie werden also innerhalb der Reihe gleichverteilt. Die H\u00f6he des h\u00f6chsten Containers (der erste mit dem l\u00e4ngeren Text) bestimmt auch die H\u00f6he der anderen Container in der Reihe. Es entsteht folgende Ansicht: Zweitens k\u00f6nnen Sie die Spalten auch verschachteln. Innerhalb eines Elternelementes soll die Spaltensumme wieder 12 sein. < h2 > Verschachtelte Spalten </ h2 > < div class = \"row\" > < div class = \"col-8\" style = \"background-color: yellowgreen; color: black;\" > .col-8 < div class = \"row\" > < div class = \"col-6\" style = \"background-color: grey; color: white;\" > .col-6 </ div > < div class = \"col-6\" style = \"background-color: dimgrey; color: white;\" > .col-6 </ div > </ div > </ div > < div class = \"col-4\" style = \"background-color: green; color: black;\" > .col-4 </ div > </ div > Auch hier k\u00f6nnen Sie die style -Attribute wieder ignorieren. Es gibt eine \"\u00e4u\u00dfere\" Reihe mit 2 inneren <div> -Elementen. Das erste <div> -Element geht \u00fcber 8 Spalten und das zweite <div> -Element \u00fcber 4 Spalten. Das erste <div> -Element ist selbst ein Elternelement f\u00fcr eine weitere Reihe. Diese enth\u00e4lt wiederum zwei <div> -Elemente, beide gehen \u00fcber 12 Spalten. Der Bezug ist hier aber das Elternelement. Es entsteht folgende Ansicht:","title":"Responsive"},{"location":"tools/","text":"Werkzeuge \u00b6 Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Git \u00b6 Git ist ein Werkzeug zur Versionskontrolle und zum gemeinsamen Entwickeln in Teams. Nach jeder \u00dcbung committen Sie Ihre L\u00f6sung und pushen Sie auf einen zentralen, netzbasierten Dienst, wie z.B. GitHub GitLab Bibucket Gew\u00e4hren Sie mir Zugriff auf Ihr zentrales Repository. Auf GitHub finden Sie mich unter jfreiheit bzw. meiner E-Mail-Adresse joern.freiheit@htw-berlin.de . Repository initial anlegen \u00b6 Wir zeigen das Erstellen eines Repositories exemplarisch f\u00fcr GitHub . Option A: Repository zun\u00e4chst in Github anlegen, dann clonen \u00b6 Als erstes loggen Sie sich in Github ein. Dort gibt es in der linken oberen Ecke einen Button New , siehe Bild: Klicken Sie darauf und geben Sie die notwendigen Informationen ein (Beschreibung ist optional): Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Klicken Sie auf den Button Create repository . Kopieren Sie sich nun den Remote-Pfad in Ihre Zwischenablage, hier https://github.com/jfreiheit/Webtech20.git . Wechseln Sie nun lokal in Ihr Terminal und wechseln in Ihren Workspace Ihrer IDE. Ich w\u00e4hle hier den Pfad /Users/jornfreiheit/Sites , da dieser Pfad gleichzeitig mein DocumentRoot ist, d.h., wenn ich localhost im Browser aufrufe, dann wird in diesem Pfad nach den Webseiten \"gesucht\". jornfreiheit@Jorns-MacBook-Pro Sites % pwd /Users/jornfreiheit/Sites Geben Sie dort nun ein: jornfreiheit@Jorns-MacBook-Pro Sites % git clone https://github.com/jfreiheit/Webtech20.git Cloning into 'Webtech20' ... warning: You appear to have cloned an empty repository. also git clone gefolgt von dem Remote-Pfad aus Ihrer Zwischenablage. Wenn Sie in Github weder README.md noch .gitignore ausgew\u00e4hlt hatten, dann erhalten Sie eine Warnung, dass Sie ein leeres Repository clonen. Das ist aber kein Problem. Sie k\u00f6nnen aber auch beide Datein in Ihr Repository integrieren, die .gitignore verwenden wir auf jeden Fall. In dem Ordner, in den Sie geclont haben, wird nun ein Ordner Webtech20 angelegt. Diesen Ordner k\u00f6nnen Sie nun als Workspace Ihrer IDE verwenden. Also z.B. mit IntelliJ IDEA : \u00f6ffnen Sie das Projekt ( Open or import ) Webtech20 . Es erscheint: Hier k\u00f6nnen Sie w\u00e4hlen, dass neue Dateien immer automatisch zum Git-Repoitory hinzugef\u00fcgt werden - das k\u00f6nnen Sie aber auch immer manuell machen ( git add . ). Angenommen, wir erstellen uns jetzt eine Datei index.html ( File --> New --> HTML File ) mit: index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Erster Test </ title > </ head > < body > < h1 > Willkommen </ h1 > < p > Das ist die Datei index.html. Sie liegt bei mir unter /Users/jornfreiheit/Sites/Webtech20. Der Ordner /Users/jornfreiheit/Sites ist mein DocumentRoot, deshalb kann ich diese Datei im Browser unter localhost/Webtech20/index.html aufrufen. Der Ordner Webtech20 wird von Git verwaltet. </ p > </ body > </ html > Da der Ordner Sites bei mir DocumentRoot ist und sich der Webtech20 -Ordner (in dem die neue index.html ist) direkt darunter befindet, kann ich mir die Datei im Browser unter localhost/Webtech20/index.html anzeigen lassen. Das nat nichts mit Git zu tun, sondern mit dem DocumentRoot des lokalen Webservers. Wir f\u00fcgen im Terminal im Webtech20 -Ordner diese Datei dem Git-Repoitory hinzu (falls noch nicht automatisch durch unsere IDE passiert): jornfreiheit@Jorns-MacBook-Pro Webtech20 % git add index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % git status On branch master No commits yet Changes to be committed: ( use \"git rm --cached <file>...\" to unstage ) new file: .idea/.gitignore new file: .idea/Webtech20.iml new file: .idea/misc.xml new file: .idea/modules.xml new file: .idea/vcs.xml new file: index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % Au\u00dferdem sollten wir den .idea -Ordner von der Git-Verwaltung ausschlie\u00dfen. Dazu erstellen wir im Webtech20 -Ordner eine Datei .gitignore , falls diese noch nicht existiert und tragen dort .idea ein. F\u00fcgen Sie die Datei .gitignore Ihrem repository hinzu, f\u00fchren Sie Ihr erstes Commit aus und pushen Ihr Repository nach Github: git add .ignore git commit -m \"erstes commit\" git push In Github erkenn Sie, dass commit und push geklappt haben: In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push . Option B: Repository in Github anlegen und lokal anlegen, dann verbinden \u00b6 Legen Sie sich wie oben beschrieben ein Repository unter GitHub an. Kopieren Sie die Remote-URL (z.B. https://github.com/jfreiheit/Webtech20.git ). Erstellen Sie sich lokal einen Ordner (am besten in Ihrem DocumentRoot ), z.B. Webtech20 ( mkdir Webtech20 ). Wechseln Sie in diesen Ordner ( cd Webtech20 ) und f\u00fchren Sie dort git init aus. Es entsteht ein .git -Ordner. F\u00fcgen Sie diesem lokalen Repository alle Ihre bisher in Webtech20 erstellten Dateien mit git add . hinzu. Erstellen Sie ein Commit, z.B. git commit -m \"initial commit\" . Verbinden Sie Ihr lokales Repository mit dem remote-Repository auf Github durch git remote add origin https://github.com/jfreiheit/Webtech20.git (f\u00fcr https://... setzen Sie Ihre Remote-URL ein). Pushen Sie die Dateien auf Ihr remote-Repository: git push --set-upstream origin master . In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push . Webserver \u00b6 F\u00fcr das Modul ben\u00f6tigen wir einen Webserver. Wir verwenden den Apache Webserver . Auf dem Mac ist er bereits vorhanden, auf Linux-Systemen meistens auch. F\u00fcr Windows-Systeme wird die Installation von XAMPP empfohlen. Hier finden Sie Anleitungen zur Einrichtung des Webservers: Windows: https://www.ionos.de/digitalguide/server/tools/xampp-tutorial-so-erstellen-sie-ihren-lokalen-testserver/ https://werner-zenk.de/tipps/lokale_webserver_xampp.php Wichtig ist, dass Sie wissen, wo sich Ihr DocumentRoot befindet (zun\u00e4chst xampp\\htdocs - l\u00e4sst sich aber \u00e4ndern ) Mac: der Apache-Webserver ist bereits installiert achten Sie darauf, dass Sie Ihr DocumentRoot kennen (meistens Sites , eventuell \u00e4ndern ) Linux: die meisten Linux-Systeme haben bereits einen Webserver (auch hier wichtig, DocumentRoot zu kennen) wenn nicht, k\u00f6nnen Sie sich auch XAMPP installieren Um zu testen, ob Ihr Webser l\u00e4uft, erstellen Sie im DocumentRoot eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen in Ihrem Browser http://localhost/index.php auf. Es sollte eine \u00e4hnliche Ausgabe wie folgt erscheinen (nur Ausschnitt: Developer Tools \u00b6 Alle Browser sind mit Werkzeugen ausgestattet, die es Web-Entwicklerinnen erm\u00f6glichen, im Browser Informationen \u00fcber die Webanwendung zu erhalten. F\u00fcr einige Browser ist hier angegeben, wie Sie diese Entwicklerwerkzeuge einschalten. Chrome \u00b6 In Chrome sind die Entwicklerwerkzeuge unter dem Men\u00fc neben der URL-Eingabezeile unter Weitere Tools --> Entwicklertools verf\u00fcgbar (siehe folgendes Bild). Die eingeschalteten Entwicklertools offenbaren Ihnen umfassende Informationen \u00fcber die angezeigte Webseite. Besonders interessant ist der Reiter Console : oder auch der Reiter Elements , der Ihnen sowohl den HTML- als auch den jeweiligen CSS-Code anzeigt: Weiterf\u00fchrende Informationen erhalten Sie unter https://developers.google.com/web/tools/chrome-devtools . Firefox \u00b6 Zu den Entwicklertools von Firefox finden Sie Informationen auf https://developer.mozilla.org/de/docs/Tools Firefox Browser Developer Die Entwicklertools lassen sich in Firefox \u00f6ffnen unter Web-Entwickler --> Inspektor : Sie haben die gleichen M\u00f6glichkeiten der Ananlyse wie bei Chrome, bei Safari und anderen Browsern: Safari \u00b6 In Safari m\u00fcssen Sie zun\u00e4chst den Men\u00fceintrag Entwickler aktivieren. Eine Anleitung dazu finden Sie z.B. hier auf heise . Weitere Informationen zu den Entwicklertools erhalten Sie z.B. auf Werkzeuge im Men\u00fc \u201eEntwickler\u201c Safari Developer Help Web Development Tools Curl \u00b6 Curl ist ein Open-Source-Kommandozeilenprogramm, um Daten mittels URL zu transferieren. Curl kann auf der Kommandozeile genutzt werden, um SMTP, HTTP, FTP usw. zu verwenden. Wir werden Curl insbesondere f\u00fcr die HTTP-Anfragemethoden GET und POST verwenden. Eine ausf\u00fchrliche Beschreibung von Curl ist im Buch Everything curl - the book frei verf\u00fcgbar. Die Installation von Curl erfolgt \u00fcber die Curl Download Seite . Zum Testen, ob Curl korrekt funktioniert, k\u00f6nnen Sie im Terminal z.B. curl freiheit.f4.htw-berlin.de/curl.html eingeben. Es sollte folgende Ausgabe erscheinen: <!DOCTYPE html> <html> <head> <title>Curl-Test</title> </head> <body> <p>Hallo FIW!</p> </body> </html> Mit dem -o -Flag k\u00f6nnen Sie die Datei speichern (Sie k\u00f6nnen einen Dateinamen angeben - hier curl.html ): curl -o curl.html freiheit.f4.htw-berlin.de/curl.html Da oben die lokale Datei genau so hei\u00dft wie die remote-Datei, h\u00e4tte man auch curl -O freiheit.f4.htw-berlin.de/curl.html angeben k\u00f6nnen, also gro\u00dfes -O . Mit dem -d -Flag k\u00f6nnen Parameter \u00fcbergeben und die entsprechende Seite mit einer POST-Anfrage aufgerufen werden. Mit dem zus\u00e4tzlichen -G -Flag erfolgt die Anfrage nicht als POST sondern als GET. Mit dem -I -Flag fragen Sie den Header der Anfrage ab, z.B.: curl -I freiheit.f4.htw-berlin.de/curl.html gibt etwas aus in der Art: HTTP/1.1 200 OK Date: Thu, 04 Jun 2020 13 :59:43 GMT Server: Apache/2.4.38 ( Debian ) Last-Modified: Thu, 04 Jun 2020 13 :01:59 GMT ETag: \"78-5a741c004bdb9\" Accept-Ranges: bytes Content-Length: 120 Vary: Accept-Encoding Content-Type: text/html F\u00fcr eine vollst\u00e4ndige \u00dcbersicht aller Flags von Curl siehe Curl manpage . Postman \u00b6 Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns zun\u00e4chst auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen (siehe auch HTML \u2192 HTTP ) m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Callbacks sind Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden (siehe JavaScript \u2192 Callback-Funktionen ). MySQL \u00b6 MySQL ist eine relationale Datenbank und geh\u00f6rt zu den am meisten verwendeten relationalen Datenbanken bei Webanwendungen. Wir h\u00e4tten uns auch f\u00fcr PostgreSQL entscheiden k\u00f6nnen. F\u00fcr einen kurzen Vergleich von MySQL und PostgreSQL siehe hier . Informationen zur Installation von MySQL finden Sie hier . Nach der Installation finden Sie z.B. auf dem Mac unter Systemeinstellungen \u2192 MySQL : phpMyadmin \u00b6 phpMyadmin ist eine graphische Oberfl\u00e4che zur Verwaltung Ihrer MySQL -Datenbanken. Nach erfolgreicher Installation rufen Sie im Browser localhost/phpmyadmin auf und haben Zugriff auf Ihre Datenbanken bzw. k\u00f6nnen diese erstellen, \u00e4ndern und bef\u00fcllen. Weitere Hilfen \u00b6 Prozesse und Ports \u00b6 Wenn Sie herausbekommen wollen, welche Ports bereits belegt sind und durch welchen Prozess, dann geben Sie im Terminal ein: lsof -i -P | grep -i LISTEN Eventuell m\u00fcssen Sie ein sudo voranstellen. Sie erhalten eine Ausgabe in der Form (variiert nat\u00fcrlich stark): rapportd 372 jornfreiheit 4u IPv4 0x5cee55fd054bd73 0t0 TCP *:57124 (LISTEN) rapportd 372 jornfreiheit 5u IPv6 0x5cee55fab8990c3 0t0 TCP *:57124 (LISTEN) phpstorm 456 jornfreiheit 55u IPv4 0x5cee55faabf19b3 0t0 TCP localhost:6942 (LISTEN) phpstorm 456 jornfreiheit 355u IPv4 0x5cee55fb7f034f3 0t0 TCP localhost:63342 (LISTEN) Dropbox 2638 jornfreiheit 129u IPv6 0x5cee55fb262a223 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 130u IPv4 0x5cee55fb25ea393 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 185u IPv4 0x5cee55fb7f00393 0t0 TCP localhost:17600 (LISTEN) Dropbox 2638 jornfreiheit 194u IPv4 0x5cee55fb9e31753 0t0 TCP localhost:17603 (LISTEN) node 9070 jornfreiheit 21u IPv6 0x5cee55fb5913843 0t0 TCP *:8080 (LISTEN) Python 9138 jornfreiheit 5u IPv4 0x5cee55fcfdf7753 0t0 TCP localhost:8000 (LISTEN) Wenn Sie nun z.B. einen bestimmten Prozess killen wollen, z.B. den Python-Prozess, der in localhost auf Port 8000 l\u00e4uft, dann geben Sie kill -9 9138 im Terminal ein. 9138 ist die PID des entsprechenden Prozesses.","title":"Werkzeuge"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#git","text":"Git ist ein Werkzeug zur Versionskontrolle und zum gemeinsamen Entwickeln in Teams. Nach jeder \u00dcbung committen Sie Ihre L\u00f6sung und pushen Sie auf einen zentralen, netzbasierten Dienst, wie z.B. GitHub GitLab Bibucket Gew\u00e4hren Sie mir Zugriff auf Ihr zentrales Repository. Auf GitHub finden Sie mich unter jfreiheit bzw. meiner E-Mail-Adresse joern.freiheit@htw-berlin.de .","title":"Git"},{"location":"tools/#repository-initial-anlegen","text":"Wir zeigen das Erstellen eines Repositories exemplarisch f\u00fcr GitHub .","title":"Repository initial anlegen"},{"location":"tools/#option-a-repository-zunachst-in-github-anlegen-dann-clonen","text":"Als erstes loggen Sie sich in Github ein. Dort gibt es in der linken oberen Ecke einen Button New , siehe Bild: Klicken Sie darauf und geben Sie die notwendigen Informationen ein (Beschreibung ist optional): Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Klicken Sie auf den Button Create repository . Kopieren Sie sich nun den Remote-Pfad in Ihre Zwischenablage, hier https://github.com/jfreiheit/Webtech20.git . Wechseln Sie nun lokal in Ihr Terminal und wechseln in Ihren Workspace Ihrer IDE. Ich w\u00e4hle hier den Pfad /Users/jornfreiheit/Sites , da dieser Pfad gleichzeitig mein DocumentRoot ist, d.h., wenn ich localhost im Browser aufrufe, dann wird in diesem Pfad nach den Webseiten \"gesucht\". jornfreiheit@Jorns-MacBook-Pro Sites % pwd /Users/jornfreiheit/Sites Geben Sie dort nun ein: jornfreiheit@Jorns-MacBook-Pro Sites % git clone https://github.com/jfreiheit/Webtech20.git Cloning into 'Webtech20' ... warning: You appear to have cloned an empty repository. also git clone gefolgt von dem Remote-Pfad aus Ihrer Zwischenablage. Wenn Sie in Github weder README.md noch .gitignore ausgew\u00e4hlt hatten, dann erhalten Sie eine Warnung, dass Sie ein leeres Repository clonen. Das ist aber kein Problem. Sie k\u00f6nnen aber auch beide Datein in Ihr Repository integrieren, die .gitignore verwenden wir auf jeden Fall. In dem Ordner, in den Sie geclont haben, wird nun ein Ordner Webtech20 angelegt. Diesen Ordner k\u00f6nnen Sie nun als Workspace Ihrer IDE verwenden. Also z.B. mit IntelliJ IDEA : \u00f6ffnen Sie das Projekt ( Open or import ) Webtech20 . Es erscheint: Hier k\u00f6nnen Sie w\u00e4hlen, dass neue Dateien immer automatisch zum Git-Repoitory hinzugef\u00fcgt werden - das k\u00f6nnen Sie aber auch immer manuell machen ( git add . ). Angenommen, wir erstellen uns jetzt eine Datei index.html ( File --> New --> HTML File ) mit: index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Erster Test </ title > </ head > < body > < h1 > Willkommen </ h1 > < p > Das ist die Datei index.html. Sie liegt bei mir unter /Users/jornfreiheit/Sites/Webtech20. Der Ordner /Users/jornfreiheit/Sites ist mein DocumentRoot, deshalb kann ich diese Datei im Browser unter localhost/Webtech20/index.html aufrufen. Der Ordner Webtech20 wird von Git verwaltet. </ p > </ body > </ html > Da der Ordner Sites bei mir DocumentRoot ist und sich der Webtech20 -Ordner (in dem die neue index.html ist) direkt darunter befindet, kann ich mir die Datei im Browser unter localhost/Webtech20/index.html anzeigen lassen. Das nat nichts mit Git zu tun, sondern mit dem DocumentRoot des lokalen Webservers. Wir f\u00fcgen im Terminal im Webtech20 -Ordner diese Datei dem Git-Repoitory hinzu (falls noch nicht automatisch durch unsere IDE passiert): jornfreiheit@Jorns-MacBook-Pro Webtech20 % git add index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % git status On branch master No commits yet Changes to be committed: ( use \"git rm --cached <file>...\" to unstage ) new file: .idea/.gitignore new file: .idea/Webtech20.iml new file: .idea/misc.xml new file: .idea/modules.xml new file: .idea/vcs.xml new file: index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % Au\u00dferdem sollten wir den .idea -Ordner von der Git-Verwaltung ausschlie\u00dfen. Dazu erstellen wir im Webtech20 -Ordner eine Datei .gitignore , falls diese noch nicht existiert und tragen dort .idea ein. F\u00fcgen Sie die Datei .gitignore Ihrem repository hinzu, f\u00fchren Sie Ihr erstes Commit aus und pushen Ihr Repository nach Github: git add .ignore git commit -m \"erstes commit\" git push In Github erkenn Sie, dass commit und push geklappt haben: In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push .","title":"Option A: Repository zun\u00e4chst in Github anlegen, dann clonen"},{"location":"tools/#option-b-repository-in-github-anlegen-und-lokal-anlegen-dann-verbinden","text":"Legen Sie sich wie oben beschrieben ein Repository unter GitHub an. Kopieren Sie die Remote-URL (z.B. https://github.com/jfreiheit/Webtech20.git ). Erstellen Sie sich lokal einen Ordner (am besten in Ihrem DocumentRoot ), z.B. Webtech20 ( mkdir Webtech20 ). Wechseln Sie in diesen Ordner ( cd Webtech20 ) und f\u00fchren Sie dort git init aus. Es entsteht ein .git -Ordner. F\u00fcgen Sie diesem lokalen Repository alle Ihre bisher in Webtech20 erstellten Dateien mit git add . hinzu. Erstellen Sie ein Commit, z.B. git commit -m \"initial commit\" . Verbinden Sie Ihr lokales Repository mit dem remote-Repository auf Github durch git remote add origin https://github.com/jfreiheit/Webtech20.git (f\u00fcr https://... setzen Sie Ihre Remote-URL ein). Pushen Sie die Dateien auf Ihr remote-Repository: git push --set-upstream origin master . In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push .","title":"Option B: Repository in Github anlegen und lokal anlegen, dann verbinden"},{"location":"tools/#webserver","text":"F\u00fcr das Modul ben\u00f6tigen wir einen Webserver. Wir verwenden den Apache Webserver . Auf dem Mac ist er bereits vorhanden, auf Linux-Systemen meistens auch. F\u00fcr Windows-Systeme wird die Installation von XAMPP empfohlen. Hier finden Sie Anleitungen zur Einrichtung des Webservers: Windows: https://www.ionos.de/digitalguide/server/tools/xampp-tutorial-so-erstellen-sie-ihren-lokalen-testserver/ https://werner-zenk.de/tipps/lokale_webserver_xampp.php Wichtig ist, dass Sie wissen, wo sich Ihr DocumentRoot befindet (zun\u00e4chst xampp\\htdocs - l\u00e4sst sich aber \u00e4ndern ) Mac: der Apache-Webserver ist bereits installiert achten Sie darauf, dass Sie Ihr DocumentRoot kennen (meistens Sites , eventuell \u00e4ndern ) Linux: die meisten Linux-Systeme haben bereits einen Webserver (auch hier wichtig, DocumentRoot zu kennen) wenn nicht, k\u00f6nnen Sie sich auch XAMPP installieren Um zu testen, ob Ihr Webser l\u00e4uft, erstellen Sie im DocumentRoot eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen in Ihrem Browser http://localhost/index.php auf. Es sollte eine \u00e4hnliche Ausgabe wie folgt erscheinen (nur Ausschnitt:","title":"Webserver"},{"location":"tools/#developer-tools","text":"Alle Browser sind mit Werkzeugen ausgestattet, die es Web-Entwicklerinnen erm\u00f6glichen, im Browser Informationen \u00fcber die Webanwendung zu erhalten. F\u00fcr einige Browser ist hier angegeben, wie Sie diese Entwicklerwerkzeuge einschalten.","title":"Developer Tools"},{"location":"tools/#chrome","text":"In Chrome sind die Entwicklerwerkzeuge unter dem Men\u00fc neben der URL-Eingabezeile unter Weitere Tools --> Entwicklertools verf\u00fcgbar (siehe folgendes Bild). Die eingeschalteten Entwicklertools offenbaren Ihnen umfassende Informationen \u00fcber die angezeigte Webseite. Besonders interessant ist der Reiter Console : oder auch der Reiter Elements , der Ihnen sowohl den HTML- als auch den jeweiligen CSS-Code anzeigt: Weiterf\u00fchrende Informationen erhalten Sie unter https://developers.google.com/web/tools/chrome-devtools .","title":"Chrome"},{"location":"tools/#firefox","text":"Zu den Entwicklertools von Firefox finden Sie Informationen auf https://developer.mozilla.org/de/docs/Tools Firefox Browser Developer Die Entwicklertools lassen sich in Firefox \u00f6ffnen unter Web-Entwickler --> Inspektor : Sie haben die gleichen M\u00f6glichkeiten der Ananlyse wie bei Chrome, bei Safari und anderen Browsern:","title":"Firefox"},{"location":"tools/#safari","text":"In Safari m\u00fcssen Sie zun\u00e4chst den Men\u00fceintrag Entwickler aktivieren. Eine Anleitung dazu finden Sie z.B. hier auf heise . Weitere Informationen zu den Entwicklertools erhalten Sie z.B. auf Werkzeuge im Men\u00fc \u201eEntwickler\u201c Safari Developer Help Web Development Tools","title":"Safari"},{"location":"tools/#curl","text":"Curl ist ein Open-Source-Kommandozeilenprogramm, um Daten mittels URL zu transferieren. Curl kann auf der Kommandozeile genutzt werden, um SMTP, HTTP, FTP usw. zu verwenden. Wir werden Curl insbesondere f\u00fcr die HTTP-Anfragemethoden GET und POST verwenden. Eine ausf\u00fchrliche Beschreibung von Curl ist im Buch Everything curl - the book frei verf\u00fcgbar. Die Installation von Curl erfolgt \u00fcber die Curl Download Seite . Zum Testen, ob Curl korrekt funktioniert, k\u00f6nnen Sie im Terminal z.B. curl freiheit.f4.htw-berlin.de/curl.html eingeben. Es sollte folgende Ausgabe erscheinen: <!DOCTYPE html> <html> <head> <title>Curl-Test</title> </head> <body> <p>Hallo FIW!</p> </body> </html> Mit dem -o -Flag k\u00f6nnen Sie die Datei speichern (Sie k\u00f6nnen einen Dateinamen angeben - hier curl.html ): curl -o curl.html freiheit.f4.htw-berlin.de/curl.html Da oben die lokale Datei genau so hei\u00dft wie die remote-Datei, h\u00e4tte man auch curl -O freiheit.f4.htw-berlin.de/curl.html angeben k\u00f6nnen, also gro\u00dfes -O . Mit dem -d -Flag k\u00f6nnen Parameter \u00fcbergeben und die entsprechende Seite mit einer POST-Anfrage aufgerufen werden. Mit dem zus\u00e4tzlichen -G -Flag erfolgt die Anfrage nicht als POST sondern als GET. Mit dem -I -Flag fragen Sie den Header der Anfrage ab, z.B.: curl -I freiheit.f4.htw-berlin.de/curl.html gibt etwas aus in der Art: HTTP/1.1 200 OK Date: Thu, 04 Jun 2020 13 :59:43 GMT Server: Apache/2.4.38 ( Debian ) Last-Modified: Thu, 04 Jun 2020 13 :01:59 GMT ETag: \"78-5a741c004bdb9\" Accept-Ranges: bytes Content-Length: 120 Vary: Accept-Encoding Content-Type: text/html F\u00fcr eine vollst\u00e4ndige \u00dcbersicht aller Flags von Curl siehe Curl manpage .","title":"Curl"},{"location":"tools/#postman","text":"Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns zun\u00e4chst auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen (siehe auch HTML \u2192 HTTP ) m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server","title":"Postman"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Callbacks sind Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden (siehe JavaScript \u2192 Callback-Funktionen ).","title":"Node.js"},{"location":"tools/#mysql","text":"MySQL ist eine relationale Datenbank und geh\u00f6rt zu den am meisten verwendeten relationalen Datenbanken bei Webanwendungen. Wir h\u00e4tten uns auch f\u00fcr PostgreSQL entscheiden k\u00f6nnen. F\u00fcr einen kurzen Vergleich von MySQL und PostgreSQL siehe hier . Informationen zur Installation von MySQL finden Sie hier . Nach der Installation finden Sie z.B. auf dem Mac unter Systemeinstellungen \u2192 MySQL :","title":"MySQL"},{"location":"tools/#phpmyadmin","text":"phpMyadmin ist eine graphische Oberfl\u00e4che zur Verwaltung Ihrer MySQL -Datenbanken. Nach erfolgreicher Installation rufen Sie im Browser localhost/phpmyadmin auf und haben Zugriff auf Ihre Datenbanken bzw. k\u00f6nnen diese erstellen, \u00e4ndern und bef\u00fcllen.","title":"phpMyadmin"},{"location":"tools/#weitere-hilfen","text":"","title":"Weitere Hilfen"},{"location":"tools/#prozesse-und-ports","text":"Wenn Sie herausbekommen wollen, welche Ports bereits belegt sind und durch welchen Prozess, dann geben Sie im Terminal ein: lsof -i -P | grep -i LISTEN Eventuell m\u00fcssen Sie ein sudo voranstellen. Sie erhalten eine Ausgabe in der Form (variiert nat\u00fcrlich stark): rapportd 372 jornfreiheit 4u IPv4 0x5cee55fd054bd73 0t0 TCP *:57124 (LISTEN) rapportd 372 jornfreiheit 5u IPv6 0x5cee55fab8990c3 0t0 TCP *:57124 (LISTEN) phpstorm 456 jornfreiheit 55u IPv4 0x5cee55faabf19b3 0t0 TCP localhost:6942 (LISTEN) phpstorm 456 jornfreiheit 355u IPv4 0x5cee55fb7f034f3 0t0 TCP localhost:63342 (LISTEN) Dropbox 2638 jornfreiheit 129u IPv6 0x5cee55fb262a223 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 130u IPv4 0x5cee55fb25ea393 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 185u IPv4 0x5cee55fb7f00393 0t0 TCP localhost:17600 (LISTEN) Dropbox 2638 jornfreiheit 194u IPv4 0x5cee55fb9e31753 0t0 TCP localhost:17603 (LISTEN) node 9070 jornfreiheit 21u IPv6 0x5cee55fb5913843 0t0 TCP *:8080 (LISTEN) Python 9138 jornfreiheit 5u IPv4 0x5cee55fcfdf7753 0t0 TCP localhost:8000 (LISTEN) Wenn Sie nun z.B. einen bestimmten Prozess killen wollen, z.B. den Python-Prozess, der in localhost auf Port 8000 l\u00e4uft, dann geben Sie kill -9 9138 im Terminal ein. 9138 ist die PID des entsprechenden Prozesses.","title":"Prozesse und Ports"}]}